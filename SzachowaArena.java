/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package szachy;

import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.MediaPrintableArea;
import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.util.List;
import java.awt.print.Book;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.io.*;
import java.net.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.sql.*;
import java.util.Timer;
import java.util.*;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.concurrent.Future;

/*import org.teleal.cling.UpnpServiceImpl;
import org.teleal.cling.support.igd.PortMappingListener;
import org.teleal.cling.support.model.PortMapping;*/
/**
 *
 * @author Patryk Główna klasa programu
 */
public class SzachowaArena extends javax.swing.JFrame {

    Debiut_nauka debiut_nauka = null;
    int wybor_treningu;
    private boolean nauka_gry;
    boolean nauka_praktyczna = false;
    boolean dostawka, druk_wzgledny = false;
    int rezerwyBP, rezerwyCP, rezerwyBS, rezerwyCS, rezerwyBG, rezerwyCG, rezerwyBW, rezerwyCW, rezerwyBH, rezerwyCH;
    ArrayList<String> promowane_piony = new ArrayList<>();
    Pozycja pozstart, pozstop;
    int blackmove = 0, whitemove = 0;
    char schodzi;
    ArrayList<Ruch> mordobicia = new ArrayList<>();
    ArrayList<Ruch> zwyczajneR = new ArrayList<>();
    boolean wlasnykolor = false;
    Thread scanip = null;
    String[] choices;
    Color rama = Color.GREEN, pomoc_ruch = Color.BLUE;
    ArrayList<String> hug_list = new ArrayList<>();
    public char[][][] szachownica_pokoj = new char[8][8][2];
    public Condition warunek;// gra na czas
    int sztuczny_rywal; // do SI
    public Lock blokada; // gra na czas
    boolean SI_wyk = false; // do SI
    private Cursor mysz;
    public Thread whitetime, blacktime; //gra na czas
    public static ServerSocket server; // gra online
    public boolean odwrot = false; // gra z SI i online
    zegar czasB; // gra na czas
    zegar czasC; // gra na czas
    public int plustime = 0, sekbaza; // gra na czas
    public boolean tura_rywala, SI_ON /*do SI*/, dokonano_RB = false, dokonano_RC = false;//baza
    boolean organizator, siec, oczekiwanie = false;// gra online
    public ArrayList<String> historia = new ArrayList<>();//baza
    public static ArrayList<String> listaip = new ArrayList<>();
    ArrayList<String> ruchy_literowe = new ArrayList<>();
    ArrayList<String> ruchy_syboliczne = new ArrayList<>();
    public static Socket socket;//gra online
    int[] poza_krolewska = new int[2]; // baza
    public int bonuss, sek, seksyg, czasgry; // gra na czas
    public byte kolor_zestaw, kroj_zestaw = 3, kolor_plansza = 1; // wyglad
    public int[] lokalS = new int[2]; // baza
    public int[] lokalK = new int[2];// baza
    public int[] klopoty = new int[2];// baza
    public int[] pole_baza = new int[2];// baza
    public boolean ruchB = true, koniecanimacji;// baza
    public String msgwe = "", msgwy = "", ruch = "";// gra online
    public boolean polestart, prze, gra, dokonanoEP, kon;// baza
    public boolean roch, wyk, przelot, przelotcan, zmien; // baza
    private Icon cursor;//baza
    public char promo, pomoci1, symbol, pomoci2, znak_promocji = ' ';//baza
    public String pomocs, pomoce, koncowe, czarne, biale, start, stop;//baza
    public String pomoci, kap, nazwapola;//baza
    public Icon pomoc5;
    public byte zasada50, lekkieB, lekkieC, ciezkieB, ciezkieC, pionB, pionC;//baza
    char[][] kontrolka = new char[8][8];//baza
    char[][] pozycja_ustawki = new char[8][8];//baza
    public char[][] ust = new char[8][8];//baza
    char[][] nakladki = new char[8][8];
    public static char[][] odwrotna = new char[8][8];//baza
    public char[][] kontrolamat = new char[8][8];//baza
    public boolean krolS, kingrochB, kingrochC, bleft, bright, wleft, wright, atak;//baza
    int krole_czarne, krole_biale;//baza
    public int kol;//baza
    int movenr, wybor, kolumna = 0, pole = 0;//baza
    public boolean ustawka = false;//baza
    public static boolean wzor = false;
    public boolean szachB, szachC, promocja, dolicz, bicie, pierwsza_kolej;//baza
    boolean hodu = true, hitme = true, protectme = true, move = true;//baza
    boolean checka, checkp, pakc;//baza
    long laczny_czas = 0;//baza
    public Icon c0, c1, c2, c3, c4, c5;//baza
    public Icon b0, b1, b2, b3, b4, b5;//baza
    String KB = "BIAŁE", KC = "CZARNE", KL = "LOSOWY KOLOR";//gra online
    static DataInputStream in;//gra online
    static DataOutputStream out;//gra online
    lacze polaczenie_net;//gra online
    public String ruszaj, zatrzymaj;//gra online
    byte glebiaSI/* do SI */;
    public boolean mysle;
    char[] symbole = new char[2];
    int liczba_usciskow = 0, tryb;//do gra na czas
    Icon[] przytul_figure = new Icon[35];
    String ostatni_start = "", ostatni_stop = "";
    int opcje_pomoc = 0;
    private boolean symulacja;

    /**
     * Creates new form NewJFrame
     */
    public SzachowaArena() {

        bleft = true;
        bright = true;
        wleft = true;
        wright = true;
        initComponents();
        obrotowy.setEnabled(false);
        SIOnOff.setEnabled(false);
        ruch = "";
        partia_odlozona.setVisible(false);
        kombinacja.setVisible(false);
        int szer = Toolkit.getDefaultToolkit().getScreenSize().width;
        int szerRamki = this.getSize().width;
        this.setLocation((szer - szerRamki) / 2, 0);
        kolor_zestaw = 2;
        czasgry = -1;
        ImageIcon ikona = new ImageIcon(this.getClass().getResource("icona.png"));
        this.setIconImage(ikona.getImage());
        pionRB.setVisible(false);
        pionRW.setVisible(false);
        skoczekRB.setVisible(false);
        skoczekRW.setVisible(false);
        goniecRB.setVisible(false);
        goniecRW.setVisible(false);
        wiezaRB.setVisible(false);
        wiezaRW.setVisible(false);
        hetmanRB.setVisible(false);
        hetmanRW.setVisible(false);
        pionRB.setVisible(false);
        pionRW.setVisible(false);
        Blackkingside.setVisible(false);
        Whitekingside.setVisible(false);
        Blackqueenside.setVisible(false);
        Whitequeenside.setVisible(false);
        przelotowe.setVisible(false);
        jLabel20.setVisible(false);
        Blackkingside.setBackground(Color.BLACK);
        Blackqueenside.setBackground(Color.BLACK);
        Whitekingside.setBackground(Color.WHITE);
        Whitequeenside.setBackground(Color.WHITE);
        Blackkingside.setOpaque(true);
        Whitekingside.setOpaque(true);
        Blackqueenside.setOpaque(true);
        Whitequeenside.setOpaque(true);
        czarneRuch.setVisible(false);
        bialeRuch.setVisible(false);
        jRadioButton11.setVisible(false);
        ustawWP.setVisible(false);
        ustawBP.setVisible(false);
        ustawWN.setVisible(false);
        ustawBN.setVisible(false);
        ustawWB.setVisible(false);
        ustawBB.setVisible(false);
        ustawWR.setVisible(false);
        ustawBR.setVisible(false);
        ustawWQ.setVisible(false);
        ustawBQ.setVisible(false);
        ustawWK.setVisible(false);
        ustawBK.setVisible(false);
        jButton72.setVisible(false);
        jButton81.setVisible(false);
        jTextArea2.setVisible(false);
        jTextField1.setVisible(false);
        jButton72.setVisible(false);
        b1 = new ImageIcon(this.getClass().getResource("Wqueen01.png"));
        b2 = new ImageIcon(this.getClass().getResource("Wrook001.png"));
        b3 = new ImageIcon(this.getClass().getResource("Wbishop1.png"));
        b4 = new ImageIcon(this.getClass().getResource("Wknight1.png"));
        c1 = new ImageIcon(this.getClass().getResource("Bqueen01.png"));
        c2 = new ImageIcon(this.getClass().getResource("Brook001.png"));
        c3 = new ImageIcon(this.getClass().getResource("Bbishop1.png"));
        c4 = new ImageIcon(this.getClass().getResource("Bknight1.png"));
        movenr = 1;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                switch (i) {
                    case 0:
                        switch (j) {
                            case 0:
                            case 7:
                                ust[i][j] = 'R';
                                odwrotna[i][j] = 'r';
                                break;
                            case 1:
                            case 6:
                                ust[i][j] = 'N';
                                odwrotna[i][j] = 'n';
                                break;
                            case 5:
                            case 2:
                                ust[i][j] = 'B';
                                odwrotna[i][j] = 'b';
                                break;
                            case 3:
                                ust[i][j] = 'Q';
                                odwrotna[i][j] = 'k';
                                break;
                            case 4:
                                ust[i][j] = 'K';
                                odwrotna[i][j] = 'q';
                                break;
                        }
                        break;
                    case 1:
                        ust[i][j] = 'P';
                        odwrotna[i][j] = 'p';
                        break;
                    case 7:
                        switch (j) {
                            case 0:
                            case 7:
                                ust[i][j] = 'r';
                                odwrotna[i][j] = 'R';
                                break;
                            case 1:
                            case 6:
                                ust[i][j] = 'n';
                                odwrotna[i][j] = 'N';
                                break;
                            case 5:
                            case 2:
                                ust[i][j] = 'b';
                                odwrotna[i][j] = 'B';
                                break;
                            case 3:
                                ust[i][j] = 'q';
                                odwrotna[i][j] = 'K';
                                break;
                            case 4:
                                ust[i][j] = 'k';
                                odwrotna[i][j] = 'Q';
                                break;
                        }
                        break;
                    case 6:
                        ust[i][j] = 'p';
                        odwrotna[i][j] = 'P';
                        break;
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        ust[i][j] = ' ';
                }
            }
        }
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 6; j++) {
                switch (i) {
                    case 0:
                        switch (j) {
                            case 0:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugPP.png"));
                                break;
                            case 1:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugPN.png"));
                                break;
                            case 2:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugPB.png"));
                                break;
                            case 3:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugPR.png"));
                                break;
                            case 4:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugPQ.png"));
                                break;
                            case 5:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugPK.png"));
                                break;
                        }
                        break;
                    case 1:
                        switch (j) {
                            case 0:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugNP.png"));
                                break;
                            case 1:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugNN.png"));
                                break;
                            case 2:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugNB.png"));
                                break;
                            case 3:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugNR.png"));
                                break;
                            case 4:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugNQ.png"));
                                break;
                            case 5:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugNK.png"));
                                break;
                        }
                        break;
                    case 2:
                        switch (j) {
                            case 0:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugBP.png"));
                                break;
                            case 1:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugBN.png"));
                                break;
                            case 2:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugBB.png"));
                                break;
                            case 3:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugBR.png"));
                                break;
                            case 4:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugBQ.png"));
                                break;
                            case 5:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugBK.png"));
                                break;
                        }
                        break;
                    case 3:
                        switch (j) {
                            case 0:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugRP.png"));
                                break;
                            case 1:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugRN.png"));
                                break;
                            case 2:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugRB.png"));
                                break;
                            case 3:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugRR.png"));
                                break;
                            case 4:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugRQ.png"));
                                break;
                            case 5:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugRK.png"));
                                break;
                        }
                        break;
                    case 4:
                        switch (j) {
                            case 0:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugQP.png"));
                                break;
                            case 1:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugQN.png"));
                                break;
                            case 2:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugQB.png"));
                                break;
                            case 3:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugQR.png"));
                                break;
                            case 4:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugQQ.png"));
                                break;
                            case 5:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugQK.png"));
                                break;
                        }
                        break;
                    case 5:
                        switch (j) {
                            case 0:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugKP.png"));
                                break;
                            case 1:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugKN.png"));
                                break;
                            case 2:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugKB.png"));
                                break;
                            case 3:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugKR.png"));
                                break;
                            case 4:
                                przytul_figure[j + i * 6] = new ImageIcon(this.getClass().getResource("hugKQ.png"));
                                break;
                            case 5:
                                break;
                        }
                        break;
                }
            }
        }
        kingrochB = true;
        kingrochC = true;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }

    private void ruch_grabiezy(Object pole) {
        JButton BUTTON = (JButton) pole;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
        byte pomocx = 0, pomocy = 0;
        char pomoc2, pomoc3;
        if (BUTTON.getIcon() != null || polestart) {
            if (!polestart) {
                pomocs = BUTTON.getName();
                pomoc2 = pomocs.charAt(0);
                pomoc3 = pomocs.charAt(1);
                if (!odwrot) {
                    switch (pomoc2) {
                        case 'A':
                            pomocx = 1;
                            break;
                        case 'B':
                            pomocx = 2;
                            break;
                        case 'C':
                            pomocx = 3;
                            break;
                        case 'D':
                            pomocx = 4;
                            break;
                        case 'E':
                            pomocx = 5;
                            break;
                        case 'F':
                            pomocx = 6;
                            break;
                        case 'G':
                            pomocx = 7;
                            break;
                        case 'H':
                            pomocx = 8;
                            break;
                    }
                    switch (pomoc3) {
                        case '1':
                            pomocy = 1;
                            break;
                        case '2':
                            pomocy = 2;
                            break;
                        case '3':
                            pomocy = 3;
                            break;
                        case '4':
                            pomocy = 4;
                            break;
                        case '5':
                            pomocy = 5;
                            break;
                        case '6':
                            pomocy = 6;
                            break;
                        case '7':
                            pomocy = 7;
                            break;
                        case '8':
                            pomocy = 8;
                            break;
                    }
                } else {
                    switch (pomoc2) {
                        case 'A':
                            pomocx = 8;
                            break;
                        case 'B':
                            pomocx = 7;
                            break;
                        case 'C':
                            pomocx = 6;
                            break;
                        case 'D':
                            pomocx = 5;
                            break;
                        case 'E':
                            pomocx = 4;
                            break;
                        case 'F':
                            pomocx = 3;
                            break;
                        case 'G':
                            pomocx = 2;
                            break;
                        case 'H':
                            pomocx = 1;
                            break;
                    }
                    switch (pomoc3) {
                        case '1':
                            pomocy = 8;
                            break;
                        case '2':
                            pomocy = 7;
                            break;
                        case '3':
                            pomocy = 6;
                            break;
                        case '4':
                            pomocy = 5;
                            break;
                        case '5':
                            pomocy = 4;
                            break;
                        case '6':
                            pomocy = 3;
                            break;
                        case '7':
                            pomocy = 2;
                            break;
                        case '8':
                            pomocy = 1;
                            break;
                    }
                }
                symbol = ust[pomocy - 1][pomocx - 1];
                if (symbol == 'K' || symbol == 'Q' || symbol == 'R' || symbol == 'B' || symbol == 'N' || symbol == 'P' || symbol == 'A') {
                    pomoci1 = 'W';
                } else {
                    pomoci1 = 'B';
                }
                if ((pomoci1 == 'W' && ruchB) || (pomoci1 == 'B' && !ruchB)) {
                    zmien = false;
                    nazwapola = BUTTON.getName();
                    pomoc5 = BUTTON.getIcon();
                    cursor = BUTTON.getIcon();
                    pomoc2 = pomocs.charAt(0);
                    start = pomocs;
                    BUTTON.setIcon(null);
                    pomoc3 = pomocs.charAt(1);
                    if (!odwrot) {
                        switch (pomoc2) {
                            case 'A':
                                pomocx = 1;
                                break;
                            case 'B':
                                pomocx = 2;
                                break;
                            case 'C':
                                pomocx = 3;
                                break;
                            case 'D':
                                pomocx = 4;
                                break;
                            case 'E':
                                pomocx = 5;
                                break;
                            case 'F':
                                pomocx = 6;
                                break;
                            case 'G':
                                pomocx = 7;
                                break;
                            case 'H':
                                pomocx = 8;
                                break;
                        }
                        switch (pomoc3) {
                            case '1':
                                pomocy = 1;
                                break;
                            case '2':
                                pomocy = 2;
                                break;
                            case '3':
                                pomocy = 3;
                                break;
                            case '4':
                                pomocy = 4;
                                break;
                            case '5':
                                pomocy = 5;
                                break;
                            case '6':
                                pomocy = 6;
                                break;
                            case '7':
                                pomocy = 7;
                                break;
                            case '8':
                                pomocy = 8;
                                break;
                        }
                    } else {
                        switch (pomoc2) {
                            case 'A':
                                pomocx = 8;
                                break;
                            case 'B':
                                pomocx = 7;
                                break;
                            case 'C':
                                pomocx = 6;
                                break;
                            case 'D':
                                pomocx = 5;
                                break;
                            case 'E':
                                pomocx = 4;
                                break;
                            case 'F':
                                pomocx = 3;
                                break;
                            case 'G':
                                pomocx = 2;
                                break;
                            case 'H':
                                pomocx = 1;
                                break;
                        }
                        switch (pomoc3) {
                            case '1':
                                pomocy = 8;
                                break;
                            case '2':
                                pomocy = 7;
                                break;
                            case '3':
                                pomocy = 6;
                                break;
                            case '4':
                                pomocy = 5;
                                break;
                            case '5':
                                pomocy = 4;
                                break;
                            case '6':
                                pomocy = 3;
                                break;
                            case '7':
                                pomocy = 2;
                                break;
                            case '8':
                                pomocy = 1;
                                break;
                        }
                    }
                    lokalS[0] = pomocx;
                    lokalS[1] = pomocy;
                    symbol = ust[pomocy - 1][pomocx - 1];
                    if ((symbol == 'P' && lokalS[1] == 7) || (symbol == 'p' && lokalS[1] == 2)) {
                        promo = ' ';
                    }
                    dobierz_kursor(symbol);
                    ust[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                    polestart = true;
                    koniecanimacji = false;
                    if (!wzor) {
                        animacja anim1 = new animacja(2, polestart, zmien, BUTTON, pomocs);
                    }
                    char[][] temp1 = new char[8][8];
                    for (int i = 0; i < 8; i++) {
                        for (int j = 0; j < 8; j++) {
                            temp1[i][j] = ust[i][j];

                        }
                    }
                    temp1[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                    int[] temp2 = new int[2];
                    temp2[0] = lokalS[1] - 1;
                    temp2[1] = lokalS[0] - 1;
                    char tempN = nakladki[temp2[1]][temp2[0]];
                    if (opcje_pomoc == 1 || opcje_pomoc == 2) {
                        if (tryb != 4) {
                            for (Ruch move : Generator.generuj_posuniecia((temp1), ruchB, przelotcan,
                                    bleft, bright, wleft, wright, kingrochB, kingrochC, kol, true, symbol, temp2, false, false)) {
                                if (!move.toString().startsWith("O-O")) {
                                    JButton cel = dobierzprzycisk(move.toString().substring(4, 6), odwrot);
                                    cel.setBorder(new LineBorder(pomoc_ruch, 4));
                                } else {
                                    if (ruchB) {
                                        if (move.toString().equals("O-O")) {
                                            dobierzprzycisk("G1", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                        } else {
                                            dobierzprzycisk("C1", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                        }
                                    } else {
                                        if (move.toString().equals("O-O")) {
                                            dobierzprzycisk("G8", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                        } else {
                                            dobierzprzycisk("C8", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                        }
                                    }
                                }
                            }
                            temp1[lokalS[1] - 1][lokalS[0] - 1] = tempN;
                            for (Ruch ruch : Generator.generuj_posuniecia((temp1), ruchB, przelotcan,
                                    bleft, bright, wleft, wright, kingrochB, kingrochC, kol, true, nakladki[temp2[1]][temp2[0]], temp2, false, false)) {

                                JButton cel = dobierzprzycisk(ruch.toString().substring(4, 6), odwrot);
                                cel.setBorder(new LineBorder(pomoc_ruch, 4));

                            }
                            temp1[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                        } else {
                            for (RuchA moveA : Generator.generuj_posunieciaA(konwertA(temp1), ruchB, przelotcan,
                                    bleft, bright, wleft, wright, kingrochB, kingrochC, kol, true, symbol, temp2, false)) {
                                if (!moveA.toString().startsWith("O-O")) {
                                    JButton cel = dobierzprzycisk(moveA.toString().substring(4, 6), odwrot);
                                    cel.setBorder(new LineBorder(pomoc_ruch, 4));
                                } else {
                                    if (ruchB) {
                                        if (moveA.toString().equals("O-O")) {
                                            dobierzprzycisk("G1", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                        } else {
                                            dobierzprzycisk("C1", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                        }
                                    } else {
                                        if (moveA.toString().equals("O-O")) {
                                            dobierzprzycisk("G8", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                        } else {
                                            dobierzprzycisk("C8", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (!siec && !symulacja) {
                        if (czasgry == -1 && !siec && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                            if (ruchB) {
                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! AKTUALNY RUCH MAJĄ BIAŁE", "bład koloru",
                                        JOptionPane.WARNING_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! AKTUALNY RUCH MAJĄ CZARNE", "błąd koloru",
                                        JOptionPane.WARNING_MESSAGE);
                            }
                        } else {
                            Toolkit.getDefaultToolkit().beep();
                        }
                        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);

                    }
                }
            } else {
                if (BUTTON.getIcon() == null) {
                    pomoce = BUTTON.getName();
                    stop = pomoce;
                    pomoc3 = pomoce.charAt(1);
                    pomoc2 = pomoce.charAt(0);
                    if (!odwrot) {
                        switch (pomoc2) {
                            case 'A':
                                pomocx = 1;
                                break;
                            case 'B':
                                pomocx = 2;
                                break;
                            case 'C':
                                pomocx = 3;
                                break;
                            case 'D':
                                pomocx = 4;
                                break;
                            case 'E':
                                pomocx = 5;
                                break;
                            case 'F':
                                pomocx = 6;
                                break;
                            case 'G':
                                pomocx = 7;
                                break;
                            case 'H':
                                pomocx = 8;
                                break;
                        }
                        switch (pomoc3) {
                            case '1':
                                pomocy = 1;
                                break;
                            case '2':
                                pomocy = 2;
                                break;
                            case '3':
                                pomocy = 3;
                                break;
                            case '4':
                                pomocy = 4;
                                break;
                            case '5':
                                pomocy = 5;
                                break;
                            case '6':
                                pomocy = 6;
                                break;
                            case '7':
                                pomocy = 7;
                                break;
                            case '8':
                                pomocy = 8;
                                break;
                        }
                    } else {
                        switch (pomoc2) {
                            case 'A':
                                pomocx = 8;
                                break;
                            case 'B':
                                pomocx = 7;
                                break;
                            case 'C':
                                pomocx = 6;
                                break;
                            case 'D':
                                pomocx = 5;
                                break;
                            case 'E':
                                pomocx = 4;
                                break;
                            case 'F':
                                pomocx = 3;
                                break;
                            case 'G':
                                pomocx = 2;
                                break;
                            case 'H':
                                pomocx = 1;
                                break;
                        }
                        switch (pomoc3) {
                            case '1':
                                pomocy = 8;
                                break;
                            case '2':
                                pomocy = 7;
                                break;
                            case '3':
                                pomocy = 6;
                                break;
                            case '4':
                                pomocy = 5;
                                break;
                            case '5':
                                pomocy = 4;
                                break;
                            case '6':
                                pomocy = 3;
                                break;
                            case '7':
                                pomocy = 2;
                                break;
                            case '8':
                                pomocy = 1;
                                break;
                        }
                    }
                    lokalK[0] = pomocx;
                    lokalK[1] = pomocy;
                    if ((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) {
                        atak = krolS;
                        if ((symbol == 'K' || symbol == 'k') && !atak
                                && ((ruchB && kingrochB && (((lokalS[0] - lokalK[0]) == -2 && ust[0][5] == ' ' && ust[0][6] == ' ' && wright) || (lokalS[0] - lokalK[0] == 2 && ust[0][3] == ' ' && ust[0][2] == ' ' && ust[0][1] == ' ' && wleft)))
                                || (!ruchB && kingrochC && (((lokalS[0] - lokalK[0]) == -2 && ust[7][5] == ' ' && ust[7][6] == ' ' && bright) || (lokalS[0] - lokalK[0] == 2 && ust[7][3] == ' ' && ust[7][2] == ' ' && ust[7][1] == ' ' && bleft))))) {
                            if (ruchB) {
                                symbol = 'K';
                                if ((lokalS[0] - lokalK[0]) == -2) {
                                    kontrolka[0][6] = 'K';
                                    kontrolka[0][4] = ' ';
                                    checka = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                            || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                    kontrolka[0][6] = ' ';
                                    kontrolka[0][5] = 'K';
                                    checkp = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                            || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                    kontrolka[0][5] = ' ';
                                    kontrolka[0][4] = 'K';
                                } else {
                                    if ((lokalS[0] - lokalK[0]) == 2) {
                                        kontrolka[0][2] = 'K';
                                        kontrolka[0][4] = ' ';
                                        checka = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                                || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                        kontrolka[0][2] = ' ';
                                        kontrolka[0][3] = 'K';
                                        checka = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                                || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                        kontrolka[0][3] = ' ';
                                        kontrolka[0][4] = 'K';
                                    }
                                }
                            } else {
                                symbol = 'k';
                                if ((lokalS[0] - lokalK[0]) == -2) {
                                    kontrolka[7][6] = 'k';
                                    kontrolka[7][4] = ' ';
                                    checka = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                            || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                    kontrolka[7][6] = ' ';
                                    kontrolka[7][5] = 'k';
                                    checka = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                            || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                    kontrolka[7][5] = ' ';
                                    kontrolka[7][4] = 'k';
                                } else {
                                    if ((lokalS[0] - lokalK[0]) == 2) {
                                        kontrolka[7][2] = 'k';
                                        kontrolka[7][4] = ' ';
                                        checka = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                                || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                        kontrolka[7][2] = ' ';
                                        kontrolka[7][3] = 'k';
                                        checka = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                                || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                        kontrolka[7][3] = ' ';
                                        kontrolka[7][4] = 'k';
                                    }
                                }
                            }
                            if (!checka && !checkp) {
                                ust[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                if (ruchB) {
                                    ust[lokalK[1] - 1][lokalK[0] - 1] = 'K';
                                } else {
                                    ust[lokalK[1] - 1][lokalK[0] - 1] = 'k';
                                }
                                roch = true;
                                if (ruchB) {
                                    kingrochB = false;
                                } else {
                                    kingrochC = false;
                                }
                                polestart = false;
                                wyk = false;
                                zmien = true;
                                BUTTON.setIcon(cursor);
                                if (ruchB) {
                                    kon = true;
                                    ust[0][4] = ' ';
                                    if (lokalS[0] - lokalK[0] == -2) {
                                        ust[0][5] = 'R';
                                        ust[0][7] = ' ';
                                        if (!odwrot) {
                                            cursor = H1.getIcon();
                                            H1.setIcon(null);
                                            F1.setIcon(cursor);
                                        } else {
                                            cursor = A8.getIcon();
                                            A8.setIcon(null);
                                            C8.setIcon(cursor);
                                        }
                                        ust[0][6] = 'K';
                                    } else {
                                        ust[0][3] = 'R';
                                        ust[0][0] = ' ';
                                        if (!odwrot) {
                                            cursor = A1.getIcon();
                                            A1.setIcon(null);
                                            D1.setIcon(cursor);
                                        } else {
                                            cursor = H8.getIcon();
                                            H8.setIcon(null);
                                            F8.setIcon(cursor);
                                        }
                                        ust[0][2] = 'K';
                                    }
                                    kingrochB = false;
                                    polestart = false;
                                    roch = true;
                                    dokonano_RB = true;
                                    ruchB = !ruchB;
                                    kontrolamat = ust;
                                    krolS = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                            || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                } else {
                                    kon = true;
                                    ust[7][4] = ' ';
                                    if (lokalS[0] - lokalK[0] == -2) {
                                        ust[7][5] = 'r';
                                        ust[7][7] = ' ';
                                        if (!odwrot) {
                                            cursor = H8.getIcon();
                                            H8.setIcon(null);
                                            F8.setIcon(cursor);
                                        } else {
                                            cursor = A1.getIcon();
                                            A1.setIcon(null);
                                            C1.setIcon(cursor);
                                        }
                                        ust[7][6] = 'k';
                                    } else {
                                        ust[7][3] = 'r';
                                        ust[7][0] = ' ';
                                        if (!odwrot) {
                                            cursor = A8.getIcon();
                                            A8.setIcon(null);
                                            C8.setIcon(cursor);
                                        } else {
                                            cursor = H1.getIcon();
                                            H1.setIcon(null);
                                            F1.setIcon(cursor);
                                        }
                                        ust[7][2] = 'k';
                                    }
                                    polestart = false;
                                    kingrochC = false;
                                    dokonano_RC = true;
                                    ruchB = !ruchB;
                                    krolS = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                            || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                    kontrolamat = ust;
                                }
                                char[][] USTAWIENIE1 = ust;
                                for (int i = 0; i < 8; i++) {
                                    System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                }
                                for (int i = 0; i < 8; i++) {
                                    for (int j = 0; j < 8; j++) {
                                        odwrotna[i][j] = ust[7 - i][7 - j];
                                    }
                                }
                                for (int i = 0; i < 8; i++) {
                                    for (int j = 0; j < 8; j++) {
                                        System.out.print("{" + ust[i][j] + "}");
                                    }
                                    System.out.println();
                                }
                                for (int i = 0; i < 8; i++) {
                                    System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                }
                                if (krolS) {
                                    if (!siec && !symulacja) {
                                        JOptionPane.showMessageDialog(rootPane, "SZACH! KROL JEST ATAKOWANY", "Ostrzeżenie",
                                                JOptionPane.WARNING_MESSAGE);
                                    }
                                    Toolkit.getDefaultToolkit().beep();
                                    kontrolamat = ust;
                                    for (int i = 0; i < 8; i++) {
                                        for (int j = 0; j < 8; j++) {
                                            if ((ruchB && kontrolamat[i][j] == 'K') || (!ruchB && kontrolamat[i][j] == 'k')) {
                                                poza_krolewska[0] = i;
                                                poza_krolewska[1] = j;
                                            }
                                        }
                                    }
                                    klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);
                                    if (klopoty[0] == -1) {
                                        klopoty = Wspomagacz.znajdzklopot(kontrolamat, nakladki, ruchB);
                                    }
                                    System.out.println("klopoty X:" + klopoty[0] + "Y:" + klopoty[1]);
                                    System.out.println(ust[klopoty[0]][klopoty[1]]);
                                    hodu = SzachMatPatKontrola.uciekaj(kontrolamat, ruchB, poza_krolewska)
                                            && SzachMatPatKontrola.uciekaj(kontrolamat, nakladki, ruchB, poza_krolewska);
                                    if (!hodu) {
                                        char[][] backupzapas = ust;
                                        hitme = (SzachMatPatKontrola.znajdzodsiecz(backupzapas.clone(), ruchB, klopoty, kol, przelotcan)
                                                || SzachMatPatKontrola.znajdzodsiecz(backupzapas.clone(), nakladki, ruchB, klopoty, kol, przelotcan));
                                        if (!hitme) {
                                            protectme = SzachMatPatKontrola.zastaw(backupzapas.clone(), ruchB, klopoty, poza_krolewska, przelotcan)
                                                    || SzachMatPatKontrola.zastaw(backupzapas.clone(), nakladki, ruchB, klopoty, poza_krolewska, przelotcan);
                                        }
                                    }
                                    System.out.println("ust");
                                    for (int i = 0; i < 8; i++) {
                                        System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8);
                                    }

                                } else {
                                    krolS = false;
                                    move = false;
                                    for (int i = 0; i < 8; i++) {
                                        for (int j = 0; j < 8; j++) {
                                            System.out.print("(" + ust[i][j] + ")");
                                        }
                                        System.out.println();
                                    }
                                    for (int i = 0; i < 8; i++) {
                                        for (int j = 0; j < 8; j++) {
                                            if (ust[i][j] != ' ') {
                                                pole_baza[0] = j;
                                                pole_baza[1] = i;
                                                if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                                    if ((ruchB && ust[i][j] == 'K') || (!ruchB && ust[i][j] == 'k')) {
                                                        pole_baza[0] = i;
                                                        pole_baza[1] = j;
                                                        hodu = SzachMatPatKontrola.uciekaj(ust, ruchB, pole_baza)
                                                                && SzachMatPatKontrola.uciekaj(kontrolamat, nakladki, ruchB, poza_krolewska);
                                                    }
                                                } else {
                                                    move = SzachMatPatKontrola.znajdz_ruch(ust, ruchB, ust[i][j], pole_baza, przelotcan);
                                                    move = SzachMatPatKontrola.znajdz_ruch(ust, nakladki, ruchB, nakladki[i][j], pole_baza, przelotcan);
                                                    if (move) {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (move) {
                                            break;
                                        }
                                    }

                                }
                                roch = true;
                            } else {
                                if (czasgry == -1 && !siec && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEDOZWOLONY.\n"
                                            + "KRÓL PRZESZEDŁBY PRZEZ POLE ZAGROŻONE, \n"
                                            + "LUB NA NIE BY WSZEDŁ", "Błąd roszady",
                                            JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    Toolkit.getDefaultToolkit().beep();
                                }
                            }
                        } else {
                            if (lokalK[0] == lokalS[0] && lokalS[1] == lokalK[1]) {
                                koniecanimacji = true;
                                BUTTON.setIcon(cursor);
                                zmien = false;
                                promo = ' ';
                                polestart = false;
                                wyk = false;
                                ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                czysc_rame();
                                ustawrame();
                            } else {
                                if (symbol == 'K' || symbol == 'k') {
                                    if ((nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'R' || nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'r'
                                            || nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'Q' || nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'q')
                                            || ((!kingrochB || (((lokalS[0] - lokalK[0]) != -2) && (lokalS[0] - lokalK[0] != 2)))
                                            || (!kingrochC || (((lokalS[0] - lokalK[0]) != -2) && (lokalS[0] - lokalK[0] != 2))))) {
                                        polestart = true;
                                        wyk = true;
                                        kontrolka = ust;
                                        kontrolka[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                        kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                        checka = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                                || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                        kontrolka[lokalK[1] - 1][lokalK[0] - 1] = ' ';
                                        kontrolka[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                                        kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, kontrolka, ruchB, przelotcan, kol, false)
                                                || RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, nakladki[lokalS[1] - 1][lokalS[0] - 1], kontrolka, ruchB, przelotcan, kol, nakladki);
                                        if (kon && !checka) {
                                            zmien = true;
                                            polestart = false;
                                            krolS = false;
                                            if (ruchB) {
                                                kingrochB = false;
                                            } else {
                                                kingrochC = false;
                                            }
                                            BUTTON.setIcon(cursor);
                                            if (!RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, nakladki[lokalS[1] - 1][lokalS[0] - 1], kontrolka, ruchB, przelotcan, kol, nakladki)) {
                                                nakladki[lokalK[1] - 1][lokalK[0] - 1] = nakladki[lokalS[1] - 1][lokalS[0] - 1];
                                            }
                                            nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                            wyk = true;
                                            pomoc5 = null;
                                        } else {
                                            wyk = false;
                                            polestart = true;
                                            if (czasgry == -1 && !siec) {
                                                if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                    if (!checka && !kon) {
                                                        JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                                JOptionPane.INFORMATION_MESSAGE);
                                                    } else {
                                                        JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                                JOptionPane.INFORMATION_MESSAGE);
                                                    }

                                                    switch (symbol) {
                                                        case 'K':
                                                        case 'k':
                                                            JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'Q':
                                                        case 'q':
                                                            JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'R':
                                                        case 'r':
                                                            JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'B':
                                                        case 'b':
                                                            JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'N':
                                                        case 'n':
                                                            JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                    + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'P':
                                                        case 'p':
                                                            JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                    + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                    + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                    + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                    }
                                                }
                                            } else {
                                                Toolkit.getDefaultToolkit().beep();
                                            }
                                            styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                        }
                                        if (wyk) {
                                            char[][] USTAWIENIE1 = new char[8][8];
                                            char[][] USTAWIENIE2 = new char[8][8];
                                            polestart = false;
                                            ruchB = !ruchB;
                                            for (int i = 0; i < 8; i++) {
                                                System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8);
                                                System.arraycopy(nakladki[i], 0, USTAWIENIE2[i], 0, 8);
                                            }
                                            for (int i = 0; i < 8; i++) {
                                                System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                            }
                                            for (int i = 0; i < 8; i++) {
                                                for (int j = 0; j < 8; j++) {
                                                    odwrotna[i][j] = ust[7 - i][7 - j];
                                                }
                                            }
                                            for (int i = 0; i < 8; i++) {
                                                for (int j = 0; j < 8; j++) {
                                                    System.out.print("{" + ust[i][j] + "}");
                                                }
                                                System.out.println();
                                            }
                                            for (int i = 0; i < 8; i++) {
                                                System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                            }
                                            if (RuchZagrozenie_kontrola.szach(ust, ruchB)
                                                    || RuchZagrozenie_kontrola.szach(ust, nakladki, ruchB)) {
                                                if (siec == false && symulacja == false) {
                                                    JOptionPane.showMessageDialog(rootPane, "SZACH! KROL JEST ATAKOWANY", "Ostrzeżenie",
                                                            JOptionPane.WARNING_MESSAGE);
                                                }
                                                Toolkit.getDefaultToolkit().beep();
                                                kontrolamat = ust;
                                                for (int i = 0; i < 8; i++) {
                                                    for (int j = 0; j < 8; j++) {
                                                        USTAWIENIE1[i][j] = ust[i][j];
                                                        if ((ruchB && kontrolamat[i][j] == 'K') || (ruchB == false && kontrolamat[i][j] == 'k')) {
                                                            poza_krolewska[0] = i;
                                                            poza_krolewska[1] = j;
                                                        }
                                                    }
                                                }
                                                klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);
                                                if (klopoty[0] == -1) {
                                                    klopoty = Wspomagacz.znajdzklopot(kontrolamat, nakladki, ruchB);
                                                }
                                                hodu = SzachMatPatKontrola.uciekaj(kontrolamat, ruchB, poza_krolewska)
                                                        && SzachMatPatKontrola.uciekaj(kontrolamat, nakladki, ruchB, poza_krolewska);
                                                if (hodu == false) {
                                                    char[][] backupzapas = ust;
                                                    hitme = (SzachMatPatKontrola.znajdzodsiecz(backupzapas.clone(), ruchB, klopoty, kol, przelotcan)
                                                            || SzachMatPatKontrola.znajdzodsiecz(backupzapas.clone(), nakladki, ruchB, klopoty, kol, przelotcan));
                                                    if (hitme == false) {
                                                        protectme = SzachMatPatKontrola.zastaw(backupzapas.clone(), ruchB, klopoty, poza_krolewska, przelotcan)
                                                                || SzachMatPatKontrola.zastaw(backupzapas.clone(), nakladki, ruchB, klopoty, poza_krolewska, przelotcan);
                                                    }
                                                }
                                                System.out.println("ust");
                                                for (int i = 0; i < 8; i++) {
                                                    System.arraycopy(USTAWIENIE1[i], 0, ust[i], 0, 8);
                                                    System.out.println();
                                                }
                                            } else {
                                                krolS = false;
                                                move = false;
                                                USTAWIENIE1 = ust;
                                                for (int i = 0; i < 8; i++) {
                                                    for (int j = 0; j < 8; j++) {
                                                        if (ust[i][j] != ' ') {
                                                            pole_baza[0] = j;
                                                            pole_baza[1] = i;
                                                            if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                                                if ((ruchB && ust[i][j] == 'K') || (ruchB == false && ust[i][j] == 'k')) {
                                                                    pole_baza[0] = i;
                                                                    pole_baza[1] = j;
                                                                    hodu = SzachMatPatKontrola.uciekaj(ust, ruchB, pole_baza)
                                                                            && SzachMatPatKontrola.uciekaj(kontrolamat, nakladki, ruchB, poza_krolewska);
                                                                }
                                                            } else {
                                                                move = SzachMatPatKontrola.znajdz_ruch(USTAWIENIE1, ruchB, ust[i][j], pole_baza, przelotcan);
                                                                move = SzachMatPatKontrola.znajdz_ruch(USTAWIENIE1, USTAWIENIE2, ruchB, nakladki[i][j], pole_baza, przelotcan);
                                                                if (move) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (move) {
                                                        break;
                                                    }
                                                }

                                            }
                                            for (int i = 0; i < 8; i++) {
                                                System.arraycopy(USTAWIENIE1[i], 0, ust[i], 0, 8);
                                            }
                                        }
                                    } else {
                                        if (czasgry == -1 && siec == false && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                                            JOptionPane.showMessageDialog(rootPane, "BŁĄD ROSZADY, LUB PRÓBA NIEDOZWOLONEGO RUCHU!", "Ostrzeżenie",
                                                    JOptionPane.WARNING_MESSAGE);
                                        } else {
                                            Toolkit.getDefaultToolkit().beep();
                                        }
                                    }
                                } else {
                                    if (RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust.clone(), ruchB, przelotcan, kol, false)
                                            || RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, nakladki[lokalS[1] - 1][lokalS[0] - 1], ust, bicie, przelotcan, kol, nakladki)) {
                                        kontrolka = ust.clone();
                                        kon = true;
                                        kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                        kontrolka[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                        pakc = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                                || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                        zmien = true;
                                    } else {
                                        pakc = true;
                                    }
                                    if (pakc == false && kon) {
                                        if (((symbol == 'P' || (nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'P' && (symbol == 'N' || symbol == 'B'))) && lokalS[0] == lokalK[0] && lokalS[1] - lokalK[1] == -2)
                                                || ((symbol == 'p' || (nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'p' && (symbol == 'n' || symbol == 'b'))) && lokalS[0] == lokalK[0] && lokalS[1] - lokalK[1] == 2)) {
                                            przelotcan = true;
                                            kol = lokalS[0];
                                        } else {
                                            if (przelotcan && ((symbol == 'p' || symbol == 'P')
                                                    || ((nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'p' && (symbol == 'n' || symbol == 'B'))
                                                    || (nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'P' && (symbol == 'N' || symbol == 'B'))))
                                                    && Math.abs(lokalS[1] - lokalK[1]) == 1
                                                    && ((ruchB && lokalS[1] == 5) || (ruchB == false && lokalS[1] == 4))) {
                                            } else {
                                                kol = 0;
                                            }
                                        }
                                        if ((symbol == 'P' || symbol == 'p') || (nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'P' || nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'p')) {
                                            if ((przelotcan && ((lokalK[0] == kol && (symbol == 'P' || nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'P') && lokalS[1] - lokalK[1] == -1 && lokalS[0] != lokalK[0] && (lokalS[1] == 5 || lokalS[1] == 6))
                                                    || (lokalK[0] == kol && (symbol == 'p' || nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'p') && lokalS[1] - lokalK[1] == 1 && lokalS[0] != lokalK[0] && (lokalS[1] == 4 || lokalS[1] == 3))))) {
                                                kontrolka = ust;
                                                char temp = kontrolka[lokalS[1] - 1][kol - 1];
                                                kontrolka[lokalS[1] - 1][kol - 1] = ' ';
                                                kontrolka[lokalK[1] - 1][kol - 1] = symbol;
                                                kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                pakc = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                                        || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                                kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, ruchB, przelotcan, kol, false)
                                                        || RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, nakladki[lokalS[1] - 1][lokalS[0] - 1], ust, ruchB, przelotcan, kol, nakladki);
                                                if (!pakc) {
                                                    kon = true;
                                                    przelot = false;
                                                    dokonanoEP = true;
                                                    BUTTON.setIcon(cursor);
                                                    ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                    if (nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'P' || nakladki[lokalS[1] - 1][lokalS[0] - 1] == 'p') {
                                                        nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                    }
                                                    switch (temp) {
                                                        case 'B':
                                                        case 'N':
                                                            lekkieB = (byte) (lekkieB - 1);
                                                            break;
                                                        case 'P':
                                                            pionB = (byte) (pionB - 1);
                                                            break;
                                                        case 'b':
                                                        case 'n':
                                                            lekkieC = (byte) (lekkieC - 1);
                                                            break;
                                                        case 'p':
                                                            pionC = (byte) (pionC - 1);
                                                            break;
                                                    }
                                                    switch (lokalK[0]) {
                                                        case 1:
                                                            if (ruchB) {
                                                                ust[4][0] = ' ';
                                                                A5.setIcon(null);
                                                            } else {
                                                                ust[3][0] = ' ';
                                                                A4.setIcon(null);
                                                            }
                                                            break;
                                                        case 2:
                                                            if (ruchB) {
                                                                ust[4][1] = ' ';
                                                                B5.setIcon(null);
                                                            } else {
                                                                ust[3][1] = ' ';
                                                                B4.setIcon(null);
                                                            }
                                                            break;
                                                        case 3:
                                                            if (ruchB) {
                                                                ust[4][2] = ' ';
                                                                C5.setIcon(null);
                                                            } else {
                                                                ust[3][2] = ' ';
                                                                C4.setIcon(null);
                                                            }
                                                            break;
                                                        case 4:
                                                            if (ruchB) {
                                                                ust[4][3] = ' ';
                                                                D5.setIcon(null);
                                                            } else {
                                                                ust[3][3] = ' ';
                                                                D4.setIcon(null);
                                                            }
                                                            break;
                                                        case 5:
                                                            if (ruchB) {
                                                                ust[4][4] = ' ';
                                                                E5.setIcon(null);
                                                            } else {
                                                                ust[3][4] = ' ';
                                                                E4.setIcon(null);
                                                            }
                                                            break;
                                                        case 6:
                                                            if (ruchB) {
                                                                ust[4][5] = ' ';
                                                                F5.setIcon(null);
                                                            } else {
                                                                ust[3][5] = ' ';
                                                                F4.setIcon(null);
                                                            }
                                                            break;
                                                        case 7:
                                                            if (ruchB) {
                                                                ust[4][6] = ' ';
                                                                G5.setIcon(null);
                                                            } else {
                                                                ust[3][6] = ' ';
                                                                G4.setIcon(null);
                                                            }
                                                            break;
                                                        case 8:
                                                            if (ruchB) {
                                                                ust[4][7] = ' ';
                                                                H5.setIcon(null);
                                                            } else {
                                                                ust[3][7] = ' ';
                                                                H4.setIcon(null);
                                                            }
                                                            break;
                                                    }
                                                    wyk = true;
                                                    prze = true;
                                                    bicie = true;
                                                } else {
                                                    kontrolka[lokalS[1] - 1][kol - 1] = temp;
                                                    kontrolka[lokalK[1] - 1][kol - 1] = ' ';
                                                    kontrolka[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                                                    polestart = true;
                                                    wyk = false;
                                                    przelot = false;
                                                    if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                        if (pakc == false && kon == false) {
                                                            JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                                    JOptionPane.INFORMATION_MESSAGE);
                                                        } else {
                                                            JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                                    JOptionPane.INFORMATION_MESSAGE);
                                                        }
                                                        switch (symbol) {
                                                            case 'K':
                                                            case 'k':
                                                                JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'Q':
                                                            case 'q':
                                                                JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'R':
                                                            case 'r':
                                                                JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'B':
                                                            case 'b':
                                                                JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'N':
                                                            case 'n':
                                                                JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                        + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'P':
                                                            case 'p':
                                                                JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                        + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                        + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                        + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            przelotcan = false;
                                        }
                                        ust = kontrolka;
                                        pakc = RuchZagrozenie_kontrola.szach(ust, ruchB)
                                                || RuchZagrozenie_kontrola.szach(ust, nakladki, ruchB);
                                        if (pakc != true) {
                                            polestart = false;
                                            wyk = true;
                                        } else {
                                            polestart = true;
                                            wyk = false;
                                            if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                if (pakc == false) {
                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                            JOptionPane.INFORMATION_MESSAGE);
                                                } else {
                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                            JOptionPane.INFORMATION_MESSAGE);
                                                }

                                                switch (symbol) {
                                                    case 'K':
                                                    case 'k':
                                                        JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'Q':
                                                    case 'q':
                                                        JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'R':
                                                    case 'r':
                                                        JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'B':
                                                    case 'b':
                                                        JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'N':
                                                    case 'n':
                                                        JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'P':
                                                    case 'p':
                                                        JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                }
                                            }
                                        }
                                    } else {
                                        if (czasgry == -1 && siec == false) {
                                            kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust.clone(), ruchB, przelotcan, kol, false)
                                                    || RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, nakladki[lokalS[1] - 1][lokalS[0] - 1], ust, bicie, przelotcan, kol, nakladki);

                                            if (kon) {
                                                kontrolka = ust.clone();
                                                kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                kontrolka[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                pakc = RuchZagrozenie_kontrola.szach(kontrolka, ruchB)
                                                        || RuchZagrozenie_kontrola.szach(kontrolka, nakladki, ruchB);
                                                zmien = true;
                                            } else {
                                                pakc = true;
                                            }
                                            if ((!(pakc && kon == false)) && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                        JOptionPane.INFORMATION_MESSAGE);
                                            } else {
                                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                        JOptionPane.INFORMATION_MESSAGE);
                                            }
                                            if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                switch (symbol) {
                                                    case 'K':
                                                    case 'k':
                                                        JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'Q':
                                                    case 'q':
                                                        JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'R':
                                                    case 'r':
                                                        JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'B':
                                                    case 'b':
                                                        JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'N':
                                                    case 'n':
                                                        JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'P':
                                                    case 'p':
                                                        JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                }
                                            }
                                        } else {
                                            Toolkit.getDefaultToolkit().beep();
                                        }
                                        kontrolka[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                                        kontrolka[lokalK[1] - 1][lokalK[0] - 1] = ' ';
                                        polestart = true;
                                        wyk = false;
                                        przelot = false;
                                    }
                                    if (wyk) {
                                        if (RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, nakladki[lokalS[1] - 1][lokalS[0] - 1], ust, bicie, przelotcan, kol, nakladki)) {
                                            nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                        }
                                        if ((symbol == 'P' && lokalK[1] == 8) || (symbol == 'p' && lokalK[1] == 1)) {
                                            promocja = true;
                                            Object[] opcjeB = {b1, b2, b3, b4};
                                            Object[] opcjeC = {c1, c2, c3, c4};
                                            if (ruchB) {
                                                pionB = (byte) (pionB - 1);
                                                if (znak_promocji == ' ') {
                                                    wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeB, null);
                                                    switch (wybor) {
                                                        case 1:
                                                            symbol = 'R';
                                                            ciezkieB = (byte) (ciezkieB + 1);
                                                            cursor = b2;
                                                            break;
                                                        case 2:
                                                            symbol = 'B';
                                                            lekkieB = (byte) (lekkieB + 1);
                                                            cursor = b3;
                                                            break;
                                                        case 3:
                                                            symbol = 'N';
                                                            lekkieB = (byte) (lekkieB + 1);
                                                            cursor = b4;
                                                            break;
                                                        default:
                                                            symbol = 'Q';
                                                            ciezkieB = (byte) (ciezkieB + 1);
                                                            cursor = b1;
                                                            break;
                                                    }
                                                } else {
                                                    symbol = znak_promocji;
                                                    switch (symbol) {
                                                        case 'Q':
                                                        case 'R':
                                                            ciezkieB = (byte) (ciezkieB + 1);
                                                            break;
                                                        case 'B':
                                                        case 'N':
                                                            lekkieB = (byte) (lekkieB + 1);
                                                            break;
                                                    }
                                                }
                                            } else {
                                                pionC = (byte) (pionC - 1);
                                                if (znak_promocji == ' ') {
                                                    wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeC, null);
                                                    switch (wybor) {
                                                        case 1:
                                                            symbol = 'r';
                                                            ciezkieC = (byte) (ciezkieC + 1);
                                                            cursor = c2;
                                                            break;
                                                        case 2:
                                                            symbol = 'b';
                                                            lekkieC = (byte) (lekkieC + 1);
                                                            cursor = c3;
                                                            break;
                                                        case 3:
                                                            symbol = 'n';
                                                            lekkieC = (byte) (lekkieC + 1);
                                                            cursor = c4;
                                                            break;
                                                        default:
                                                            symbol = 'q';
                                                            ciezkieC = (byte) (ciezkieC + 1);
                                                            cursor = c1;
                                                            break;
                                                    }
                                                } else {
                                                    symbol = znak_promocji;
                                                    switch (symbol) {
                                                        case 'q':
                                                        case 'r':
                                                            ciezkieC = (byte) (ciezkieC + 1);
                                                            break;
                                                        case 'b':
                                                        case 'n':
                                                            lekkieC = (byte) (lekkieC + 1);
                                                            break;
                                                    }
                                                }
                                            }
                                            promo = symbol;
                                        }
                                        if (znak_promocji == ' ') {
                                            BUTTON.setIcon(cursor);
                                        } else {
                                            switch (znak_promocji) {
                                                case 'Q':
                                                    BUTTON.setIcon(b1);
                                                    break;
                                                case 'R':
                                                    BUTTON.setIcon(b2);
                                                    break;
                                                case 'B':
                                                    BUTTON.setIcon(b3);
                                                    break;
                                                case 'N':
                                                    BUTTON.setIcon(b4);
                                                    break;
                                                case 'q':
                                                    BUTTON.setIcon(c1);
                                                    break;
                                                case 'r':
                                                    BUTTON.setIcon(c2);
                                                    break;
                                                case 'b':
                                                    BUTTON.setIcon(c3);
                                                    break;
                                                case 'n':
                                                    BUTTON.setIcon(c4);
                                                    break;
                                            }
                                        }
                                        ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                        if (RuchZagrozenie_kontrola.rozszerzenie(symbol, nakladki[lokalS[1] - 1][lokalS[0] - 1])) {
                                            nakladki[lokalK[1] - 1][lokalK[0] - 1] = nakladki[lokalS[1] - 1][lokalS[0] - 1];
                                        } else {
                                            nakladki[lokalK[1] - 1][lokalK[0] - 1] = ' ';
                                        }
                                        nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                        pomoc5 = null;
                                        char[][] USTAWIENIE1 = new char[8][8];
                                        char[][] USTAWIENIE2 = new char[8][8];
                                        polestart = false;
                                        ruchB = ruchB != true;
                                        for (int i = 0; i < 8; i++) {
                                            System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8);
                                            System.arraycopy(nakladki[i], 0, USTAWIENIE2[i], 0, 8);
                                        }
                                        krolS = RuchZagrozenie_kontrola.szach(ust, ruchB)
                                                || RuchZagrozenie_kontrola.szach(ust, nakladki, ruchB);
                                        for (int i = 0; i < 8; i++) {
                                            System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                        }
                                        for (int i = 0; i < 8; i++) {
                                            for (int j = 0; j < 8; j++) {
                                                odwrotna[i][j] = ust[7 - i][7 - j];
                                            }
                                        }

                                        for (int i = 0; i < 8; i++) {
                                            System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                        }

                                        if (krolS) {
                                            if (siec == false && symulacja == false) {
                                                JOptionPane.showMessageDialog(rootPane, "SZACH! KROL JEST ATAKOWANY", "Ostrzeżenie",
                                                        JOptionPane.WARNING_MESSAGE);
                                            }
                                            Toolkit.getDefaultToolkit().beep();
                                            kontrolamat = ust;
                                            for (int i = 0; i < 8; i++) {
                                                for (int j = 0; j < 8; j++) {
                                                    USTAWIENIE1[i][j] = ust[i][j];
                                                    if ((ruchB && kontrolamat[i][j] == 'K') || (ruchB == false && kontrolamat[i][j] == 'k')) {
                                                        poza_krolewska[0] = i;
                                                        poza_krolewska[1] = j;
                                                    }
                                                }
                                            }
                                            klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);
                                            if (klopoty[0] == -1) {
                                                klopoty = Wspomagacz.znajdzklopot(kontrolamat, nakladki, ruchB);
                                            }
                                            hodu = SzachMatPatKontrola.uciekaj(kontrolamat, ruchB, poza_krolewska)
                                                    && SzachMatPatKontrola.uciekaj(kontrolamat, nakladki, ruchB, poza_krolewska);
                                            if (hodu == false) {
                                                char[][] backupzapas = ust;
                                                hitme = (SzachMatPatKontrola.znajdzodsiecz(backupzapas.clone(), ruchB, klopoty, kol, przelotcan)
                                                        || SzachMatPatKontrola.znajdzodsiecz(backupzapas.clone(), nakladki, ruchB, klopoty, kol, przelotcan));
                                                if (hitme == false) {
                                                    protectme = SzachMatPatKontrola.zastaw(backupzapas.clone(), ruchB, klopoty, poza_krolewska, przelotcan)
                                                            || SzachMatPatKontrola.zastaw(backupzapas.clone(), nakladki, ruchB, klopoty, poza_krolewska, przelotcan);
                                                }
                                            }
                                            System.out.println("ust2");
                                            for (int i = 0; i < 8; i++) {
                                                System.arraycopy(USTAWIENIE1[i], 0, ust[i], 0, 8);
                                                System.out.println();
                                            }
                                        } else {
                                            krolS = false;
                                            move = false;
                                            for (int i = 0; i < 8; i++) {
                                                for (int j = 0; j < 8; j++) {
                                                    if (ust[i][j] != ' ') {
                                                        pole_baza[0] = j;
                                                        pole_baza[1] = i;
                                                        if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                                            if ((ruchB && ust[i][j] == 'K') || (ruchB == false && ust[i][j] == 'k')) {
                                                                pole_baza[0] = i;
                                                                pole_baza[1] = j;
                                                                hodu = SzachMatPatKontrola.uciekaj(ust, ruchB, pole_baza) || SzachMatPatKontrola.uciekaj(kontrolamat, nakladki, ruchB, poza_krolewska)
                                                                        && SzachMatPatKontrola.uciekaj(kontrolamat, nakladki, ruchB, poza_krolewska);
                                                            }
                                                        } else {
                                                            move = SzachMatPatKontrola.znajdz_ruch(USTAWIENIE1, ruchB, ust[i][j], pole_baza, przelotcan);
                                                            move = SzachMatPatKontrola.znajdz_ruch(USTAWIENIE1, USTAWIENIE2, ruchB, USTAWIENIE2[i][j], pole_baza, przelotcan);
                                                            if (move) {
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (move) {
                                                    break;
                                                }
                                            }

                                        }
                                        bicie = prze;
                                        prze = false;
                                    }
                                }
                            }
                        }
                    } else {
                        czysc_rame();
                        ustawrame();
                        zmien = false;
                        promo = ' ';
                        koniecanimacji = true;
                        BUTTON.setIcon(cursor);
                        polestart = false;
                        wyk = false;
                        ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                    }
                } else {
                    Icon ikona = BUTTON.getIcon();
                    char eliminowany, schodzi2 = ' ';
                    pomoce = BUTTON.getName();
                    pomoc2 = pomoce.charAt(0);
                    pomoc3 = pomoce.charAt(1);
                    stop = pomoce;
                    if (odwrot == false) {
                        switch (pomoc2) {
                            case 'A':
                                pomocx = 1;
                                break;
                            case 'B':
                                pomocx = 2;
                                break;
                            case 'C':
                                pomocx = 3;
                                break;
                            case 'D':
                                pomocx = 4;
                                break;
                            case 'E':
                                pomocx = 5;
                                break;
                            case 'F':
                                pomocx = 6;
                                break;
                            case 'G':
                                pomocx = 7;
                                break;
                            case 'H':
                                pomocx = 8;
                                break;
                        }
                        switch (pomoc3) {
                            case '1':
                                pomocy = 1;
                                break;
                            case '2':
                                pomocy = 2;
                                break;
                            case '3':
                                pomocy = 3;
                                break;
                            case '4':
                                pomocy = 4;
                                break;
                            case '5':
                                pomocy = 5;
                                break;
                            case '6':
                                pomocy = 6;
                                break;
                            case '7':
                                pomocy = 7;
                                break;
                            case '8':
                                pomocy = 8;
                                break;
                        }
                    } else {
                        switch (pomoc2) {
                            case 'A':
                                pomocx = 8;
                                break;
                            case 'B':
                                pomocx = 7;
                                break;
                            case 'C':
                                pomocx = 6;
                                break;
                            case 'D':
                                pomocx = 5;
                                break;
                            case 'E':
                                pomocx = 4;
                                break;
                            case 'F':
                                pomocx = 3;
                                break;
                            case 'G':
                                pomocx = 2;
                                break;
                            case 'H':
                                pomocx = 1;
                                break;
                        }
                        switch (pomoc3) {
                            case '1':
                                pomocy = 8;
                                break;
                            case '2':
                                pomocy = 7;
                                break;
                            case '3':
                                pomocy = 6;
                                break;
                            case '4':
                                pomocy = 5;
                                break;
                            case '5':
                                pomocy = 4;
                                break;
                            case '6':
                                pomocy = 3;
                                break;
                            case '7':
                                pomocy = 2;
                                break;
                            case '8':
                                pomocy = 1;
                                break;
                        }
                    }
                    lokalK[0] = pomocx;
                    lokalK[1] = pomocy;
                    eliminowany = ust[lokalK[1] - 1][lokalK[0] - 1];
                    schodzi2 = nakladki[lokalK[1] - 1][lokalK[0] - 1];
                    if (eliminowany == 'K' || eliminowany == 'Q' || eliminowany == 'R' || eliminowany == 'B' || eliminowany == 'N' || eliminowany == 'P') {
                        pomoci2 = 'W';
                    } else {
                        pomoci2 = 'B';
                    }
                    if (pomoci1 != pomoci2) {
                        if (lokalK[0] == lokalS[0] && lokalS[1] == lokalK[1]) {
                            koniecanimacji = true;
                            zmien = false;
                            promo = ' ';
                            BUTTON.setIcon(cursor);
                            polestart = false;
                            wyk = false;
                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                            czysc_rame();
                            ustawrame();
                        } else {
                            kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, ruchB, przelotcan, kol, false)
                                    || RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, nakladki[lokalS[1] - 1][lokalS[0] - 1], ust, bicie, przelotcan, kol, nakladki);
                            char[][] tymczas = new char[8][8];
                            char[][] tymczas2 = new char[8][8];
                            for (int i = 0; i < 8; i++) {
                                for (int j = 0; j < 8; j++) {
                                    tymczas[i][j] = ust[i][j];
                                    tymczas2[i][j] = nakladki[i][j];
                                }
                            }
                            tymczas[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                            tymczas2[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                            tymczas[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                            tymczas2[lokalK[1] - 1][lokalK[0] - 1] = ' ';
                            pakc = RuchZagrozenie_kontrola.szach(tymczas, ruchB)
                                    || RuchZagrozenie_kontrola.szach(tymczas, tymczas2, ruchB);
                            if (kon && pakc == false) {
                                krolS = false;
                                bicie = true;
                                switch (eliminowany) {
                                    case 'P':
                                        pionB = (byte) (pionB - 1);
                                        break;
                                    case 'p':
                                        pionC = (byte) (pionC - 1);
                                        break;
                                    case 'N':
                                    case 'B':
                                        lekkieB = (byte) (lekkieB - 1);
                                        break;
                                    case 'n':
                                    case 'b':
                                        lekkieC = (byte) (lekkieC - 1);
                                        break;
                                    case 'R':
                                    case 'Q':
                                        ciezkieB = (byte) (ciezkieB - 1);
                                        break;
                                    case 'r':
                                    case 'q':
                                        ciezkieC = (byte) (ciezkieC - 1);
                                        break;
                                }

                                zmien = true;

                                if ((symbol == 'P' && lokalK[1] == 8) || (symbol == 'p' && lokalK[1] == 1)) {
                                    promocja = true;
                                    Object[] opcjeB = {b1, b2, b3, b4};
                                    Object[] opcjeC = {c1, c2, c3, c4};
                                    if (ruchB) {
                                        pionB = (byte) (pionB - 1);
                                        if (znak_promocji == ' ') {
                                            wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeB, null);
                                            switch (wybor) {
                                                case 1:
                                                    symbol = 'R';
                                                    ciezkieB = (byte) (ciezkieB + 1);
                                                    cursor = b2;
                                                    break;
                                                case 2:
                                                    symbol = 'B';
                                                    lekkieB = (byte) (lekkieB + 1);
                                                    cursor = b3;
                                                    break;
                                                case 3:
                                                    symbol = 'N';
                                                    lekkieB = (byte) (lekkieB + 1);
                                                    cursor = b4;
                                                    break;
                                                default:
                                                    symbol = 'Q';
                                                    ciezkieB = (byte) (ciezkieB + 1);
                                                    cursor = b1;
                                                    break;
                                            }
                                        } else {
                                            symbol = znak_promocji;
                                            switch (symbol) {
                                                case 'Q':
                                                case 'R':
                                                    ciezkieB = (byte) (ciezkieB + 1);
                                                    break;
                                                case 'B':
                                                case 'N':
                                                    lekkieB = (byte) (lekkieB + 1);
                                                    break;
                                            }
                                        }
                                    } else {
                                        pionC = (byte) (pionC - 1);
                                        if (znak_promocji == ' ') {
                                            wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeC, null);
                                            switch (wybor) {
                                                case 1:
                                                    symbol = 'r';
                                                    ciezkieC = (byte) (ciezkieC + 1);
                                                    cursor = c2;
                                                    break;
                                                case 2:
                                                    symbol = 'b';
                                                    lekkieC = (byte) (lekkieC + 1);
                                                    cursor = c3;
                                                    break;
                                                case 3:
                                                    symbol = 'n';
                                                    lekkieC = (byte) (lekkieC + 1);
                                                    cursor = c4;
                                                    break;
                                                default:
                                                    symbol = 'q';
                                                    ciezkieC = (byte) (ciezkieC + 1);
                                                    cursor = c1;
                                                    break;
                                            }
                                        } else {
                                            symbol = znak_promocji;
                                            switch (symbol) {
                                                case 'q':
                                                case 'r':
                                                    ciezkieC = (byte) (ciezkieC + 1);
                                                    break;
                                                case 'b':
                                                case 'n':
                                                    lekkieC = (byte) (lekkieC + 1);
                                                    break;
                                            }
                                        }
                                    }
                                    promo = symbol;
                                }
                                if (znak_promocji == ' ') {
                                    BUTTON.setIcon(cursor);
                                } else {
                                    switch (znak_promocji) {
                                        case 'Q':
                                            BUTTON.setIcon(b1);
                                            break;
                                        case 'R':
                                            BUTTON.setIcon(b2);
                                            break;
                                        case 'B':
                                            BUTTON.setIcon(b3);
                                            break;
                                        case 'N':
                                            BUTTON.setIcon(b4);
                                            break;
                                        case 'q':
                                            BUTTON.setIcon(c1);
                                            break;
                                        case 'r':
                                            BUTTON.setIcon(c2);
                                            break;
                                        case 'b':
                                            BUTTON.setIcon(c3);
                                            break;
                                        case 'n':
                                            BUTTON.setIcon(c4);
                                            break;
                                    }
                                }
                                ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;

                                pomoc5 = null;
                                polestart = false;
                                wyk = true;
                            } else {
                                for (int i = 0; i < 8; i++) {
                                    for (int j = 0; j < 8; j++) {
                                        ust[i][j] = odwrotna[7 - i][7 - j];
                                    }
                                }
                                wyk = false;
                                polestart = true;
                                if (czasgry == -1 && siec == false) {
                                    if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                        if (pakc) {
                                            JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                    JOptionPane.INFORMATION_MESSAGE);
                                        } else {
                                            JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                    JOptionPane.INFORMATION_MESSAGE);
                                        }

                                        switch (symbol) {
                                            case 'K':
                                            case 'k':
                                                JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                break;
                                            case 'Q':
                                            case 'q':
                                                JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                break;
                                            case 'R':
                                            case 'r':
                                                JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                break;
                                            case 'B':
                                            case 'b':
                                                JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                break;
                                            case 'N':
                                            case 'n':
                                                JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                        + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                break;
                                            case 'P':
                                            case 'p':
                                                JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                        + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                        + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                        + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                break;
                                        }
                                    }
                                } else {
                                    Toolkit.getDefaultToolkit().beep();
                                }
                                //styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                            }
                            if (wyk) {

                                wyk = false;
                                if (RuchZagrozenie_kontrola.rozszerzenie(symbol, eliminowany)
                                        || RuchZagrozenie_kontrola.rozszerzenie(symbol, schodzi2)) {
                                    String[] ofiaraK = {"Zagrab bierkę", "Zagrab jej nakladke", "Nie dokonuj grabieży"};
                                    String[] ofiaraZ = {"Zagrab bierkę", "Nie dokonuj grabieży"};
                                    String[] ofiaraN = {"Zagrab jej nakladke", "Nie dokonuj grabieży"};
                                    int wybor_grabiezy = 0;
                                    boolean opcje3 = false, w1 = false, w2 = false;
                                    if (RuchZagrozenie_kontrola.rozszerzenie(symbol, eliminowany) && RuchZagrozenie_kontrola.rozszerzenie(symbol, nakladki[lokalK[1] - 1][lokalK[0] - 1])) {
                                        wybor_grabiezy = JOptionPane.showOptionDialog(this, "Czy chcesz dokonać grabieży?\n"
                                                + "Jeśli posiadasz nakładkę, utraisz swoją obecną nakładkę", "Grabież",
                                                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, ikona, ofiaraK, null);
                                        opcje3 = true;
                                    } else if (RuchZagrozenie_kontrola.rozszerzenie(symbol, eliminowany) && !RuchZagrozenie_kontrola.rozszerzenie(symbol, nakladki[lokalK[1] - 1][lokalK[0] - 1])) {
                                        wybor_grabiezy = JOptionPane.showOptionDialog(this, "Czy chcesz dokonać grabieży?\n"
                                                + "Jeśli posiadasz nakładkę, utraisz swoją obecną nakładkę", "Grabież",
                                                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, ikona, ofiaraZ, null);
                                        w1 = true;
                                    } else if (!RuchZagrozenie_kontrola.rozszerzenie(symbol, eliminowany) && RuchZagrozenie_kontrola.rozszerzenie(symbol, nakladki[lokalK[1] - 1][lokalK[0] - 1])) {
                                        wybor_grabiezy = JOptionPane.showOptionDialog(this, "Czy chcesz dokonać grabieży?\n"
                                                + "Jeśli posiadasz nakładkę, utraisz swoją obecną nakładkę", "Grabież",
                                                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, ikona, ofiaraN, null);
                                        w2 = true;
                                    }
                                    char znak1 = String.valueOf(eliminowany).toUpperCase().charAt(0);
                                    char znak2 = String.valueOf(eliminowany).toLowerCase().charAt(0);
                                    System.out.println(opcje3 + "|" + w1 + "|" + w2);
                                    if (opcje3) {
                                        switch (wybor_grabiezy) {
                                            case 0:
                                                nakladki[lokalK[1] - 1][lokalK[0] - 1]
                                                        = (ruchB) ? znak1
                                                                : znak2;
                                                nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                break;
                                            case 1:
                                                nakladki[lokalK[1] - 1][lokalK[0] - 1]
                                                        = (ruchB) ? String.valueOf(nakladki[lokalK[1] - 1][lokalK[0] - 1]).toUpperCase().charAt(0)
                                                                : String.valueOf(nakladki[lokalK[1] - 1][lokalK[0] - 1]).toLowerCase().charAt(0);
                                                nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                break;
                                            case 2:
                                                nakladki[lokalK[1] - 1][lokalK[0] - 1] = nakladki[lokalS[1] - 1][lokalS[0] - 1];
                                                nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                break;
                                        }
                                    } else {
                                        if (w1) {
                                            if (wybor_grabiezy == 0) {
                                                nakladki[lokalK[1] - 1][lokalK[0] - 1]
                                                        = (ruchB) ? znak1
                                                                : znak2;
                                            } else {
                                                nakladki[lokalK[1] - 1][lokalK[0] - 1] = nakladki[lokalS[1] - 1][lokalS[0] - 1];
                                                nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                            }
                                            nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                        } else if (w2) {
                                            if (wybor_grabiezy == 0) {
                                                nakladki[lokalK[1] - 1][lokalK[0] - 1]
                                                        = (ruchB) ? String.valueOf(nakladki[lokalK[1] - 1][lokalK[0] - 1]).toUpperCase().charAt(0)
                                                                : String.valueOf(nakladki[lokalK[1] - 1][lokalK[0] - 1]).toLowerCase().charAt(0);
                                            } else {
                                                nakladki[lokalK[1] - 1][lokalK[0] - 1] = nakladki[lokalS[1] - 1][lokalS[0] - 1];
                                                nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                            }
                                        } else {
                                            nakladki[lokalS[1] - 1][lokalS[0] - 1] = nakladki[lokalK[1] - 1][lokalK[0] - 1];
                                            nakladki[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                        }
                                    }
                                }
                                char[][] USTAWIENIE1 = new char[8][8];
                                char[][] USTAWIENIE2 = new char[8][8];
                                ruchB = ruchB != true;
                                if ((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) {
                                    krolS = RuchZagrozenie_kontrola.szach(ust, ruchB)
                                            || RuchZagrozenie_kontrola.szach(ust, nakladki, ruchB);
                                    for (int i = 0; i < 8; i++) {
                                        System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8);
                                        System.arraycopy(nakladki[i], 0, USTAWIENIE2[i], 0, 8);
                                    }
                                    for (int i = 0; i < 8; i++) {
                                        for (int j = 0; j < 8; j++) {
                                            odwrotna[i][j] = ust[7 - i][7 - j];
                                        }
                                    }

                                    for (int i = 0; i < 8; i++) {
                                        for (int j = 0; j < 8; j++) {
                                            System.out.print("{" + ust[i][j] + "/" + nakladki[i][j] + "}");
                                        }
                                        System.out.println();
                                    }
                                    for (int i = 0; i < 8; i++) {
                                        System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                    }
                                    styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                    if (krolS) {
                                        if (siec == false && symulacja == false) {
                                            JOptionPane.showMessageDialog(rootPane, "SZACH! KROL JEST ATAKOWANY", "Ostrzeżenie",
                                                    JOptionPane.WARNING_MESSAGE);
                                        }
                                        Toolkit.getDefaultToolkit().beep();
                                        kontrolamat = ust;
                                        for (int i = 0; i < 8; i++) {
                                            for (int j = 0; j < 8; j++) {
                                                USTAWIENIE1[i][j] = ust[i][j];
                                                if ((ruchB && kontrolamat[i][j] == 'K') || (ruchB == false && kontrolamat[i][j] == 'k')) {
                                                    poza_krolewska[0] = i;
                                                    poza_krolewska[1] = j;
                                                }
                                            }
                                        }
                                        klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);
                                        if (klopoty[0] == -1) {
                                            klopoty = Wspomagacz.znajdzklopot(kontrolamat.clone(), nakladki, ruchB);
                                        }
                                        System.out.println(ust[klopoty[0]][klopoty[1]]);
                                        System.out.println(nakladki[klopoty[0]][klopoty[1]]);
                                        System.out.println(SzachMatPatKontrola.uciekaj(kontrolamat, ruchB, poza_krolewska));
                                        System.out.println(SzachMatPatKontrola.uciekaj(kontrolamat, nakladki, ruchB, poza_krolewska));
                                        hodu = SzachMatPatKontrola.uciekaj(kontrolamat, ruchB, poza_krolewska)
                                                && SzachMatPatKontrola.uciekaj(kontrolamat, nakladki, ruchB, poza_krolewska);
                                        if (hodu == false) {

                                            klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);
                                            if (klopoty[0] == -1) {
                                                klopoty = Wspomagacz.znajdzklopot(kontrolamat.clone(), nakladki, ruchB);
                                            }
                                            hitme = ((SzachMatPatKontrola.znajdzodsiecz(kontrolamat.clone(), ruchB, klopoty, kol, przelotcan)
                                                    || SzachMatPatKontrola.znajdzodsiecz(kontrolamat.clone(), nakladki, ruchB, klopoty, kol, przelotcan)));
                                            if (hitme == false) {
                                                klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);

                                                if (klopoty[0] == -1) {
                                                    klopoty = Wspomagacz.znajdzklopot(kontrolamat.clone(), nakladki, ruchB);
                                                }
                                                protectme = SzachMatPatKontrola.zastaw(kontrolamat.clone(), ruchB, klopoty, poza_krolewska, przelotcan)
                                                        || SzachMatPatKontrola.zastaw(kontrolamat.clone(), nakladki, ruchB, klopoty, poza_krolewska, przelotcan);
                                            }
                                        }
                                        System.out.println("ust3");
                                        System.out.println("U" + hodu + " Z" + protectme + " B" + hitme);

                                    } else {
                                        krolS = false;
                                        move = false;
                                        char[][] temp = new char[8][8];
                                        // System.out.println("wy");
                                        for (int i = 0; i < 8; i++) {
                                            //System.out.print("[" + ust[i][j] + "]");
                                            if (8 >= 0) {
                                                System.arraycopy(ust[i], 0, temp[i], 0, 8);
                                            }
                                            // System.out.println();
                                        }
                                        for (int i = 0; i < 8; i++) {
                                            for (int j = 0; j < 8; j++) {
                                                if (ust[i][j] != ' ') {
                                                    pole_baza[0] = j;
                                                    pole_baza[1] = i;
                                                    if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                                        if ((ruchB && ust[i][j] == 'K') || (ruchB == false && ust[i][j] == 'k')) {
                                                            pole_baza[0] = i;
                                                            pole_baza[1] = j;
                                                            hodu = SzachMatPatKontrola.uciekaj(temp, ruchB, pole_baza)
                                                                    && SzachMatPatKontrola.uciekaj(kontrolamat, nakladki, ruchB, poza_krolewska);
                                                        }
                                                    } else {
                                                        move = SzachMatPatKontrola.znajdz_ruch(USTAWIENIE1, ruchB, ust[i][j], pole_baza, przelotcan);
                                                        move = SzachMatPatKontrola.znajdz_ruch(USTAWIENIE1, USTAWIENIE2, ruchB, nakladki[i][j], pole_baza, przelotcan);
                                                        if (move) {
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            if (move) {
                                                break;
                                            }
                                        }
                                    }
                                } else {
                                    koniecanimacji = true;
                                    BUTTON.setIcon(cursor);

                                }
                            }
                        }
                    } else {
                        if (lokalS[0] == lokalK[0] && lokalS[1] == lokalK[1]) {
                            czysc_rame();
                            ustawrame();
                            koniecanimacji = true;
                            zmien = false;
                            promo = ' ';
                            BUTTON.setIcon(cursor);
                            polestart = false;
                            wyk = false;
                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                        } else {
                            polestart = true;
                            if (czasgry == -1 && siec == false) {
                                if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                            JOptionPane.INFORMATION_MESSAGE);

                                    // JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                    //       JOptionPane.INFORMATION_MESSAGE);
                                    switch (symbol) {
                                        case 'K':
                                        case 'k':
                                            JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                        case 'Q':
                                        case 'q':
                                            JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                        case 'R':
                                        case 'r':
                                            JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                        case 'B':
                                        case 'b':
                                            JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                        case 'N':
                                        case 'n':
                                            JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                    + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                        case 'P':
                                        case 'p':
                                            JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                    + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                    + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                    + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                    }
                                }
                            } else {
                                Toolkit.getDefaultToolkit().beep();
                            }
                        }
                    }
                }
                if (polestart == false) {
                    if (((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) && kon) {
                        if (SI_ON == false && siec == false && odwrot) {
                            odwrot = !odwrot;
                        }
                        ustawrame();

                        if (tryb == 2) {
                            if (odwrot == false) {
                                if (ruchB == false) {
                                    czasB.s = sekbaza;
                                    czasB.m = seksyg;
                                    czasB.warn = false;
                                    zegarbiale.setBackground(Color.BLACK);
                                    zegarbiale.setForeground(Color.BLACK);
                                    zegarbiale.setText(String.valueOf(czasB.s));
                                } else {
                                    czasC.s = sekbaza;
                                    czasC.m = seksyg;
                                    czasC.warn = false;
                                    zegarczarne.setBackground(Color.BLACK);
                                    zegarczarne.setForeground(Color.BLACK);
                                    zegarczarne.setText(String.valueOf(czasC.s));
                                }
                            } else {
                                if (ruchB == false) {
                                    czasC.s = sekbaza;
                                    czasC.m = seksyg;
                                    czasC.warn = false;
                                    zegarczarne.setBackground(Color.BLACK);
                                    zegarczarne.setForeground(Color.BLACK);
                                    zegarczarne.setText(String.valueOf(czasC.s));
                                } else {
                                    czasB.s = sekbaza;
                                    czasB.m = seksyg;
                                    czasB.warn = false;
                                    zegarbiale.setBackground(Color.BLACK);
                                    zegarbiale.setForeground(Color.BLACK);
                                    zegarbiale.setText(String.valueOf(czasB.s));
                                }
                            }
                        }
                        if (tryb == 1) {
                            switch (czasgry) {
                                case 2:
                                case 4:
                                case 6:
                                case 8:
                                case 10:
                                    if (ruchB == false) {
                                        czasB.s = czasB.s + bonuss;
                                        if (czasB.s >= 60) {
                                            czasB.s = czasB.s - 60;
                                            czasB.m = czasB.m + 1;
                                        }
                                        if (czasB.s < 10) {
                                            zegarbiale.setText(czasB.m + ":0" + czasB.s);
                                        } else {
                                            zegarbiale.setText(czasB.m + ":" + czasB.s);
                                        }
                                    } else {
                                        czasC.s = czasC.s + bonuss;
                                        if (czasC.s >= 60) {
                                            czasC.s = czasC.s - 60;
                                            czasC.m = czasC.m + 1;
                                        }

                                        if (czasB.s < 10) {
                                            zegarczarne.setText(czasB.m + ":0" + czasB.s);
                                        } else {
                                            zegarczarne.setText(czasB.m + ":" + czasB.s);
                                        }
                                    }
                                    break;
                            }
                        }

                        if (odwrot) {

                            switch (start.charAt(0)) {
                                case 'A':
                                    start = start.replace('A', 'H');
                                    break;
                                case 'B':
                                    start = start.replace('B', 'G');
                                    break;
                                case 'C':
                                    start = start.replace('C', 'F');
                                    break;
                                case 'D':
                                    start = start.replace('D', 'E');
                                    break;
                                case 'E':
                                    start = start.replace('E', 'D');
                                    break;
                                case 'F':
                                    start = start.replace('F', 'C');
                                    break;
                                case 'G':
                                    start = start.replace('G', 'B');
                                    break;
                                case 'H':
                                    start = start.replace('H', 'A');
                                    break;
                            }
                            switch (start.charAt(1)) {
                                case '1':
                                    start = start.replace('1', '8');
                                    break;
                                case '2':
                                    start = start.replace('2', '7');
                                    break;
                                case '3':
                                    start = start.replace('3', '6');
                                    break;
                                case '4':
                                    start = start.replace('4', '5');
                                    break;
                                case '5':
                                    start = start.replace('5', '4');
                                    break;
                                case '6':
                                    start = start.replace('6', '3');
                                    break;
                                case '7':
                                    start = start.replace('7', '2');
                                    break;
                                case '8':
                                    start = start.replace('8', '1');
                                    break;
                            }
                            switch (stop.charAt(0)) {
                                case 'A':
                                    stop = stop.replace('A', 'H');
                                    break;
                                case 'B':
                                    stop = stop.replace('B', 'G');
                                    break;
                                case 'C':
                                    stop = stop.replace('C', 'F');
                                    break;
                                case 'D':
                                    stop = stop.replace('D', 'E');
                                    break;
                                case 'E':
                                    stop = stop.replace('E', 'D');
                                    break;
                                case 'F':
                                    stop = stop.replace('F', 'C');
                                    break;
                                case 'G':
                                    stop = stop.replace('G', 'B');
                                    break;
                                case 'H':
                                    stop = stop.replace('H', 'A');
                                    break;
                            }
                            switch (stop.charAt(1)) {
                                case '1':
                                    stop = stop.replace('1', '8');
                                    break;
                                case '2':
                                    stop = stop.replace('2', '7');
                                    break;
                                case '3':
                                    stop = stop.replace('3', '6');
                                    break;
                                case '4':
                                    stop = stop.replace('4', '5');
                                    break;
                                case '5':
                                    stop = stop.replace('5', '4');
                                    break;
                                case '6':
                                    stop = stop.replace('6', '3');
                                    break;
                                case '7':
                                    stop = stop.replace('7', '2');
                                    break;
                                case '8':
                                    stop = stop.replace('8', '1');
                                    break;
                            }
                        }
                        ostatni_start = start;
                        ostatni_stop = stop;
                        ustawrame();
                        if (((symbol == 'K' || (symbol == 'k')) && (lokalS[0] - lokalK[0] == -2 || lokalS[0] - lokalK[0] == 2))) {
                            if (ruchB == false) {
                                if (lokalS[0] - lokalK[0] == -2) {
                                    jTextArea3.append(movenr + "  O-O");
                                    ruch = "O-O";

                                    if (krolS) {
                                        if (hodu == false && hitme == false && protectme == false) {
                                            jTextArea3.append("#");
                                        } else {
                                            jTextArea3.append("+");
                                        }

                                    }
                                } else {
                                    if (lokalS[0] - lokalK[0] == 2) {
                                        jTextArea3.append(movenr + "  O-O-O");
                                        ruch = "O-O-O";
                                        if (krolS) {
                                            if (hodu == false && hitme == false && protectme == false) {
                                                jTextArea3.append("#");
                                            } else {
                                                jTextArea3.append("+");
                                            }
                                            ostatni_start = "E1";
                                            ostatni_stop = "C1";
                                        }
                                    }
                                }
                            } else {
                                if (lokalS[0] - lokalK[0] == -2) {
                                    jTextArea3.append("     O-O");
                                    ruch = "O-O";
                                    if (krolS) {
                                        if (hodu == false && hitme == false && protectme == false) {
                                            jTextArea3.append("#");
                                        } else {
                                            jTextArea3.append("+");
                                        }
                                        ostatni_start = "E8";
                                        ostatni_stop = "G8";
                                    }
                                } else {
                                    if (lokalS[0] - lokalK[0] == 2) {
                                        jTextArea3.append("     O-O-O");
                                        ruch = "O-O-O";
                                        if (krolS) {
                                            if (hodu == false && hitme == false && protectme == false) {
                                                jTextArea3.append("#");
                                            } else {
                                                jTextArea3.append("+");
                                            }
                                            ostatni_start = "E8";
                                            ostatni_stop = "C8";
                                        }
                                    }
                                }
                                jTextArea3.append("\n");
                                movenr = movenr + 1;
                            }

                        } else {
                            if (prze == false) {
                                if (ruchB == false) {
                                    if ((stop.charAt(1) == '8') && (promo != ' ') && (promocja)) {
                                        if (bicie == false) {
                                            jTextArea3.append(movenr + ".  P" + start + "-" + stop + "=" + promo);
                                            ruch = "P" + start + "-" + stop + "=" + promo;
                                        } else {
                                            jTextArea3.append(movenr + ".  P" + start + "x" + stop + "=" + promo);
                                            ruch = "P" + start + "x" + stop + "=" + promo;
                                        }
                                    } else {
                                        if (bicie == false) {
                                            jTextArea3.append(movenr + ".  " + symbol + start + "-" + stop);
                                            ruch = symbol + start + "-" + stop;
                                        } else {
                                            if (dokonanoEP) {
                                                jTextArea3.append(movenr + ".  " + symbol + start + "x" + stop + "EP");
                                            } else {
                                                jTextArea3.append(movenr + ".  " + symbol + start + "x" + stop);
                                            }
                                            ruch = symbol + start + "x" + stop;
                                        }
                                    }
                                    if (krolS) {
                                        if (hodu == false && hitme == false && protectme == false) {
                                            jTextArea3.append("#");
                                        } else {
                                            jTextArea3.append("+");
                                        }
                                    }
                                } else {
                                    if ((stop.charAt(1) == '1') && (promo != ' ') && (promocja)) {
                                        if (bicie == false) {
                                            jTextArea3.append("    p" + start + "-" + stop + "=" + promo);
                                            ruch = "P" + start + "-" + stop + "=" + promo;
                                        } else {
                                            jTextArea3.append("    p" + start + "x" + stop + "=" + promo);
                                            ruch = "P" + start + "x" + stop + "=" + promo;
                                        }

                                    } else {
                                        if (bicie == false) {
                                            jTextArea3.append("    " + symbol + start + "-" + stop);
                                            ruch = symbol + start + "-" + stop;
                                        } else {
                                            if (dokonanoEP) {
                                                jTextArea3.append("  " + symbol + start + "x" + stop + "EP");
                                            } else {
                                                jTextArea3.append("  " + symbol + start + "x" + stop);
                                            }
                                            ruch = symbol + start + "x" + stop;

                                        }
                                    }
                                    if (krolS) {
                                        if (hodu == false && hitme == false && protectme == false) {
                                            jTextArea3.append("#");

                                        } else {
                                            jTextArea3.append("+");
                                        }

                                    }
                                    jTextArea3.append("\n");
                                    movenr = movenr + 1;
                                }
                            }
                            if (symbol == 'K') {
                                kingrochB = false;
                                dokonano_RB = Math.abs(lokalS[0] - lokalS[1]) == 2;
                            }
                            if (symbol == 'k') {
                                kingrochC = false;
                                dokonano_RC = Math.abs(lokalS[0] - lokalS[1]) == 2;
                            }
                            if (bicie) {
                                switch (stop) {
                                    case "A1":
                                        wleft = false;
                                        if (!wright && !wleft) {
                                            kingrochB = false;
                                        }
                                        break;
                                    case "A8":
                                        bleft = false;
                                        if (!bright && !bleft) {
                                            kingrochC = false;
                                        }
                                        break;
                                    case "H1":
                                        wright = false;
                                        if (!wright && !wleft) {
                                            kingrochB = false;
                                        }
                                        break;
                                    case "H8":
                                        bright = false;
                                        if (!bright && !bleft) {
                                            kingrochC = false;
                                        }
                                        break;
                                }
                            }
                            if (symbol == 'r' || symbol == 'R') {
                                switch (start) {
                                    case "A1":
                                        wleft = false;
                                        if (!wright && !wleft) {
                                            kingrochB = false;
                                        }
                                        break;
                                    case "A8":
                                        bleft = false;
                                        if (!bright && !bleft) {
                                            kingrochC = false;
                                        }
                                        break;
                                    case "H1":
                                        wright = false;
                                        if (!wright && !wleft) {
                                            kingrochB = false;
                                        }
                                        break;
                                    case "H8":
                                        bright = false;
                                        if (!bright && !bleft) {
                                            kingrochC = false;
                                        }
                                        break;
                                }
                            }
                        }
                        jTextArea3.setCaretPosition(jTextArea3.getDocument().getLength());
                        if (siec) {
                            try {
                                msgwy = ruch;
                                out.writeUTF(msgwy + " Przeciwnik");
                            } catch (IOException ex) {
                                Logger.getLogger(SzachowaArena.class
                                        .getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (bicie || (promocja || (symbol == 'P' || symbol == 'p'))) {
                            dolicz = false;
                            zasada50 = 0;
                            bicie = false;
                        } else {
                            if (dolicz) {
                                zasada50 = (byte) (zasada50 + 1);
                                dolicz = false;
                            } else {
                                dolicz = true;
                            }
                        }
                        if (lokalK[0] != lokalS[0] || lokalK[1] != lokalS[1]) {
                            String tmp3;
                            int powtorki = 0;
                            tmp3 = "";
                            for (int x = 0; x < 8; x++) {
                                for (int y = 0; y < 8; y++) {
                                    tmp3 = tmp3.concat(String.valueOf(ust[x][y]));
                                }
                            }
                            tmp3 = tmp3.concat(" " + ruchB + " " + przelotcan + " " + kingrochB + " " + kingrochC + " " + wleft + " " + wright + " " + bleft + " " + bright);
                            historia.add(tmp3);
                            Collections.sort(historia);
                            if (historia.size() > 2) {
                                for (int i = 1; i < historia.size(); i++) {
                                    if (historia.get(i).equals(historia.get(i - 1))) {
                                        powtorki = powtorki + 1;
                                        if (powtorki == 2) {
                                            if (czasgry != -1) {
                                                whitetime.interrupt();
                                                blacktime.interrupt();
                                            }
                                            JOptionPane.showMessageDialog(rootPane, "3-krotne powtórzenie pozycji. \nREMIS!", "Zasada", JOptionPane.WARNING_MESSAGE);
                                            remis();
                                        }
                                    } else {
                                        powtorki = 0;
                                    }
                                }
                            }
                        }
                    }
                }
                promo = ' ';
                znak_promocji = ' ';
                promocja = false;
                roch = false;
                dokonanoEP = false;
                dobierz_kursor_na_przycisku(' ', null);
                setCursor(Cursor.getDefaultCursor());
                dobierz_kursor_na_przycisku(' ', null);
            }
        }
        if (hodu == false && hitme == false && protectme == false) {
            if (czasgry != -1) {
                whitetime.interrupt();
                blacktime.interrupt();
            }
            JOptionPane.showMessageDialog(rootPane, "SZACH MAT!", "Ostrzeżenie",
                    JOptionPane.WARNING_MESSAGE);
            kapitulacja();
        }
        if (hodu == false && move == false) {
            if (czasgry != -1) {
                whitetime.interrupt();
                blacktime.interrupt();
            }
            JOptionPane.showMessageDialog(rootPane, "PAT! REMIS", "Remis",
                    JOptionPane.WARNING_MESSAGE);

            remis();
        }
        if ((pionB < 1 && pionC < 1 && lekkieB < 2 && lekkieC < 2 && ciezkieB < 1 && ciezkieC < 1)) {
            if (czasgry != -1) {
                whitetime.interrupt();
                blacktime.interrupt();
            }
            JOptionPane.showMessageDialog(rootPane, "Remis na wskutek niewystarczajacego materiału do mata.", "Remis", JOptionPane.WARNING_MESSAGE);
            remis();
        }
        if (zasada50 == 50 && krolS == false && (hodu || protectme || hitme)) {
            if (czasgry != -1) {
                whitetime.interrupt();
                blacktime.interrupt();
            }
            JOptionPane.showMessageDialog(rootPane, "zasada 50 ruchów.(50 ruchów po obu stronach bez bicia lub ruchu pionem). \nREMIS!", "Zasada", JOptionPane.WARNING_MESSAGE);
            remis();
        }
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                odwrotna[i][j] = ust[7 - i][7 - j];
            }
        }
        if (SI_wyk == false && SI_ON && tura_rywala == ruchB && (move || hodu || hitme || protectme)) {
            char[][] backup1 = new char[8][8];
            for (int i = 0; i < 8; i++) {
                System.arraycopy(ust[i], 0, backup1[i], 0, 8);
            }
        }
        pomoc_ruch = ruchB ? Color.blue : Color.red;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }

    private void antyszach(Object pole) {
        JButton BUTTON = (JButton) pole;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
        byte pomocx = 0, pomocy = 0;
        char pomoc2, pomoc3;
        if (gra) {
            if (!siec || (siec && !oczekiwanie) || wzor) {
                if (przelot) {
                } else {
                    prze = false;
                    if (roch) {
                    } else {
                        if (BUTTON.getIcon() != null || polestart) {
                            if (polestart == false) {
                                pomocs = BUTTON.getName();
                                pomoc2 = pomocs.charAt(0);
                                pomoc3 = pomocs.charAt(1);
                                if (odwrot == false) {
                                    switch (pomoc2) {
                                        case 'A':
                                            pomocx = 1;
                                            break;
                                        case 'B':
                                            pomocx = 2;
                                            break;
                                        case 'C':
                                            pomocx = 3;
                                            break;
                                        case 'D':
                                            pomocx = 4;
                                            break;
                                        case 'E':
                                            pomocx = 5;
                                            break;
                                        case 'F':
                                            pomocx = 6;
                                            break;
                                        case 'G':
                                            pomocx = 7;
                                            break;
                                        case 'H':
                                            pomocx = 8;
                                            break;
                                    }
                                    switch (pomoc3) {
                                        case '1':
                                            pomocy = 1;
                                            break;
                                        case '2':
                                            pomocy = 2;
                                            break;
                                        case '3':
                                            pomocy = 3;
                                            break;
                                        case '4':
                                            pomocy = 4;
                                            break;
                                        case '5':
                                            pomocy = 5;
                                            break;
                                        case '6':
                                            pomocy = 6;
                                            break;
                                        case '7':
                                            pomocy = 7;
                                            break;
                                        case '8':
                                            pomocy = 8;
                                            break;
                                    }
                                } else {
                                    switch (pomoc2) {
                                        case 'A':
                                            pomocx = 8;
                                            break;
                                        case 'B':
                                            pomocx = 7;
                                            break;
                                        case 'C':
                                            pomocx = 6;
                                            break;
                                        case 'D':
                                            pomocx = 5;
                                            break;
                                        case 'E':
                                            pomocx = 4;
                                            break;
                                        case 'F':
                                            pomocx = 3;
                                            break;
                                        case 'G':
                                            pomocx = 2;
                                            break;
                                        case 'H':
                                            pomocx = 1;
                                            break;
                                    }
                                    switch (pomoc3) {
                                        case '1':
                                            pomocy = 8;
                                            break;
                                        case '2':
                                            pomocy = 7;
                                            break;
                                        case '3':
                                            pomocy = 6;
                                            break;
                                        case '4':
                                            pomocy = 5;
                                            break;
                                        case '5':
                                            pomocy = 4;
                                            break;
                                        case '6':
                                            pomocy = 3;
                                            break;
                                        case '7':
                                            pomocy = 2;
                                            break;
                                        case '8':
                                            pomocy = 1;
                                            break;
                                    }
                                }
                                lokalS[0] = pomocx;
                                lokalS[1] = pomocy;

                                symbol = ust[pomocy - 1][pomocx - 1];
                                if (symbol == 'K' || symbol == 'Q' || symbol == 'R' || symbol == 'B' || symbol == 'N' || symbol == 'P' || symbol == 'A') {
                                    pomoci1 = 'W';
                                } else {
                                    pomoci1 = 'B';
                                }
                                if ((pomoci1 == 'W' && ruchB) || (pomoci1 == 'B' && ruchB == false)) {
                                    zmien = false;
                                    nazwapola = BUTTON.getName();
                                    pomoc5 = BUTTON.getIcon();
                                    cursor = BUTTON.getIcon();
                                    pomoc2 = pomocs.charAt(0);
                                    start = pomocs;
                                    BUTTON.setIcon(null);
                                    pomoc3 = pomocs.charAt(1);
                                    if (odwrot == false) {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 1;
                                                break;
                                            case 'B':
                                                pomocx = 2;
                                                break;
                                            case 'C':
                                                pomocx = 3;
                                                break;
                                            case 'D':
                                                pomocx = 4;
                                                break;
                                            case 'E':
                                                pomocx = 5;
                                                break;
                                            case 'F':
                                                pomocx = 6;
                                                break;
                                            case 'G':
                                                pomocx = 7;
                                                break;
                                            case 'H':
                                                pomocx = 8;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 1;
                                                break;
                                            case '2':
                                                pomocy = 2;
                                                break;
                                            case '3':
                                                pomocy = 3;
                                                break;
                                            case '4':
                                                pomocy = 4;
                                                break;
                                            case '5':
                                                pomocy = 5;
                                                break;
                                            case '6':
                                                pomocy = 6;
                                                break;
                                            case '7':
                                                pomocy = 7;
                                                break;
                                            case '8':
                                                pomocy = 8;
                                                break;
                                        }
                                    } else {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 8;
                                                break;
                                            case 'B':
                                                pomocx = 7;
                                                break;
                                            case 'C':
                                                pomocx = 6;
                                                break;
                                            case 'D':
                                                pomocx = 5;
                                                break;
                                            case 'E':
                                                pomocx = 4;
                                                break;
                                            case 'F':
                                                pomocx = 3;
                                                break;
                                            case 'G':
                                                pomocx = 2;
                                                break;
                                            case 'H':
                                                pomocx = 1;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 8;
                                                break;
                                            case '2':
                                                pomocy = 7;
                                                break;
                                            case '3':
                                                pomocy = 6;
                                                break;
                                            case '4':
                                                pomocy = 5;
                                                break;
                                            case '5':
                                                pomocy = 4;
                                                break;
                                            case '6':
                                                pomocy = 3;
                                                break;
                                            case '7':
                                                pomocy = 2;
                                                break;
                                            case '8':
                                                pomocy = 1;
                                                break;
                                        }
                                    }
                                    mordobicia.removeAll(mordobicia);
                                    zwyczajneR.removeAll(zwyczajneR);
                                    for (Ruch r : Generator.generuj_posuniecia_antyszach(ust, ruchB, przelotcan, kolumna)) {
                                        if (r.atak) {
                                            mordobicia.add(r);
                                        } else {
                                            zwyczajneR.add(r);
                                        }
                                    }
                                    lokalS[0] = pomocx;
                                    lokalS[1] = pomocy;
                                    symbol = ust[pomocy - 1][pomocx - 1];
                                    if ((symbol == 'P' && lokalS[1] == 7) || (symbol == 'p' && lokalS[1] == 2)) {
                                        promo = ' ';
                                    }
                                    dobierz_kursor(symbol);
                                    ust[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                    polestart = true;
                                    koniecanimacji = false;
                                    if (wzor == false) {
                                        animacja anim1 = new animacja(2, polestart, zmien, BUTTON, pomocs);
                                    }
                                    char[][] temp1 = new char[8][8];
                                    for (int i = 0; i < 8; i++) {
                                        System.arraycopy(ust[i], 0, temp1[i], 0, 8);
                                    }
                                    temp1[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                                    int[] temp2 = new int[2];
                                    temp2[0] = lokalS[1] - 1;
                                    temp2[1] = lokalS[0] - 1;

                                    if (opcje_pomoc == 1 || opcje_pomoc == 2) {

                                        if (!mordobicia.isEmpty()) {
                                            for (Ruch ruch : mordobicia) {
                                                if (ruch.toString().subSequence(1, 3).equals((dobierzprzycisk(BUTTON.getName(), odwrot)).getName())) {
                                                    JButton cel = dobierzprzycisk(ruch.toString().substring(4, 6), odwrot);
                                                    cel.setBorder(new LineBorder(pomoc_ruch, 4));

                                                }
                                            }
                                        } else {
                                            for (Ruch ruch : zwyczajneR) {
                                                if (ruch.toString().subSequence(1, 3).equals((dobierzprzycisk(BUTTON.getName(), odwrot)).getName())) {
                                                    JButton cel = dobierzprzycisk(ruch.toString().substring(4, 6), odwrot);
                                                    cel.setBorder(new LineBorder(pomoc_ruch, 4));

                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (siec == false && symulacja == false) {
                                        if (czasgry == -1 && siec == false && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                                            if (ruchB) {
                                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! AKTUALNY RUCH MAJĄ BIAŁE", "bład koloru",
                                                        JOptionPane.WARNING_MESSAGE);
                                            } else {
                                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! AKTUALNY RUCH MAJĄ CZARNE", "błąd koloru",
                                                        JOptionPane.WARNING_MESSAGE);
                                            }
                                        } else {
                                            Toolkit.getDefaultToolkit().beep();
                                        }
                                        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);

                                    }
                                }
                            } else {
                                System.out.println("bicia:" + mordobicia.size());
                                System.out.println("ruchy:" + zwyczajneR.size());
                                if (BUTTON.getIcon() == null) {
                                    pomoce = BUTTON.getName();
                                    stop = pomoce;
                                    pomoc3 = pomoce.charAt(1);
                                    pomoc2 = pomoce.charAt(0);
                                    if (odwrot == false) {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 1;
                                                break;
                                            case 'B':
                                                pomocx = 2;
                                                break;
                                            case 'C':
                                                pomocx = 3;
                                                break;
                                            case 'D':
                                                pomocx = 4;
                                                break;
                                            case 'E':
                                                pomocx = 5;
                                                break;
                                            case 'F':
                                                pomocx = 6;
                                                break;
                                            case 'G':
                                                pomocx = 7;
                                                break;
                                            case 'H':
                                                pomocx = 8;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 1;
                                                break;
                                            case '2':
                                                pomocy = 2;
                                                break;
                                            case '3':
                                                pomocy = 3;
                                                break;
                                            case '4':
                                                pomocy = 4;
                                                break;
                                            case '5':
                                                pomocy = 5;
                                                break;
                                            case '6':
                                                pomocy = 6;
                                                break;
                                            case '7':
                                                pomocy = 7;
                                                break;
                                            case '8':
                                                pomocy = 8;
                                                break;
                                        }
                                    } else {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 8;
                                                break;
                                            case 'B':
                                                pomocx = 7;
                                                break;
                                            case 'C':
                                                pomocx = 6;
                                                break;
                                            case 'D':
                                                pomocx = 5;
                                                break;
                                            case 'E':
                                                pomocx = 4;
                                                break;
                                            case 'F':
                                                pomocx = 3;
                                                break;
                                            case 'G':
                                                pomocx = 2;
                                                break;
                                            case 'H':
                                                pomocx = 1;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 8;
                                                break;
                                            case '2':
                                                pomocy = 7;
                                                break;
                                            case '3':
                                                pomocy = 6;
                                                break;
                                            case '4':
                                                pomocy = 5;
                                                break;
                                            case '5':
                                                pomocy = 4;
                                                break;
                                            case '6':
                                                pomocy = 3;
                                                break;
                                            case '7':
                                                pomocy = 2;
                                                break;
                                            case '8':
                                                pomocy = 1;
                                                break;
                                        }
                                    }
                                    lokalK[0] = pomocx;
                                    lokalK[1] = pomocy;
                                    atak = krolS;
                                    if (lokalK[0] == lokalS[0] && lokalS[1] == lokalK[1]) {
                                        koniecanimacji = true;
                                        BUTTON.setIcon(cursor);
                                        zmien = false;
                                        promo = ' ';
                                        polestart = false;
                                        wyk = false;
                                        ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                        czysc_rame();
                                        ustawrame();
                                    } else {
                                        kon = RuchZagrozenie_kontrola.antyruch(lokalS, lokalK, symbol, ust.clone(), ruchB, przelotcan, kol);

                                        if (kon && mordobicia.isEmpty()) {
                                            if ((symbol == 'P' && lokalS[0] == lokalK[0] && lokalS[1] - lokalK[1] == -2)
                                                    || (symbol == 'p' && lokalS[0] == lokalK[0] && lokalS[1] - lokalK[1] == 2)) {
                                                przelotcan = true;
                                                kol = lokalS[0];
                                            } else {
                                                if (przelotcan && (symbol == 'p' || symbol == 'P') && Math.abs(lokalS[1] - lokalK[1]) == 1
                                                        && ((ruchB && lokalS[1] == 5) || (ruchB == false && lokalS[1] == 4))) {

                                                } else {
                                                    kol = 0;
                                                }
                                            }
                                            if (symbol == 'P' || symbol == 'p') {
                                                if ((przelotcan && ((lokalK[0] == kol && symbol == 'P' && lokalS[1] - lokalK[1] == -1 && lokalS[0] != lokalK[0] && lokalS[1] == 5)
                                                        || (lokalK[0] == kol && symbol == 'p' && lokalS[1] - lokalK[1] == 1 && lokalS[0] != lokalK[0] && lokalS[1] == 4)))) {
                                                    kontrolka = ust;
                                                    kontrolka[lokalS[1] - 1][kol - 1] = ' ';
                                                    kontrolka[lokalK[1] - 1][kol - 1] = symbol;
                                                    kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                    kon = RuchZagrozenie_kontrola.antyruch(lokalS, lokalK, symbol, ust, ruchB, przelotcan, kol);

                                                    przelot = false;
                                                    dokonanoEP = true;
                                                    BUTTON.setIcon(cursor);
                                                    ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                    if (ruchB == false) {
                                                        pionB = (byte) (pionB - 1);
                                                    } else {
                                                        pionC = (byte) (pionC - 1);
                                                    }
                                                    switch (lokalK[0]) {
                                                        case 1:
                                                            if (ruchB) {
                                                                ust[4][0] = ' ';
                                                                A5.setIcon(null);
                                                            } else {
                                                                ust[3][0] = ' ';
                                                                A4.setIcon(null);
                                                            }
                                                            break;
                                                        case 2:
                                                            if (ruchB) {
                                                                ust[4][1] = ' ';
                                                                B5.setIcon(null);
                                                            } else {
                                                                ust[3][1] = ' ';
                                                                B4.setIcon(null);
                                                            }
                                                            break;
                                                        case 3:
                                                            if (ruchB) {
                                                                ust[4][2] = ' ';
                                                                C5.setIcon(null);
                                                            } else {
                                                                ust[3][2] = ' ';
                                                                C4.setIcon(null);
                                                            }
                                                            break;
                                                        case 4:
                                                            if (ruchB) {
                                                                ust[4][3] = ' ';
                                                                D5.setIcon(null);
                                                            } else {
                                                                ust[3][3] = ' ';
                                                                D4.setIcon(null);
                                                            }
                                                            break;
                                                        case 5:
                                                            if (ruchB) {
                                                                ust[4][4] = ' ';
                                                                E5.setIcon(null);
                                                            } else {
                                                                ust[3][4] = ' ';
                                                                E4.setIcon(null);
                                                            }
                                                            break;
                                                        case 6:
                                                            if (ruchB) {
                                                                ust[4][5] = ' ';
                                                                F5.setIcon(null);
                                                            } else {
                                                                ust[3][5] = ' ';
                                                                F4.setIcon(null);
                                                            }
                                                            break;
                                                        case 7:
                                                            if (ruchB) {
                                                                ust[4][6] = ' ';
                                                                G5.setIcon(null);
                                                            } else {
                                                                ust[3][6] = ' ';
                                                                G4.setIcon(null);
                                                            }
                                                            break;
                                                        case 8:
                                                            if (ruchB) {
                                                                ust[4][7] = ' ';
                                                                H5.setIcon(null);
                                                            } else {
                                                                ust[3][7] = ' ';
                                                                H4.setIcon(null);
                                                            }
                                                            break;
                                                    }
                                                    wyk = true;
                                                    prze = true;
                                                    bicie = true;

                                                }
                                            } else {
                                                przelotcan = false;
                                            }
                                            polestart = false;
                                            wyk = true;
                                        } else {
                                            if (czasgry == -1 && siec == false) {
                                                kon = RuchZagrozenie_kontrola.antyruch(lokalS, lokalK, symbol, ust.clone(), ruchB, przelotcan, kol);
                                                if (kon) {
                                                    zmien = true;
                                                }
                                                if (kon == false) {
                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                            JOptionPane.INFORMATION_MESSAGE);
                                                } else {
                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! MASZ OBOWIĄZKOWE BICIE W TYM TRYBIE", "Ostrzeżenie",
                                                            JOptionPane.INFORMATION_MESSAGE);
                                                }
                                                if ((opcje_pomoc == 0 || opcje_pomoc == 2) && !kon) {
                                                    switch (symbol) {
                                                        case 'K':
                                                        case 'k':
                                                            JOptionPane.showMessageDialog(rootPane, "Król może na dowolne sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'Q':
                                                        case 'q':
                                                            JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'R':
                                                        case 'r':
                                                            JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'B':
                                                        case 'b':
                                                            JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'N':
                                                        case 'n':
                                                            JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                    + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'P':
                                                        case 'p':
                                                            JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                    + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                    + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                    + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                    }
                                                }
                                            } else {
                                                Toolkit.getDefaultToolkit().beep();
                                            }
                                            kontrolka[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                                            kontrolka[lokalK[1] - 1][lokalK[0] - 1] = ' ';
                                            polestart = true;
                                            wyk = false;
                                            przelot = false;
                                            styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                        }
                                        if (wyk && mordobicia.isEmpty()) {
                                            if ((symbol == 'P' && lokalK[1] == 8) || (symbol == 'p' && lokalK[1] == 1)) {
                                                promocja = true;
                                                Object[] opcjeB = {b0, b1, b2, b3, b4};
                                                Object[] opcjeC = {c0, c1, c2, c3, c4};
                                                if (ruchB) {
                                                    pionB = (byte) (pionB - 1);
                                                    if (znak_promocji == ' ') {
                                                        wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeB, null);
                                                        switch (wybor) {
                                                            case 0:
                                                                symbol = 'K';
                                                                krole_biale = (byte) (krole_biale + 1);
                                                                cursor = b0;
                                                                break;
                                                            case 2:
                                                                symbol = 'R';
                                                                ciezkieB = (byte) (ciezkieB + 1);
                                                                cursor = b2;
                                                                break;
                                                            case 3:
                                                                symbol = 'B';
                                                                lekkieB = (byte) (lekkieB + 1);
                                                                cursor = b3;
                                                                break;
                                                            case 4:
                                                                symbol = 'N';
                                                                lekkieB = (byte) (lekkieB + 1);
                                                                cursor = b4;
                                                                break;
                                                            case 1:
                                                            default:
                                                                symbol = 'Q';
                                                                ciezkieB = (byte) (ciezkieB + 1);
                                                                cursor = b1;
                                                                break;
                                                        }
                                                    } else {
                                                        symbol = znak_promocji;
                                                        switch (symbol) {
                                                            case 'K':
                                                                krole_biale = krole_biale + 1;
                                                                break;
                                                            case 'Q':
                                                            case 'R':
                                                                ciezkieB = (byte) (ciezkieB + 1);
                                                                break;
                                                            case 'B':
                                                            case 'N':
                                                                lekkieB = (byte) (lekkieB + 1);
                                                                break;
                                                        }
                                                    }
                                                } else {
                                                    pionC = (byte) (pionC - 1);
                                                    if (znak_promocji == ' ') {
                                                        wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeC, null);
                                                        switch (wybor) {
                                                            case 0:
                                                                symbol = 'k';
                                                                krole_czarne = (byte) (krole_czarne + 1);
                                                                cursor = c0;
                                                                break;
                                                            case 2:
                                                                symbol = 'r';
                                                                ciezkieC = (byte) (ciezkieC + 1);
                                                                cursor = c2;
                                                                break;
                                                            case 3:
                                                                symbol = 'b';
                                                                lekkieC = (byte) (lekkieC + 1);
                                                                cursor = c3;
                                                                break;
                                                            case 4:
                                                                symbol = 'n';
                                                                lekkieC = (byte) (lekkieC + 1);
                                                                cursor = c4;
                                                                break;
                                                            case 1:
                                                            default:
                                                                symbol = 'q';
                                                                ciezkieC = (byte) (ciezkieC + 1);
                                                                cursor = c1;
                                                                break;
                                                        }
                                                    } else {
                                                        symbol = znak_promocji;
                                                        switch (symbol) {
                                                            case 'k':
                                                                krole_czarne = krole_czarne + 1;
                                                            case 'q':
                                                            case 'r':
                                                                ciezkieC = (byte) (ciezkieC + 1);
                                                                break;
                                                            case 'b':
                                                            case 'n':
                                                                lekkieC = (byte) (lekkieC + 1);
                                                                break;
                                                        }
                                                    }
                                                }
                                                promo = symbol;
                                            }
                                            if (znak_promocji == ' ') {
                                                BUTTON.setIcon(cursor);
                                            } else {
                                                switch (znak_promocji) {
                                                    case 'Q':
                                                        BUTTON.setIcon(b1);
                                                        break;
                                                    case 'R':
                                                        BUTTON.setIcon(b2);
                                                        break;
                                                    case 'B':
                                                        BUTTON.setIcon(b3);
                                                        break;
                                                    case 'N':
                                                        BUTTON.setIcon(b4);
                                                        break;
                                                    case 'q':
                                                        BUTTON.setIcon(c1);
                                                        break;
                                                    case 'r':
                                                        BUTTON.setIcon(c2);
                                                        break;
                                                    case 'b':
                                                        BUTTON.setIcon(c3);
                                                        break;
                                                    case 'n':
                                                        BUTTON.setIcon(c4);
                                                        break;
                                                }
                                            }
                                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                            pomoc5 = null;
                                            polestart = false;
                                            ruchB = ruchB != true;

                                            for (int i = 0; i < 8; i++) {
                                                for (int j = 0; j < 8; j++) {
                                                    odwrotna[i][j] = ust[7 - i][7 - j];
                                                }
                                            }

                                            krolS = false;
                                            move = false;

                                            for (int i = 0; i < 8; i++) {
                                                for (int j = 0; j < 8; j++) {
                                                    if (ust[i][j] != ' ') {
                                                        pole_baza[0] = j;
                                                        pole_baza[1] = i;
                                                        move = SzachMatPatKontrola.znajdz_antyruch(ust, ruchB, ust[i][j], pole_baza, przelotcan);
                                                        if (move) {
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (move) {
                                                    break;
                                                }
                                            }

                                            bicie = prze;
                                            prze = false;
                                        }

                                    }

                                } else {
                                    char eliminowany;
                                    pomoce = BUTTON.getName();
                                    pomoc2 = pomoce.charAt(0);
                                    pomoc3 = pomoce.charAt(1);
                                    stop = pomoce;
                                    if (odwrot == false) {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 1;
                                                break;
                                            case 'B':
                                                pomocx = 2;
                                                break;
                                            case 'C':
                                                pomocx = 3;
                                                break;
                                            case 'D':
                                                pomocx = 4;
                                                break;
                                            case 'E':
                                                pomocx = 5;
                                                break;
                                            case 'F':
                                                pomocx = 6;
                                                break;
                                            case 'G':
                                                pomocx = 7;
                                                break;
                                            case 'H':
                                                pomocx = 8;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 1;
                                                break;
                                            case '2':
                                                pomocy = 2;
                                                break;
                                            case '3':
                                                pomocy = 3;
                                                break;
                                            case '4':
                                                pomocy = 4;
                                                break;
                                            case '5':
                                                pomocy = 5;
                                                break;
                                            case '6':
                                                pomocy = 6;
                                                break;
                                            case '7':
                                                pomocy = 7;
                                                break;
                                            case '8':
                                                pomocy = 8;
                                                break;
                                        }
                                    } else {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 8;
                                                break;
                                            case 'B':
                                                pomocx = 7;
                                                break;
                                            case 'C':
                                                pomocx = 6;
                                                break;
                                            case 'D':
                                                pomocx = 5;
                                                break;
                                            case 'E':
                                                pomocx = 4;
                                                break;
                                            case 'F':
                                                pomocx = 3;
                                                break;
                                            case 'G':
                                                pomocx = 2;
                                                break;
                                            case 'H':
                                                pomocx = 1;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 8;
                                                break;
                                            case '2':
                                                pomocy = 7;
                                                break;
                                            case '3':
                                                pomocy = 6;
                                                break;
                                            case '4':
                                                pomocy = 5;
                                                break;
                                            case '5':
                                                pomocy = 4;
                                                break;
                                            case '6':
                                                pomocy = 3;
                                                break;
                                            case '7':
                                                pomocy = 2;
                                                break;
                                            case '8':
                                                pomocy = 1;
                                                break;
                                        }
                                    }
                                    lokalK[0] = pomocx;
                                    lokalK[1] = pomocy;
                                    eliminowany = ust[lokalK[1] - 1][lokalK[0] - 1];
                                    if (eliminowany == 'K' || eliminowany == 'Q' || eliminowany == 'R' || eliminowany == 'B' || eliminowany == 'N' || eliminowany == 'P') {
                                        pomoci2 = 'W';
                                    } else {
                                        pomoci2 = 'B';
                                    }
                                    if (pomoci1 != pomoci2) {
                                        if (lokalK[0] == lokalS[0] && lokalS[1] == lokalK[1]) {
                                            koniecanimacji = true;
                                            zmien = false;
                                            promo = ' ';
                                            BUTTON.setIcon(cursor);
                                            polestart = false;
                                            wyk = false;
                                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                            czysc_rame();
                                            ustawrame();
                                        } else {
                                            kon = RuchZagrozenie_kontrola.antyruch(lokalS, lokalK, symbol, ust, ruchB, przelotcan, kol);
                                            char[][] tymczas = new char[8][8];
                                            for (int i = 0; i < 8; i++) {
                                                System.arraycopy(ust[i], 0, tymczas[i], 0, 8);
                                            }
                                            tymczas[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                            tymczas[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                            if (kon) {
                                                krolS = false;
                                                bicie = true;
                                                switch (eliminowany) {
                                                    case 'P':
                                                        pionB = (byte) (pionB - 1);
                                                        break;
                                                    case 'p':
                                                        pionC = (byte) (pionC - 1);
                                                        break;
                                                    case 'K':
                                                        krole_biale = (byte) (krole_biale - 1);
                                                        break;
                                                    case 'k':
                                                        krole_czarne = (byte) (krole_czarne - 1);
                                                        break;
                                                    case 'N':
                                                    case 'B':
                                                        lekkieB = (byte) (lekkieB - 1);
                                                        break;
                                                    case 'n':
                                                    case 'b':
                                                        lekkieC = (byte) (lekkieC - 1);
                                                        break;
                                                    case 'R':
                                                    case 'Q':
                                                        ciezkieB = (byte) (ciezkieB - 1);
                                                        break;
                                                    case 'r':
                                                    case 'q':
                                                        ciezkieC = (byte) (ciezkieC - 1);
                                                        break;
                                                }

                                                zmien = true;

                                                if ((symbol == 'P' && lokalK[1] == 8) || (symbol == 'p' && lokalK[1] == 1)) {
                                                    promocja = true;
                                                    Object[] opcjeB = {b0, b1, b2, b3, b4};
                                                    Object[] opcjeC = {c0, c1, c2, c3, c4};
                                                    if (ruchB) {
                                                        pionB = (byte) (pionB - 1);
                                                        if (znak_promocji == ' ') {
                                                            wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeB, null);
                                                            switch (wybor) {
                                                                case 0:
                                                                    symbol = 'K';
                                                                    krole_biale = (byte) (krole_biale + 1);
                                                                    cursor = b0;
                                                                    break;
                                                                case 2:
                                                                    symbol = 'R';
                                                                    lekkieB = (byte) (lekkieB + 1);
                                                                    cursor = b3;
                                                                    break;
                                                                case 3:
                                                                    symbol = 'B';
                                                                    lekkieB = (byte) (lekkieB + 1);
                                                                    cursor = b4;
                                                                    break;
                                                                case 4:
                                                                    symbol = 'B';
                                                                    lekkieB = (byte) (lekkieB + 1);
                                                                    cursor = b4;
                                                                    break;
                                                                case 1:
                                                                default:
                                                                    symbol = 'Q';
                                                                    ciezkieB = (byte) (ciezkieB + 1);
                                                                    cursor = b1;
                                                                    break;
                                                            }
                                                        } else {
                                                            symbol = znak_promocji;
                                                            switch (symbol) {
                                                                case 'K':
                                                                    krole_biale = krole_biale + 1;
                                                                    break;
                                                                case 'Q':
                                                                case 'R':
                                                                    ciezkieB = (byte) (ciezkieB + 1);
                                                                    break;
                                                                case 'B':
                                                                case 'N':
                                                                    lekkieB = (byte) (lekkieB + 1);
                                                                    break;
                                                            }
                                                        }
                                                    } else {
                                                        pionC = (byte) (pionC - 1);
                                                        if (znak_promocji == ' ') {
                                                            wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeC, null);
                                                            switch (wybor) {
                                                                case 0:
                                                                    symbol = 'k';
                                                                    krole_czarne = (byte) (krole_czarne + 1);
                                                                    cursor = b0;
                                                                    break;
                                                                case 2:
                                                                    symbol = 'r';
                                                                    lekkieB = (byte) (lekkieC + 1);
                                                                    cursor = b3;
                                                                    break;
                                                                case 3:
                                                                    symbol = 'b';
                                                                    lekkieB = (byte) (lekkieC + 1);
                                                                    cursor = b4;
                                                                    break;
                                                                case 4:
                                                                    symbol = 'n';
                                                                    lekkieB = (byte) (lekkieC + 1);
                                                                    cursor = b4;
                                                                    break;
                                                                case 1:
                                                                default:
                                                                    symbol = 'q';
                                                                    ciezkieB = (byte) (ciezkieC + 1);
                                                                    cursor = b1;
                                                                    break;
                                                            }
                                                        } else {
                                                            symbol = znak_promocji;
                                                            switch (symbol) {
                                                                case 'k':
                                                                    krole_czarne = krole_czarne + 1;
                                                                    break;
                                                                case 'q':
                                                                case 'r':
                                                                    ciezkieC = (byte) (ciezkieC + 1);
                                                                    break;
                                                                case 'b':
                                                                case 'n':
                                                                    lekkieC = (byte) (lekkieC + 1);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    promo = symbol;
                                                }
                                                if (znak_promocji == ' ') {
                                                    BUTTON.setIcon(cursor);
                                                } else {
                                                    switch (znak_promocji) {
                                                        case 'K':
                                                            BUTTON.setIcon(b0);
                                                            break;
                                                        case 'Q':
                                                            BUTTON.setIcon(b1);
                                                            break;
                                                        case 'R':
                                                            BUTTON.setIcon(b2);
                                                            break;
                                                        case 'B':
                                                            BUTTON.setIcon(b3);
                                                            break;
                                                        case 'N':
                                                            BUTTON.setIcon(b4);
                                                            break;
                                                        case 'k':
                                                            BUTTON.setIcon(c0);
                                                            break;
                                                        case 'q':
                                                            BUTTON.setIcon(c1);
                                                            break;
                                                        case 'r':
                                                            BUTTON.setIcon(c2);
                                                            break;
                                                        case 'b':
                                                            BUTTON.setIcon(c3);
                                                            break;
                                                        case 'n':
                                                            BUTTON.setIcon(c4);
                                                            break;
                                                    }
                                                }
                                                ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                pomoc5 = null;
                                                polestart = false;
                                                wyk = true;

                                            } else {
                                                wyk = false;
                                                polestart = true;
                                                if (czasgry == -1 && siec == false) {
                                                    if (opcje_pomoc == 0 || opcje_pomoc == 2) {

                                                        JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                                JOptionPane.INFORMATION_MESSAGE);

                                                        switch (symbol) {
                                                            case 'K':
                                                            case 'k':
                                                                JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'Q':
                                                            case 'q':
                                                                JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'R':
                                                            case 'r':
                                                                JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'B':
                                                            case 'b':
                                                                JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'N':
                                                            case 'n':
                                                                JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                        + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'P':
                                                            case 'p':
                                                                JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                        + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                        + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                        + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                        }
                                                    }
                                                } else {
                                                    Toolkit.getDefaultToolkit().beep();
                                                }
                                                //styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                            }
                                            if (wyk) {
                                                wyk = false;
                                                ruchB = ruchB != true;
                                                if ((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) {

                                                    for (int i = 0; i < 8; i++) {
                                                        for (int j = 0; j < 8; j++) {
                                                            odwrotna[i][j] = ust[7 - i][7 - j];
                                                        }
                                                    }

                                                    krolS = false;
                                                    move = false;
                                                    // System.out.println("wy");

                                                    for (int i = 0; i < 8; i++) {
                                                        for (int j = 0; j < 8; j++) {
                                                            if (ust[i][j] != ' ') {
                                                                pole_baza[0] = j;
                                                                pole_baza[1] = i;
                                                                move = SzachMatPatKontrola.znajdz_antyruch(ust, ruchB, ust[i][j], pole_baza, przelotcan);
                                                                if (move) {
                                                                    break;
                                                                }

                                                            }
                                                        }
                                                        if (move) {
                                                            break;
                                                        }
                                                    }

                                                } else {
                                                    koniecanimacji = true;
                                                    BUTTON.setIcon(cursor);
                                                }
                                            }
                                        }
                                    } else {
                                        if (lokalS[0] == lokalK[0] && lokalS[1] == lokalK[1]) {
                                            czysc_rame();
                                            ustawrame();
                                            koniecanimacji = true;
                                            zmien = false;
                                            promo = ' ';
                                            BUTTON.setIcon(cursor);
                                            polestart = false;
                                            wyk = false;
                                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                        } else {
                                            polestart = true;
                                            if (czasgry == -1 && siec == false) {
                                                if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                            JOptionPane.INFORMATION_MESSAGE);

                                                    // JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                    //       JOptionPane.INFORMATION_MESSAGE);
                                                    switch (symbol) {
                                                        case 'K':
                                                        case 'k':
                                                            JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'Q':
                                                        case 'q':
                                                            JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'R':
                                                        case 'r':
                                                            JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'B':
                                                        case 'b':
                                                            JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'N':
                                                        case 'n':
                                                            JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                    + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'P':
                                                        case 'p':
                                                            JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                    + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                    + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                    + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                    }
                                                }
                                            } else {
                                                Toolkit.getDefaultToolkit().beep();
                                            }
                                        }
                                    }
                                }
                                if (polestart == false) {

                                    if (((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) && kon) {
                                        if (SI_ON == false && siec == false && odwrot && obrotowy.getText().equals("Obrót WŁ")) {
                                            odwrot = !odwrot;
                                        }
                                        boolean zawrot = odwrot && siec == false;
                                        if ((((zawrot) && (odwrot == false))) || (odwrot && (SI_ON || siec))) {
                                            switch (start.charAt(0)) {
                                                case 'A':
                                                    start = start.replace('A', 'H');
                                                    break;
                                                case 'B':
                                                    start = start.replace('B', 'G');
                                                    break;
                                                case 'C':
                                                    start = start.replace('C', 'F');
                                                    break;
                                                case 'D':
                                                    start = start.replace('D', 'E');
                                                    break;
                                                case 'E':
                                                    start = start.replace('E', 'D');
                                                    break;
                                                case 'F':
                                                    start = start.replace('F', 'C');
                                                    break;
                                                case 'G':
                                                    start = start.replace('G', 'B');
                                                    break;
                                                case 'H':
                                                    start = start.replace('H', 'A');
                                                    break;
                                            }
                                            switch (start.charAt(1)) {
                                                case '1':
                                                    start = start.replace('1', '8');
                                                    break;
                                                case '2':
                                                    start = start.replace('2', '7');
                                                    break;
                                                case '3':
                                                    start = start.replace('3', '6');
                                                    break;
                                                case '4':
                                                    start = start.replace('4', '5');
                                                    break;
                                                case '5':
                                                    start = start.replace('5', '4');
                                                    break;
                                                case '6':
                                                    start = start.replace('6', '3');
                                                    break;
                                                case '7':
                                                    start = start.replace('7', '2');
                                                    break;
                                                case '8':
                                                    start = start.replace('8', '1');
                                                    break;
                                            }
                                            switch (stop.charAt(0)) {
                                                case 'A':
                                                    stop = stop.replace('A', 'H');
                                                    break;
                                                case 'B':
                                                    stop = stop.replace('B', 'G');
                                                    break;
                                                case 'C':
                                                    stop = stop.replace('C', 'F');
                                                    break;
                                                case 'D':
                                                    stop = stop.replace('D', 'E');
                                                    break;
                                                case 'E':
                                                    stop = stop.replace('E', 'D');
                                                    break;
                                                case 'F':
                                                    stop = stop.replace('F', 'C');
                                                    break;
                                                case 'G':
                                                    stop = stop.replace('G', 'B');
                                                    break;
                                                case 'H':
                                                    stop = stop.replace('H', 'A');
                                                    break;
                                            }
                                            switch (stop.charAt(1)) {
                                                case '1':
                                                    stop = stop.replace('1', '8');
                                                    break;
                                                case '2':
                                                    stop = stop.replace('2', '7');
                                                    break;
                                                case '3':
                                                    stop = stop.replace('3', '6');
                                                    break;
                                                case '4':
                                                    stop = stop.replace('4', '5');
                                                    break;
                                                case '5':
                                                    stop = stop.replace('5', '4');
                                                    break;
                                                case '6':
                                                    stop = stop.replace('6', '3');
                                                    break;
                                                case '7':
                                                    stop = stop.replace('7', '2');
                                                    break;
                                                case '8':
                                                    stop = stop.replace('8', '1');
                                                    break;
                                            }
                                        }
                                        ostatni_start = start;
                                        ostatni_stop = stop;
                                        String ruchS = "";
                                        czysc_rame();
                                        ustawrame();
                                        char promoSymbol = ' ';
                                        switch (promo) {
                                            case 'K':
                                                promoSymbol = "\u2654".charAt(0);
                                                break;
                                            case 'Q':
                                                promoSymbol = "\u2655".charAt(0);
                                                break;
                                            case 'R':
                                                promoSymbol = "\u2656".charAt(0);
                                                break;
                                            case 'B':
                                                promoSymbol = "\u2657".charAt(0);
                                                break;
                                            case 'N':
                                                promoSymbol = "\u2658".charAt(0);
                                                break;
                                            case 'q':
                                                promoSymbol = "\u265B".charAt(0);
                                                break;
                                            case 'r':
                                                promoSymbol = "\u265C".charAt(0);
                                                break;
                                            case 'b':
                                                promoSymbol = "\u265D".charAt(0);
                                                break;
                                            case 'n':
                                                promoSymbol = "\u265E".charAt(0);
                                                break;
                                            case 'k':
                                                promoSymbol = "\u265A".charAt(0);
                                                break;
                                        }
                                        char figurka = ' ';
                                        switch (symbol) {
                                            case 'K':
                                                figurka = "\u2654".charAt(0);
                                                break;
                                            case 'Q':
                                                figurka = "\u2655".charAt(0);
                                                break;
                                            case 'R':
                                                figurka = "\u2656".charAt(0);
                                                break;
                                            case 'B':
                                                figurka = "\u2657".charAt(0);
                                                break;
                                            case 'N':
                                                figurka = "\u2658".charAt(0);
                                                break;
                                            case 'P':
                                                figurka = "\u2659".charAt(0);
                                                break;
                                            case 'k':
                                                figurka = "\u265A".charAt(0);
                                                break;
                                            case 'q':
                                                figurka = "\u265B".charAt(0);
                                                break;
                                            case 'r':
                                                figurka = "\u265C".charAt(0);
                                                break;
                                            case 'b':
                                                figurka = "\u265D".charAt(0);
                                                break;
                                            case 'n':
                                                figurka = "\u265E".charAt(0);
                                                break;
                                            case 'p':
                                                figurka = "\u265F".charAt(0);
                                                break;
                                        }
                                        if (prze == false) {
                                            if (ruchB == false) {
                                                if ((stop.charAt(1) == '8') && (promo != ' ') && (promocja)) {
                                                    if (bicie == false) {
                                                        jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ". P" + start + "-" + stop + "=" + promo) : (movenr + ".  \u2659" + start + "-" + stop + "=" + promoSymbol));
                                                        ruch = "P" + start + "-" + stop + "=" + promo;
                                                        ruchS = "\u2659" + start + "-" + stop + "=" + promoSymbol;
                                                    } else {
                                                        jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ". P" + start + "x" + stop + "=" + promo) : (movenr + ".  \u2659" + start + "x" + stop + "=" + promoSymbol));
                                                        ruch = "P" + start + "x" + stop + "=" + promo;
                                                        ruchS = "\u2659" + start + "x" + stop + "=" + promoSymbol;
                                                    }
                                                } else {
                                                    if (bicie == false) {
                                                        jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ".  " + symbol + start + "-" + stop) : (movenr + ".  " + figurka + start + "-" + stop));

                                                        ruch = symbol + start + "-" + stop;
                                                        ruchS = figurka + start + "-" + stop;
                                                    } else {
                                                        if (dokonanoEP) {
                                                            jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ".  " + symbol + start + "x" + stop + "EP") : (movenr + ".  " + figurka + start + "x" + stop + "EP"));
                                                        } else {
                                                            jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ".  " + symbol + start + "x" + stop) : (movenr + ".  " + figurka + start + "x" + stop));
                                                        }
                                                        ruch = symbol + start + "x" + stop;
                                                        ruchS = figurka + start + "x" + stop;
                                                    }
                                                }
                                            } else {
                                                if ((stop.charAt(1) == '1') && (promo != ' ') && (promocja)) {
                                                    if (bicie == false) {
                                                        jTextArea3.append(!jCheckBox1.isSelected() ? ("    p" + start + "-" + stop + "=" + promo) : ("    \u265F" + start + "-" + stop + "=" + promoSymbol));
                                                        ruch = "p" + start + "-" + stop + "=" + promo;
                                                    } else {
                                                        jTextArea3.append(!jCheckBox1.isSelected() ? ("    p" + start + "x" + stop + "=" + promo) : ("    \u265F" + start + "x" + stop + "=" + promoSymbol));
                                                        ruch = "p" + start + "x" + stop + "=" + promo;
                                                    }
                                                    ruchS = "\u265F" + start + "x" + stop + "=" + promoSymbol;
                                                } else {
                                                    if (bicie == false) {
                                                        jTextArea3.append(!jCheckBox1.isSelected() ? ("    " + symbol + start + "-" + stop) : ("    " + figurka + start + "-" + stop));
                                                        ruch = symbol + start + "-" + stop;
                                                        ruchS = figurka + start + "-" + stop;
                                                    } else {
                                                        if (dokonanoEP) {
                                                            jTextArea3.append(!jCheckBox1.isSelected() ? ("  " + symbol + start + "x" + stop + "EP") : ("  " + figurka + start + "x" + stop + "EP"));

                                                        } else {
                                                            jTextArea3.append(!jCheckBox1.isSelected() ? ("  " + symbol + start + "x" + stop) : ("  " + figurka + start + "x" + stop));
                                                        }
                                                        ruch = symbol + start + "x" + stop + ((dokonanoEP) ? "EP" : "");
                                                        ruchS = figurka + start + "x" + stop + ((dokonanoEP) ? "EP" : "");

                                                    }
                                                }
                                                movenr = movenr + 1;
                                            }
                                        }

                                        if (ruchB) {
                                            jTextArea3.append("\n");
                                        }
                                        ruchy_literowe.add(ruch);
                                        ruchy_syboliczne.add(ruchS);
                                        jTextArea3.setCaretPosition(jTextArea3.getDocument().getLength());
                                        if (siec) {
                                            try {
                                                msgwy = ruch;
                                                out.writeUTF(msgwy + " Przeciwnik");
                                            } catch (IOException ex) {
                                                Logger.getLogger(SzachowaArena.class
                                                        .getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }
                                        if (bicie || (promocja || (symbol == 'P' || symbol == 'p'))) {
                                            dolicz = false;
                                            zasada50 = 0;
                                            bicie = false;
                                        } else {
                                            if (dolicz) {
                                                zasada50 = (byte) (zasada50 + 1);
                                                dolicz = false;
                                            } else {
                                                dolicz = true;
                                            }
                                        }
                                        if (lokalK[0] != lokalS[0] || lokalK[1] != lokalS[1]) {
                                            String tmp3;
                                            int powtorki = 0;
                                            tmp3 = "";
                                            for (int x = 0; x < 8; x++) {
                                                for (int y = 0; y < 8; y++) {
                                                    tmp3 = tmp3.concat(String.valueOf(ust[x][y]));
                                                }
                                            }
                                            tmp3 = tmp3.concat(" " + ruchB + " " + przelotcan + " " + wleft + " " + wright + " " + bleft + " " + bright);
                                            historia.add(tmp3);
                                            Collections.sort(historia);
                                            if (historia.size() > 2) {
                                                for (int i = 1; i < historia.size(); i++) {
                                                    if (historia.get(i).equals(historia.get(i - 1))) {
                                                        powtorki = powtorki + 1;
                                                        if (powtorki == 2) {
                                                            if (czasgry != -1) {
                                                                whitetime.interrupt();
                                                                blacktime.interrupt();
                                                            }

                                                            JOptionPane.showMessageDialog(rootPane, "3-krotne powtórzenie pozycji. \nREMIS!", "Zasada", JOptionPane.WARNING_MESSAGE);
                                                            remis();
                                                        }
                                                    } else {
                                                        powtorki = 0;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            promo = ' ';
                            znak_promocji = ' ';
                            promocja = false;
                            roch = false;
                            dokonanoEP = false;
                            dobierz_kursor_na_przycisku(' ', null);
                            setCursor(Cursor.getDefaultCursor());
                            dobierz_kursor_na_przycisku(' ', null);

                        }
                    }
                }
            }
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    kontrolamat[i][j] = ust[i][j];
                    System.out.print("[" + ust[i][j] + "]");
                }
                System.out.println();
            }
            if ((Generator.generuj_posuniecia_antyszach(kontrolamat, ruchB, przelotcan, kolumna).isEmpty())
                    || ((ruchB && krole_biale == 0 && ciezkieB == 0 && lekkieB == 0 && pionB == 0)
                    || (!ruchB && krole_czarne == 0 && ciezkieC == 0 && lekkieC == 0 && pionC == 0))) {
                if (czasgry != -1) {
                    whitetime.interrupt();
                    blacktime.interrupt();
                }
                JOptionPane.showMessageDialog(rootPane, (ruchB ? "Koniec gry. Wygrały białe" : "Koniec gry. Wygrały czarne"), "Ostrzeżenie",
                        JOptionPane.WARNING_MESSAGE);
                kapitulacja();
            }

            if (zasada50 == 50 && krolS == false && (hodu || protectme || hitme)) {
                if (czasgry != -1) {
                    whitetime.interrupt();
                    blacktime.interrupt();
                }
                JOptionPane.showMessageDialog(rootPane, "zasada 50 ruchów.(50 ruchów po obu stronach bez bicia lub ruchu pionem). \nREMIS!", "Zasada", JOptionPane.WARNING_MESSAGE);
                remis();
            }
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    odwrotna[i][j] = ust[7 - i][7 - j];
                }
            }

        }
        pomoc_ruch = ruchB ? Color.blue : Color.red;
    }

    private int[] dobierz_wspolrzedne(String start) {
        int[] wynik = new int[2];
        wynik[0] = 0;
        wynik[1] = 0;
        switch (start) {
            case "A1":
                wynik[0] = 0;
                wynik[1] = 0;
                return wynik;
            case "A2":
                wynik[0] = 1;
                wynik[1] = 0;
                return wynik;
            case "A3":
                wynik[0] = 2;
                wynik[1] = 0;
                return wynik;
            case "A4":
                wynik[0] = 3;
                wynik[1] = 0;
                return wynik;
            case "A5":
                wynik[0] = 4;
                wynik[1] = 0;
                return wynik;
            case "A6":
                wynik[0] = 5;
                wynik[1] = 0;
                return wynik;
            case "A7":
                wynik[0] = 6;
                wynik[1] = 0;
                return wynik;
            case "A8":
                wynik[0] = 7;
                wynik[1] = 0;
                return wynik;
            case "B1":
                wynik[0] = 0;
                wynik[1] = 1;
                return wynik;
            case "B2":
                wynik[0] = 1;
                wynik[1] = 1;
                return wynik;
            case "B3":
                wynik[0] = 2;
                wynik[1] = 1;
                return wynik;
            case "B4":
                wynik[0] = 3;
                wynik[1] = 1;
                return wynik;
            case "B5":
                wynik[0] = 4;
                wynik[1] = 1;
                return wynik;
            case "B6":
                wynik[0] = 5;
                wynik[1] = 1;
                return wynik;
            case "B7":
                wynik[0] = 6;
                wynik[1] = 1;
                return wynik;
            case "B8":
                wynik[0] = 7;
                wynik[1] = 1;
                return wynik;
            case "C1":
                wynik[0] = 0;
                wynik[1] = 2;
                return wynik;
            case "C2":
                wynik[0] = 1;
                wynik[1] = 2;
                return wynik;
            case "C3":
                wynik[0] = 2;
                wynik[1] = 2;
                return wynik;
            case "C4":
                wynik[0] = 3;
                wynik[1] = 2;
                return wynik;
            case "C5":
                wynik[0] = 4;
                wynik[1] = 2;
                return wynik;
            case "C6":
                wynik[0] = 5;
                wynik[1] = 2;
                return wynik;
            case "C7":
                wynik[0] = 6;
                wynik[1] = 2;
                return wynik;
            case "C8":
                wynik[0] = 7;
                wynik[1] = 2;
                return wynik;
            case "D1":
                wynik[0] = 0;
                wynik[1] = 3;
                return wynik;
            case "D2":
                wynik[0] = 1;
                wynik[1] = 3;
                return wynik;
            case "D3":
                wynik[0] = 2;
                wynik[1] = 3;
                return wynik;
            case "D4":
                wynik[0] = 3;
                wynik[1] = 3;
                return wynik;
            case "D5":
                wynik[0] = 4;
                wynik[1] = 3;
                return wynik;
            case "D6":
                wynik[0] = 5;
                wynik[1] = 3;
                return wynik;
            case "D7":
                wynik[0] = 6;
                wynik[1] = 3;
                return wynik;
            case "D8":
                wynik[0] = 7;
                wynik[1] = 3;
                return wynik;
            case "E1":
                wynik[0] = 0;
                wynik[1] = 4;
                return wynik;
            case "E2":
                wynik[0] = 1;
                wynik[1] = 4;
                return wynik;
            case "E3":
                wynik[0] = 2;
                wynik[1] = 4;
                return wynik;
            case "E4":
                wynik[0] = 3;
                wynik[1] = 4;
                return wynik;
            case "E5":
                wynik[0] = 4;
                wynik[1] = 4;
                return wynik;
            case "E6":
                wynik[0] = 5;
                wynik[1] = 4;
                return wynik;
            case "E7":
                wynik[0] = 6;
                wynik[1] = 4;
                return wynik;
            case "E8":
                wynik[0] = 7;
                wynik[1] = 4;
                return wynik;
            case "F1":
                wynik[0] = 0;
                wynik[1] = 5;
                return wynik;
            case "F2":
                wynik[0] = 1;
                wynik[1] = 5;
                return wynik;
            case "F3":
                wynik[0] = 2;
                wynik[1] = 5;
                return wynik;
            case "F4":
                wynik[0] = 3;
                wynik[1] = 5;
                return wynik;
            case "F5":
                wynik[0] = 4;
                wynik[1] = 5;
                return wynik;
            case "F6":
                wynik[0] = 5;
                wynik[1] = 5;
                return wynik;
            case "F7":
                wynik[0] = 6;
                wynik[1] = 5;
                return wynik;
            case "F8":
                wynik[0] = 7;
                wynik[1] = 5;
                return wynik;
            case "G1":
                wynik[0] = 0;
                wynik[1] = 6;
                return wynik;
            case "G2":
                wynik[0] = 1;
                wynik[1] = 6;
                return wynik;
            case "G3":
                wynik[0] = 2;
                wynik[1] = 6;
                return wynik;
            case "G4":
                wynik[0] = 3;
                wynik[1] = 6;
                return wynik;
            case "G5":
                wynik[0] = 4;
                wynik[1] = 6;
                return wynik;
            case "G6":
                wynik[0] = 5;
                wynik[1] = 6;
                return wynik;
            case "G7":
                wynik[0] = 6;
                wynik[1] = 6;
                return wynik;
            case "G8":
                wynik[0] = 7;
                wynik[1] = 6;
                return wynik;
            case "H1":
                wynik[0] = 0;
                wynik[1] = 7;
                return wynik;
            case "H2":
                wynik[0] = 1;
                wynik[1] = 7;
                return wynik;
            case "H3":
                wynik[0] = 2;
                wynik[1] = 7;
                return wynik;
            case "H4":
                wynik[0] = 3;
                wynik[1] = 7;
                return wynik;
            case "H5":
                wynik[0] = 4;
                wynik[1] = 7;
                return wynik;
            case "H6":
                wynik[0] = 5;
                wynik[1] = 7;
                return wynik;
            case "H7":
                wynik[0] = 6;
                wynik[1] = 7;
                return wynik;
            case "H8":
                wynik[0] = 7;
                wynik[1] = 7;
                return wynik;
        }
        return wynik;
    }

    private void mgla(Object pole) {
        JButton BUTTON = (JButton) pole;
        byte pomocx = 0, pomocy = 0;
        char pomoc2, pomoc3;
        if (polestart == false) {
            pomocs = BUTTON.getName();
            pomoc2 = pomocs.charAt(0);
            pomoc3 = pomocs.charAt(1);
            if (odwrot == false) {
                switch (pomoc2) {
                    case 'A':
                        pomocx = 1;
                        break;
                    case 'B':
                        pomocx = 2;
                        break;
                    case 'C':
                        pomocx = 3;
                        break;
                    case 'D':
                        pomocx = 4;
                        break;
                    case 'E':
                        pomocx = 5;
                        break;
                    case 'F':
                        pomocx = 6;
                        break;
                    case 'G':
                        pomocx = 7;
                        break;
                    case 'H':
                        pomocx = 8;
                        break;
                }
                switch (pomoc3) {
                    case '1':
                        pomocy = 1;
                        break;
                    case '2':
                        pomocy = 2;
                        break;
                    case '3':
                        pomocy = 3;
                        break;
                    case '4':
                        pomocy = 4;
                        break;
                    case '5':
                        pomocy = 5;
                        break;
                    case '6':
                        pomocy = 6;
                        break;
                    case '7':
                        pomocy = 7;
                        break;
                    case '8':
                        pomocy = 8;
                        break;
                }
            } else {
                switch (pomoc2) {
                    case 'A':
                        pomocx = 8;
                        break;
                    case 'B':
                        pomocx = 7;
                        break;
                    case 'C':
                        pomocx = 6;
                        break;
                    case 'D':
                        pomocx = 5;
                        break;
                    case 'E':
                        pomocx = 4;
                        break;
                    case 'F':
                        pomocx = 3;
                        break;
                    case 'G':
                        pomocx = 2;
                        break;
                    case 'H':
                        pomocx = 1;
                        break;
                }
                switch (pomoc3) {
                    case '1':
                        pomocy = 8;
                        break;
                    case '2':
                        pomocy = 7;
                        break;
                    case '3':
                        pomocy = 6;
                        break;
                    case '4':
                        pomocy = 5;
                        break;
                    case '5':
                        pomocy = 4;
                        break;
                    case '6':
                        pomocy = 3;
                        break;
                    case '7':
                        pomocy = 2;
                        break;
                    case '8':
                        pomocy = 1;
                        break;
                }
            }
            lokalS[0] = pomocx;
            lokalS[1] = pomocy;

            symbol = ust[pomocy - 1][pomocx - 1];
            if (symbol == 'K' || symbol == 'Q' || symbol == 'R' || symbol == 'B' || symbol == 'N' || symbol == 'P' || symbol == 'A') {
                pomoci1 = 'W';
            } else {
                pomoci1 = 'B';
            }
            if ((pomoci1 == 'W' && ruchB) || (pomoci1 == 'B' && ruchB == false)) {
                zmien = false;
                nazwapola = BUTTON.getName();
                pomoc5 = BUTTON.getIcon();
                cursor = BUTTON.getIcon();
                pomoc2 = pomocs.charAt(0);
                start = pomocs;
                BUTTON.setIcon(null);
                pomoc3 = pomocs.charAt(1);
                if (odwrot == false) {
                    switch (pomoc2) {
                        case 'A':
                            pomocx = 1;
                            break;
                        case 'B':
                            pomocx = 2;
                            break;
                        case 'C':
                            pomocx = 3;
                            break;
                        case 'D':
                            pomocx = 4;
                            break;
                        case 'E':
                            pomocx = 5;
                            break;
                        case 'F':
                            pomocx = 6;
                            break;
                        case 'G':
                            pomocx = 7;
                            break;
                        case 'H':
                            pomocx = 8;
                            break;
                    }
                    switch (pomoc3) {
                        case '1':
                            pomocy = 1;
                            break;
                        case '2':
                            pomocy = 2;
                            break;
                        case '3':
                            pomocy = 3;
                            break;
                        case '4':
                            pomocy = 4;
                            break;
                        case '5':
                            pomocy = 5;
                            break;
                        case '6':
                            pomocy = 6;
                            break;
                        case '7':
                            pomocy = 7;
                            break;
                        case '8':
                            pomocy = 8;
                            break;
                    }
                } else {
                    switch (pomoc2) {
                        case 'A':
                            pomocx = 8;
                            break;
                        case 'B':
                            pomocx = 7;
                            break;
                        case 'C':
                            pomocx = 6;
                            break;
                        case 'D':
                            pomocx = 5;
                            break;
                        case 'E':
                            pomocx = 4;
                            break;
                        case 'F':
                            pomocx = 3;
                            break;
                        case 'G':
                            pomocx = 2;
                            break;
                        case 'H':
                            pomocx = 1;
                            break;
                    }
                    switch (pomoc3) {
                        case '1':
                            pomocy = 8;
                            break;
                        case '2':
                            pomocy = 7;
                            break;
                        case '3':
                            pomocy = 6;
                            break;
                        case '4':
                            pomocy = 5;
                            break;
                        case '5':
                            pomocy = 4;
                            break;
                        case '6':
                            pomocy = 3;
                            break;
                        case '7':
                            pomocy = 2;
                            break;
                        case '8':
                            pomocy = 1;
                            break;
                    }
                }
                lokalS[0] = pomocx;
                lokalS[1] = pomocy;
                symbol = ust[pomocy - 1][pomocx - 1];
                if ((symbol == 'P' && lokalS[1] == 7) || (symbol == 'p' && lokalS[1] == 2)) {
                    promo = ' ';
                }
                dobierz_kursor(symbol);
                ust[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                polestart = true;
                koniecanimacji = false;
                if (wzor == false) {
                    animacja anim1 = new animacja(2, polestart, zmien, BUTTON, pomocs);
                }
                char[][] temp1 = new char[8][8];
                for (int i = 0; i < 8; i++) {
                    System.arraycopy(ust[i], 0, temp1[i], 0, 8);
                }
                temp1[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                int[] temp2 = new int[2];
                temp2[0] = lokalS[1] - 1;
                temp2[1] = lokalS[0] - 1;
                if (opcje_pomoc == 1 || opcje_pomoc == 2) {
                    System.out.println("opcja" + tryb);
                    for (Ruch ruch : Generator.generuj_posuniecia((temp1), ruchB, przelotcan,
                            bleft, bright, wleft, wright, kingrochB, kingrochC, kol, true, symbol, temp2, false, true)) {
                        if (!ruch.toString().startsWith("O-O")) {
                            JButton cel = dobierzprzycisk(ruch.toString().substring(4, 6), odwrot);
                            cel.setBorder(new LineBorder(pomoc_ruch, 4));
                        } else {
                            if (ruchB) {
                                if (ruch.toString().equals("O-O")) {
                                    dobierzprzycisk("G1", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                } else {
                                    dobierzprzycisk("C1", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                }
                            } else {
                                if (ruch.toString().equals("O-O")) {
                                    dobierzprzycisk("G8", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                } else {
                                    dobierzprzycisk("C8", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                }
                            }
                        }
                    }

                }
            } else {
                if (siec == false && symulacja == false) {
                    if (czasgry == -1 && siec == false && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                        if (ruchB) {
                            JOptionPane.showMessageDialog(rootPane, "BŁĄD! AKTUALNY RUCH MAJĄ BIAŁE", "bład koloru",
                                    JOptionPane.WARNING_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "BŁĄD! AKTUALNY RUCH MAJĄ CZARNE", "błąd koloru",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        Toolkit.getDefaultToolkit().beep();
                    }
                    styl(kolor_zestaw, kroj_zestaw, kolor_plansza);

                }
            }
        } else {
            pomoc3 = BUTTON.getName().charAt(1);
            pomoc2 = BUTTON.getName().charAt(0);
            if (odwrot == false) {
                switch (pomoc2) {
                    case 'A':
                        pomocx = 1;
                        break;
                    case 'B':
                        pomocx = 2;
                        break;
                    case 'C':
                        pomocx = 3;
                        break;
                    case 'D':
                        pomocx = 4;
                        break;
                    case 'E':
                        pomocx = 5;
                        break;
                    case 'F':
                        pomocx = 6;
                        break;
                    case 'G':
                        pomocx = 7;
                        break;
                    case 'H':
                        pomocx = 8;
                        break;
                }
                switch (pomoc3) {
                    case '1':
                        pomocy = 1;
                        break;
                    case '2':
                        pomocy = 2;
                        break;
                    case '3':
                        pomocy = 3;
                        break;
                    case '4':
                        pomocy = 4;
                        break;
                    case '5':
                        pomocy = 5;
                        break;
                    case '6':
                        pomocy = 6;
                        break;
                    case '7':
                        pomocy = 7;
                        break;
                    case '8':
                        pomocy = 8;
                        break;
                }
            } else {
                switch (pomoc2) {
                    case 'A':
                        pomocx = 8;
                        break;
                    case 'B':
                        pomocx = 7;
                        break;
                    case 'C':
                        pomocx = 6;
                        break;
                    case 'D':
                        pomocx = 5;
                        break;
                    case 'E':
                        pomocx = 4;
                        break;
                    case 'F':
                        pomocx = 3;
                        break;
                    case 'G':
                        pomocx = 2;
                        break;
                    case 'H':
                        pomocx = 1;
                        break;
                }
                switch (pomoc3) {
                    case '1':
                        pomocy = 8;
                        break;
                    case '2':
                        pomocy = 7;
                        break;
                    case '3':
                        pomocy = 6;
                        break;
                    case '4':
                        pomocy = 5;
                        break;
                    case '5':
                        pomocy = 4;
                        break;
                    case '6':
                        pomocy = 3;
                        break;
                    case '7':
                        pomocy = 2;
                        break;
                    case '8':
                        pomocy = 1;
                        break;
                }
            }
            lokalK[0] = pomocx;
            lokalK[1] = pomocy;
            if (BUTTON.getIcon() == null || ust[lokalK[1] - 1][lokalK[0] - 1] == ' ') {
                pomoce = BUTTON.getName();
                stop = pomoce;
                pomoc3 = pomoce.charAt(1);
                pomoc2 = pomoce.charAt(0);
                if (odwrot == false) {
                    switch (pomoc2) {
                        case 'A':
                            pomocx = 1;
                            break;
                        case 'B':
                            pomocx = 2;
                            break;
                        case 'C':
                            pomocx = 3;
                            break;
                        case 'D':
                            pomocx = 4;
                            break;
                        case 'E':
                            pomocx = 5;
                            break;
                        case 'F':
                            pomocx = 6;
                            break;
                        case 'G':
                            pomocx = 7;
                            break;
                        case 'H':
                            pomocx = 8;
                            break;
                    }
                    switch (pomoc3) {
                        case '1':
                            pomocy = 1;
                            break;
                        case '2':
                            pomocy = 2;
                            break;
                        case '3':
                            pomocy = 3;
                            break;
                        case '4':
                            pomocy = 4;
                            break;
                        case '5':
                            pomocy = 5;
                            break;
                        case '6':
                            pomocy = 6;
                            break;
                        case '7':
                            pomocy = 7;
                            break;
                        case '8':
                            pomocy = 8;
                            break;
                    }
                } else {
                    switch (pomoc2) {
                        case 'A':
                            pomocx = 8;
                            break;
                        case 'B':
                            pomocx = 7;
                            break;
                        case 'C':
                            pomocx = 6;
                            break;
                        case 'D':
                            pomocx = 5;
                            break;
                        case 'E':
                            pomocx = 4;
                            break;
                        case 'F':
                            pomocx = 3;
                            break;
                        case 'G':
                            pomocx = 2;
                            break;
                        case 'H':
                            pomocx = 1;
                            break;
                    }
                    switch (pomoc3) {
                        case '1':
                            pomocy = 8;
                            break;
                        case '2':
                            pomocy = 7;
                            break;
                        case '3':
                            pomocy = 6;
                            break;
                        case '4':
                            pomocy = 5;
                            break;
                        case '5':
                            pomocy = 4;
                            break;
                        case '6':
                            pomocy = 3;
                            break;
                        case '7':
                            pomocy = 2;
                            break;
                        case '8':
                            pomocy = 1;
                            break;
                    }
                }
                lokalK[0] = pomocx;
                lokalK[1] = pomocy;
                if ((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) {
                    if (symbol == 'R' || symbol == 'r') {
                        switch (symbol) {
                            case 'R':
                                if (lokalS[0] == 8 && lokalS[1] == 1
                                        && RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, bicie, przelotcan, kol, true)) {
                                    wright = false;
                                    if (!wright && !wleft) {
                                        kingrochB = false;
                                    }
                                } else {
                                    if (lokalS[0] == 1 && lokalS[1] == 1
                                            && RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, bicie, przelotcan, kol, true)) {
                                        wleft = false;
                                        if (!wright && !wleft) {
                                            kingrochB = false;
                                        }
                                    }
                                }
                                break;
                            case 'r':
                                if (lokalS[0] == 8 && lokalS[1] == 8
                                        && RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, bicie, przelotcan, kol, true)) {
                                    bright = false;

                                } else {
                                    if (lokalS[0] == 1 && lokalS[1] == 8
                                            && RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, bicie, przelotcan, kol, true)) {
                                        bleft = false;

                                    }
                                }
                                break;
                        }
                        if (!bright && !bleft) {
                            kingrochC = false;
                        }
                        if (!wright && !wleft) {
                            kingrochB = false;
                        }
                    }
                    //System.out.println(wright + " " + wleft);
                    // System.out.println(bright + " " + bleft);
                    atak = krolS;
                    if ((symbol == 'K' || symbol == 'k') && atak == false && ((ruchB && kingrochB && (((lokalS[0] - lokalK[0]) == -2 && ust[0][5] == ' ' && ust[0][6] == ' ' && wright) || (lokalS[0] - lokalK[0] == 2 && ust[0][3] == ' ' && ust[0][2] == ' ' && ust[0][1] == ' ' && wleft)))
                            || (ruchB == false && kingrochC && (((lokalS[0] - lokalK[0]) == -2 && ust[7][5] == ' ' && ust[7][6] == ' ' && bright) || (lokalS[0] - lokalK[0] == 2 && ust[7][3] == ' ' && ust[7][2] == ' ' && ust[7][1] == ' ' && bleft))))) {
                        if (ruchB) {
                            symbol = 'K';
                        } else {
                            symbol = 'k';
                        }
                        wyk = true;
                        zmien = true;
                        ust[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                        if (ruchB) {
                            ust[lokalK[1] - 1][lokalK[0] - 1] = 'K';
                        } else {
                            ust[lokalK[1] - 1][lokalK[0] - 1] = 'k';
                        }
                        roch = true;
                        if (ruchB) {
                            kingrochB = false;
                        } else {
                            kingrochC = false;
                        }
                        polestart = false;
                        wyk = false;
                        zmien = true;
                        BUTTON.setIcon(cursor);
                        if (ruchB) {
                            kon = true;
                            ust[0][4] = ' ';
                            if (lokalS[0] - lokalK[0] == -2) {
                                ust[0][5] = 'R';
                                ust[0][7] = ' ';
                                if (odwrot == false) {
                                    cursor = H1.getIcon();
                                    H1.setIcon(null);
                                    F1.setIcon(cursor);
                                } else {
                                    cursor = A8.getIcon();
                                    A8.setIcon(null);
                                    C8.setIcon(cursor);
                                }
                                ust[0][6] = 'K';
                            } else {
                                ust[0][3] = 'R';
                                ust[0][0] = ' ';
                                if (odwrot == false) {
                                    cursor = A1.getIcon();
                                    A1.setIcon(null);
                                    D1.setIcon(cursor);
                                } else {
                                    cursor = H8.getIcon();
                                    H8.setIcon(null);
                                    F8.setIcon(cursor);
                                }
                                ust[0][2] = 'K';
                            }
                            kingrochB = false;
                            polestart = false;
                            roch = true;
                            dokonano_RB = true;
                            ruchB = ruchB != true;
                            kontrolamat = ust;
                            krolS = RuchZagrozenie_kontrola.szach(kontrolamat, ruchB);
                        } else {
                            kon = true;
                            ust[7][4] = ' ';
                            if (lokalS[0] - lokalK[0] == -2) {
                                ust[7][5] = 'r';
                                ust[7][7] = ' ';
                                if (odwrot == false) {
                                    cursor = H8.getIcon();
                                    H8.setIcon(null);
                                    F8.setIcon(cursor);
                                } else {
                                    cursor = A1.getIcon();
                                    A1.setIcon(null);
                                    C1.setIcon(cursor);
                                }
                                ust[7][6] = 'k';
                            } else {
                                ust[7][3] = 'r';
                                ust[7][0] = ' ';
                                if (odwrot == false) {
                                    cursor = A8.getIcon();
                                    A8.setIcon(null);
                                    C8.setIcon(cursor);
                                } else {
                                    cursor = H1.getIcon();
                                    H1.setIcon(null);
                                    F1.setIcon(cursor);
                                }
                                ust[7][2] = 'k';
                            }
                            polestart = false;
                            kingrochC = false;
                            dokonano_RC = true;
                            ruchB = ruchB != true;
                            kontrolamat = ust;
                        }
                        for (int i = 0; i < 8; i++) {
                            System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                        }
                        for (int i = 0; i < 8; i++) {
                            for (int j = 0; j < 8; j++) {
                                odwrotna[i][j] = ust[7 - i][7 - j];
                            }
                        }
                        /* for (int i = 0; i < 8; i++) {
                                                    for (int j = 0; j < 8; j++) {
                                                        System.out.print("{" + ust[i][j] + "}");
                                                    }
                                                    System.out.println();
                                                }*/
                        for (int i = 0; i < 8; i++) {
                            System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                        }
                        czysc_rame();
                        roch = true;

                    } else {
                        if (lokalK[0] == lokalS[0] && lokalS[1] == lokalK[1]) {
                            koniecanimacji = true;
                            BUTTON.setIcon(cursor);
                            zmien = false;
                            promo = ' ';
                            polestart = false;
                            wyk = false;
                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                            czysc_rame();
                        } else {
                            if (symbol == 'K' || symbol == 'k') {
                                if (((kingrochB == false || (((lokalS[0] - lokalK[0]) != -2) && (lokalS[0] - lokalK[0] != 2)))
                                        || (kingrochC == false || (((lokalS[0] - lokalK[0]) != -2) && (lokalS[0] - lokalK[0] != 2))))) {
                                    polestart = true;
                                    wyk = true;
                                    kontrolka = ust;
                                    kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, kontrolka, ruchB, przelotcan, kol, true);
                                    if (kon) {
                                        zmien = true;
                                        polestart = false;
                                        krolS = false;
                                        if (ruchB) {
                                            kingrochB = false;
                                        } else {
                                            kingrochC = false;
                                        }
                                        BUTTON.setIcon(cursor);
                                        ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                        wyk = true;
                                        pomoc5 = null;
                                    } else {
                                        wyk = false;
                                        polestart = true;
                                        if (czasgry == -1 && siec == false) {
                                            if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                if (checka == false && kon == false) {
                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                            JOptionPane.INFORMATION_MESSAGE);
                                                } else {
                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                            JOptionPane.INFORMATION_MESSAGE);
                                                }

                                                switch (symbol) {
                                                    case 'K':
                                                    case 'k':
                                                        JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'Q':
                                                    case 'q':
                                                        JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'R':
                                                    case 'r':
                                                        JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'B':
                                                    case 'b':
                                                        JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'N':
                                                    case 'n':
                                                        JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                    case 'P':
                                                    case 'p':
                                                        System.out.println("ERR1");
                                                        JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                        break;
                                                }
                                            }
                                        } else {
                                            Toolkit.getDefaultToolkit().beep();
                                        }
                                        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                    }
                                    if (wyk) {
                                        char[][] USTAWIENIE1 = new char[8][8];
                                        polestart = false;
                                        ruchB = ruchB != true;
                                        for (int i = 0; i < 8; i++) {
                                            System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8);
                                        }
                                        for (int i = 0; i < 8; i++) {
                                            System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                        }
                                        for (int i = 0; i < 8; i++) {
                                            for (int j = 0; j < 8; j++) {
                                                odwrotna[i][j] = ust[7 - i][7 - j];
                                            }
                                        }
                                        /*for (int i = 0; i < 8; i++) {
                                                                for (int j = 0; j < 8; j++) {
                                                                    System.out.print("{" + ust[i][j] + "}");
                                                                }
                                                                System.out.println();
                                                            }*/
                                        for (int i = 0; i < 8; i++) {
                                            System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                        }
                                        czysc_rame();
                                        for (int i = 0; i < 8; i++) {
                                            System.arraycopy(USTAWIENIE1[i], 0, ust[i], 0, 8);
                                        }
                                    }
                                } else {
                                    if (czasgry == -1 && siec == false && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                                        JOptionPane.showMessageDialog(rootPane, "BŁĄD ROSZADY!", "Ostrzeżenie",
                                                JOptionPane.WARNING_MESSAGE);
                                    } else {
                                        Toolkit.getDefaultToolkit().beep();
                                    }
                                }
                            } else {
                                kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust.clone(), ruchB, przelotcan, kol, true);
                                if (kon) {
                                    kontrolka = ust.clone();
                                    kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                    kontrolka[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                    zmien = true;
                                }
                                if (kon) {
                                    if ((symbol == 'P' && lokalS[0] == lokalK[0] && lokalS[1] - lokalK[1] == -2)
                                            || (symbol == 'p' && lokalS[0] == lokalK[0] && lokalS[1] - lokalK[1] == 2)) {
                                        przelotcan = true;
                                        kol = lokalS[0];
                                    } else {
                                        if (przelotcan && (symbol == 'p' || symbol == 'P') && Math.abs(lokalS[1] - lokalK[1]) == 1
                                                && ((ruchB && lokalS[1] == 5) || (ruchB == false && lokalS[1] == 4))) {

                                        } else {
                                            kol = 0;
                                        }
                                    }
                                    if (symbol == 'P' || symbol == 'p') {
                                        if ((przelotcan && ((lokalK[0] == kol && symbol == 'P' && lokalS[1] - lokalK[1] == -1 && lokalS[0] != lokalK[0] && lokalS[1] == 5)
                                                || (lokalK[0] == kol && symbol == 'p' && lokalS[1] - lokalK[1] == 1 && lokalS[0] != lokalK[0] && lokalS[1] == 4)))) {
                                            kontrolka = ust;
                                            kontrolka[lokalS[1] - 1][kol - 1] = ' ';
                                            kontrolka[lokalK[1] - 1][kol - 1] = symbol;
                                            kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                            kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, ruchB, przelotcan, kol, true);
                                            przelot = false;
                                            dokonanoEP = true;
                                            BUTTON.setIcon(cursor);
                                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                            if (ruchB == false) {
                                                pionB = (byte) (pionB - 1);
                                            } else {
                                                pionC = (byte) (pionC - 1);
                                            }
                                            switch (lokalK[0]) {
                                                case 1:
                                                    if (ruchB) {
                                                        ust[4][0] = ' ';
                                                        A5.setIcon(null);
                                                    } else {
                                                        ust[3][0] = ' ';
                                                        A4.setIcon(null);
                                                    }
                                                    break;
                                                case 2:
                                                    if (ruchB) {
                                                        ust[4][1] = ' ';
                                                        B5.setIcon(null);
                                                    } else {
                                                        ust[3][1] = ' ';
                                                        B4.setIcon(null);
                                                    }
                                                    break;
                                                case 3:
                                                    if (ruchB) {
                                                        ust[4][2] = ' ';
                                                        C5.setIcon(null);
                                                    } else {
                                                        ust[3][2] = ' ';
                                                        C4.setIcon(null);
                                                    }
                                                    break;
                                                case 4:
                                                    if (ruchB) {
                                                        ust[4][3] = ' ';
                                                        D5.setIcon(null);
                                                    } else {
                                                        ust[3][3] = ' ';
                                                        D4.setIcon(null);
                                                    }
                                                    break;
                                                case 5:
                                                    if (ruchB) {
                                                        ust[4][4] = ' ';
                                                        E5.setIcon(null);
                                                    } else {
                                                        ust[3][4] = ' ';
                                                        E4.setIcon(null);
                                                    }
                                                    break;
                                                case 6:
                                                    if (ruchB) {
                                                        ust[4][5] = ' ';
                                                        F5.setIcon(null);
                                                    } else {
                                                        ust[3][5] = ' ';
                                                        F4.setIcon(null);
                                                    }
                                                    break;
                                                case 7:
                                                    if (ruchB) {
                                                        ust[4][6] = ' ';
                                                        G5.setIcon(null);
                                                    } else {
                                                        ust[3][6] = ' ';
                                                        G4.setIcon(null);
                                                    }
                                                    break;
                                                case 8:
                                                    if (ruchB) {
                                                        ust[4][7] = ' ';
                                                        H5.setIcon(null);
                                                    } else {
                                                        ust[3][7] = ' ';
                                                        H4.setIcon(null);
                                                    }
                                                    break;
                                            }
                                            wyk = true;
                                            prze = true;
                                            bicie = true;
                                        }
                                    } else {
                                        przelotcan = false;
                                    }
                                    ust = kontrolka;
                                    polestart = false;
                                    wyk = true;
                                } else {
                                    if (czasgry == -1 && siec == false) {
                                        JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                JOptionPane.INFORMATION_MESSAGE);
                                        if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                            switch (symbol) {
                                                case 'K':
                                                case 'k':
                                                    JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                            JOptionPane.INFORMATION_MESSAGE, cursor);
                                                    break;
                                                case 'Q':
                                                case 'q':
                                                    JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                            JOptionPane.INFORMATION_MESSAGE, cursor);
                                                    break;
                                                case 'R':
                                                case 'r':
                                                    JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                            JOptionPane.INFORMATION_MESSAGE, cursor);
                                                    break;
                                                case 'B':
                                                case 'b':
                                                    JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                            JOptionPane.INFORMATION_MESSAGE, cursor);
                                                    break;
                                                case 'N':
                                                case 'n':
                                                    JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                            + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                            JOptionPane.INFORMATION_MESSAGE, cursor);
                                                    break;
                                                case 'P':
                                                case 'p':
                                                    JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                            + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                            JOptionPane.INFORMATION_MESSAGE, cursor);
                                                    JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                            + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                            + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                            JOptionPane.INFORMATION_MESSAGE, cursor);
                                                    break;
                                            }
                                        }
                                    } else {
                                        Toolkit.getDefaultToolkit().beep();
                                    }
                                    kontrolka[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                                    kontrolka[lokalK[1] - 1][lokalK[0] - 1] = ' ';
                                    polestart = true;
                                    wyk = false;
                                    przelot = false;
                                    styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                }
                                if (wyk) {
                                    if ((symbol == 'P' && lokalK[1] == 8) || (symbol == 'p' && lokalK[1] == 1)) {
                                        promocja = true;
                                        Object[] opcjeB = {b1, b2, b3, b4};
                                        Object[] opcjeC = {c1, c2, c3, c4};
                                        if (ruchB) {
                                            pionB = (byte) (pionB - 1);
                                            if (znak_promocji == ' ') {
                                                wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                        JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeB, null);
                                                switch (wybor) {
                                                    case 1:
                                                        symbol = 'R';
                                                        ciezkieB = (byte) (ciezkieB + 1);
                                                        cursor = b2;
                                                        break;
                                                    case 2:
                                                        symbol = 'B';
                                                        lekkieB = (byte) (lekkieB + 1);
                                                        cursor = b3;
                                                        break;
                                                    case 3:
                                                        symbol = 'N';
                                                        lekkieB = (byte) (lekkieB + 1);
                                                        cursor = b4;
                                                        break;
                                                    case 0:
                                                    default:
                                                        symbol = 'Q';
                                                        ciezkieB = (byte) (ciezkieB + 1);
                                                        cursor = b1;
                                                        break;
                                                }
                                            } else {
                                                symbol = znak_promocji;
                                                switch (symbol) {
                                                    case 'Q':
                                                    case 'R':
                                                        ciezkieB = (byte) (ciezkieB + 1);
                                                        break;
                                                    case 'B':
                                                    case 'N':
                                                        lekkieB = (byte) (lekkieB + 1);
                                                        break;
                                                }
                                            }
                                        } else {
                                            pionC = (byte) (pionC - 1);
                                            if (znak_promocji == ' ') {
                                                wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                        JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeC, null);
                                                switch (wybor) {
                                                    case 1:
                                                        symbol = 'r';
                                                        ciezkieC = (byte) (ciezkieC + 1);
                                                        cursor = c2;
                                                        break;
                                                    case 2:
                                                        symbol = 'b';
                                                        lekkieC = (byte) (lekkieC + 1);
                                                        cursor = c3;
                                                        break;
                                                    case 3:
                                                        symbol = 'n';
                                                        lekkieC = (byte) (lekkieC + 1);
                                                        cursor = c4;
                                                        break;
                                                    case 0:
                                                    default:
                                                        symbol = 'q';
                                                        ciezkieC = (byte) (ciezkieC + 1);
                                                        cursor = c1;
                                                        break;
                                                }
                                            } else {
                                                symbol = znak_promocji;
                                                switch (symbol) {
                                                    case 'q':
                                                    case 'r':
                                                        ciezkieC = (byte) (ciezkieC + 1);
                                                        break;
                                                    case 'b':
                                                    case 'n':
                                                        lekkieC = (byte) (lekkieC + 1);
                                                        break;
                                                }
                                            }
                                        }
                                        promo = symbol;
                                    }
                                    if (znak_promocji == ' ') {
                                        BUTTON.setIcon(cursor);
                                    } else {
                                        switch (znak_promocji) {
                                            case 'Q':
                                                BUTTON.setIcon(b1);
                                                break;
                                            case 'R':
                                                BUTTON.setIcon(b2);
                                                break;
                                            case 'B':
                                                BUTTON.setIcon(b3);
                                                break;
                                            case 'N':
                                                BUTTON.setIcon(b4);
                                                break;
                                            case 'q':
                                                BUTTON.setIcon(c1);
                                                break;
                                            case 'r':
                                                BUTTON.setIcon(c2);
                                                break;
                                            case 'b':
                                                BUTTON.setIcon(c3);
                                                break;
                                            case 'n':
                                                BUTTON.setIcon(c4);
                                                break;
                                        }
                                    }
                                    ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                    pomoc5 = null;
                                    char[][] USTAWIENIE1 = new char[8][8];
                                    polestart = false;
                                    ruchB = ruchB != true;
                                    for (int i = 0; i < 8; i++) {
                                        System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8);
                                    }
                                    for (int i = 0; i < 8; i++) {
                                        System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                    }
                                    for (int i = 0; i < 8; i++) {
                                        for (int j = 0; j < 8; j++) {
                                            odwrotna[i][j] = ust[7 - i][7 - j];
                                        }
                                    }

                                    for (int i = 0; i < 8; i++) {
                                        System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                    }
                                    czysc_rame();
                                    bicie = prze;
                                    prze = false;
                                }
                            }
                        }
                    }
                } else {
                    czysc_rame();
                    zmien = false;
                    promo = ' ';
                    koniecanimacji = true;
                    BUTTON.setIcon(cursor);
                    polestart = false;
                    wyk = false;
                    ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                }
            } else {
                char eliminowany;
                pomoce = BUTTON.getName();
                pomoc2 = pomoce.charAt(0);
                pomoc3 = pomoce.charAt(1);
                stop = pomoce;
                if (odwrot == false) {
                    switch (pomoc2) {
                        case 'A':
                            pomocx = 1;
                            break;
                        case 'B':
                            pomocx = 2;
                            break;
                        case 'C':
                            pomocx = 3;
                            break;
                        case 'D':
                            pomocx = 4;
                            break;
                        case 'E':
                            pomocx = 5;
                            break;
                        case 'F':
                            pomocx = 6;
                            break;
                        case 'G':
                            pomocx = 7;
                            break;
                        case 'H':
                            pomocx = 8;
                            break;
                    }
                    switch (pomoc3) {
                        case '1':
                            pomocy = 1;
                            break;
                        case '2':
                            pomocy = 2;
                            break;
                        case '3':
                            pomocy = 3;
                            break;
                        case '4':
                            pomocy = 4;
                            break;
                        case '5':
                            pomocy = 5;
                            break;
                        case '6':
                            pomocy = 6;
                            break;
                        case '7':
                            pomocy = 7;
                            break;
                        case '8':
                            pomocy = 8;
                            break;
                    }
                } else {
                    switch (pomoc2) {
                        case 'A':
                            pomocx = 8;
                            break;
                        case 'B':
                            pomocx = 7;
                            break;
                        case 'C':
                            pomocx = 6;
                            break;
                        case 'D':
                            pomocx = 5;
                            break;
                        case 'E':
                            pomocx = 4;
                            break;
                        case 'F':
                            pomocx = 3;
                            break;
                        case 'G':
                            pomocx = 2;
                            break;
                        case 'H':
                            pomocx = 1;
                            break;
                    }
                    switch (pomoc3) {
                        case '1':
                            pomocy = 8;
                            break;
                        case '2':
                            pomocy = 7;
                            break;
                        case '3':
                            pomocy = 6;
                            break;
                        case '4':
                            pomocy = 5;
                            break;
                        case '5':
                            pomocy = 4;
                            break;
                        case '6':
                            pomocy = 3;
                            break;
                        case '7':
                            pomocy = 2;
                            break;
                        case '8':
                            pomocy = 1;
                            break;
                    }
                }
                lokalK[0] = pomocx;
                lokalK[1] = pomocy;
                eliminowany = ust[lokalK[1] - 1][lokalK[0] - 1];
                switch (eliminowany) {
                    case 'K':
                    case 'Q':
                    case 'R':
                    case 'B':
                    case 'N':
                    case 'P':
                        pomoci2 = 'W';
                        break;
                    case 'k':
                    case 'q':
                    case 'r':
                    case 'b':
                    case 'n':
                    case 'p':
                        pomoci2 = 'B';
                        break;
                    default:
                        pomoci2 = ' ';
                        break;
                }
                if (pomoci1 != pomoci2) {
                    if (lokalK[0] == lokalS[0] && lokalS[1] == lokalK[1]) {
                        koniecanimacji = true;
                        zmien = false;
                        promo = ' ';
                        BUTTON.setIcon(cursor);
                        polestart = false;
                        wyk = false;
                        ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                        czysc_rame();

                    } else {
                        kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, ruchB, przelotcan, kol, true);
                        char[][] tymczas = new char[8][8];
                        for (int i = 0; i < 8; i++) {
                            System.arraycopy(ust[i], 0, tymczas[i], 0, 8);
                        }
                        tymczas[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                        tymczas[lokalK[1] - 1][lokalK[0] - 1] = symbol;

                        if (kon) {
                            krolS = false;
                            bicie = true;
                            switch (eliminowany) {
                                case 'P':
                                    pionB = (byte) (pionB - 1);
                                    break;
                                case 'p':
                                    pionC = (byte) (pionC - 1);
                                    break;
                                case 'N':
                                case 'B':
                                    lekkieB = (byte) (lekkieB - 1);
                                    break;
                                case 'n':
                                case 'b':
                                    lekkieC = (byte) (lekkieC - 1);
                                    break;
                                case 'R':
                                case 'Q':
                                    ciezkieB = (byte) (ciezkieB - 1);
                                    break;
                                case 'r':
                                case 'q':
                                    ciezkieC = (byte) (ciezkieC - 1);
                                    break;
                                case 'k':
                                    krole_czarne = (byte) (krole_czarne - 1);
                                    break;
                                case 'K':
                                    krole_biale = (byte) (krole_biale - 1);
                                    break;
                            }

                            zmien = true;

                            if ((symbol == 'P' && lokalK[1] == 8) || (symbol == 'p' && lokalK[1] == 1)) {
                                promocja = true;
                                Object[] opcjeB = {b1, b2, b3, b4};
                                Object[] opcjeC = {c1, c2, c3, c4};
                                if (ruchB) {
                                    pionB = (byte) (pionB - 1);
                                    if (znak_promocji == ' ') {
                                        wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeB, null);
                                        switch (wybor) {
                                            case 1:
                                                symbol = 'R';
                                                ciezkieB = (byte) (ciezkieB + 1);
                                                cursor = b2;
                                                break;
                                            case 2:
                                                symbol = 'B';
                                                lekkieB = (byte) (lekkieB + 1);
                                                cursor = b3;
                                                break;
                                            case 3:
                                                symbol = 'N';
                                                lekkieB = (byte) (lekkieB + 1);
                                                cursor = b4;
                                                break;
                                            case 0:
                                            default:
                                                symbol = 'Q';
                                                ciezkieB = (byte) (ciezkieB + 1);
                                                cursor = b1;
                                                break;
                                        }
                                    } else {
                                        symbol = znak_promocji;
                                        switch (symbol) {
                                            case 'Q':
                                            case 'R':
                                                ciezkieB = (byte) (ciezkieB + 1);
                                                break;
                                            case 'B':
                                            case 'N':
                                                lekkieB = (byte) (lekkieB + 1);
                                                break;
                                        }
                                    }
                                } else {
                                    pionC = (byte) (pionC - 1);
                                    if (znak_promocji == ' ') {
                                        wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeC, null);
                                        switch (wybor) {
                                            case 1:
                                                symbol = 'r';
                                                ciezkieC = (byte) (ciezkieC + 1);
                                                cursor = c2;
                                                break;
                                            case 2:
                                                symbol = 'b';
                                                lekkieC = (byte) (lekkieC + 1);
                                                cursor = c3;
                                                break;
                                            case 3:
                                                symbol = 'n';
                                                lekkieC = (byte) (lekkieC + 1);
                                                cursor = c4;
                                                break;
                                            default:
                                                symbol = 'q';
                                                ciezkieC = (byte) (ciezkieC + 1);
                                                cursor = c1;
                                                break;
                                        }
                                    } else {
                                        symbol = znak_promocji;
                                        switch (symbol) {
                                            case 'q':
                                            case 'r':
                                                ciezkieC = (byte) (ciezkieC + 1);
                                                break;
                                            case 'b':
                                            case 'n':
                                                lekkieC = (byte) (lekkieC + 1);
                                                break;
                                        }
                                    }
                                }
                                promo = symbol;
                            }
                            if (znak_promocji == ' ') {
                                BUTTON.setIcon(cursor);
                            } else {
                                switch (znak_promocji) {
                                    case 'Q':
                                        BUTTON.setIcon(b1);
                                        break;
                                    case 'R':
                                        BUTTON.setIcon(b2);
                                        break;
                                    case 'B':
                                        BUTTON.setIcon(b3);
                                        break;
                                    case 'N':
                                        BUTTON.setIcon(b4);
                                        break;
                                    case 'q':
                                        BUTTON.setIcon(c1);
                                        break;
                                    case 'r':
                                        BUTTON.setIcon(c2);
                                        break;
                                    case 'b':
                                        BUTTON.setIcon(c3);
                                        break;
                                    case 'n':
                                        BUTTON.setIcon(c4);
                                        break;
                                }
                            }
                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                            pomoc5 = null;
                            polestart = false;
                            wyk = true;
                        } else {

                            wyk = false;
                            polestart = true;
                            if (czasgry == -1 && siec == false) {
                                if (opcje_pomoc == 0 || opcje_pomoc == 2) {

                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                            JOptionPane.INFORMATION_MESSAGE);

                                    switch (symbol) {
                                        case 'K':
                                        case 'k':
                                            JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                        case 'Q':
                                        case 'q':
                                            JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                        case 'R':
                                        case 'r':
                                            JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                        case 'B':
                                        case 'b':
                                            JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                        case 'N':
                                        case 'n':
                                            JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                    + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                        case 'P':
                                        case 'p':
                                            System.out.println("ERR3");
                                            JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                    + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                    + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                    + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                            break;
                                    }
                                }
                            } else {
                                Toolkit.getDefaultToolkit().beep();
                            }
                            //styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                        }
                        if (wyk) {
                            wyk = false;
                            char[][] USTAWIENIE1 = new char[8][8];
                            ruchB = ruchB != true;
                            if ((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) {

                                for (int i = 0; i < 8; i++) {
                                    System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8);
                                }


                                /* for (int i = 0; i < 8; i++) {
                                                        for (int j = 0; j < 8; j++) {
                                                            System.out.print("{" + ust[i][j] + "}");
                                                        }
                                                        System.out.println();
                                                    }*/
                                for (int i = 0; i < 8; i++) {
                                    System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                }
                                czysc_rame();

                            } else {
                                koniecanimacji = true;
                                BUTTON.setIcon(cursor);
                            }
                        }
                    }
                } else {
                    if (lokalS[0] == lokalK[0] && lokalS[1] == lokalK[1]) {
                        czysc_rame();

                        koniecanimacji = true;
                        zmien = false;
                        promo = ' ';
                        BUTTON.setIcon(cursor);
                        polestart = false;
                        wyk = false;
                        ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                    } else {
                        polestart = true;
                        if (czasgry == -1 && siec == false) {
                            if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                        JOptionPane.INFORMATION_MESSAGE);

                                // JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                //       JOptionPane.INFORMATION_MESSAGE);
                                switch (symbol) {
                                    case 'K':
                                    case 'k':
                                        JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                        break;
                                    case 'Q':
                                    case 'q':
                                        JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                        break;
                                    case 'R':
                                    case 'r':
                                        JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                        break;
                                    case 'B':
                                    case 'b':
                                        JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                        break;
                                    case 'N':
                                    case 'n':
                                        JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                        break;
                                    case 'P':
                                    case 'p':
                                        System.out.println("ERR4");
                                        JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                        JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                        break;
                                }
                            }
                        } else {
                            Toolkit.getDefaultToolkit().beep();
                        }
                    }
                }
            }
            if (polestart == false) {
                if (((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) && kon) {
                    if ((SI_ON == false && siec == false) && obrotowy.getText().equals("Obrót WŁ")) {
                        odwrot = !odwrot;
                        System.out.println("zmiana");
                    }
                    System.out.println("odwrot " + odwrot);
                    if (tryb == 2) {
                        if (odwrot == false) {
                            if (ruchB == false) {
                                czasB.s = sekbaza;
                                czasB.m = seksyg;
                                czasB.warn = false;
                                zegarbiale.setBackground(Color.BLACK);
                                zegarbiale.setForeground(Color.BLACK);
                                zegarbiale.setText(String.valueOf(czasB.s));
                            } else {
                                czasC.s = sekbaza;
                                czasC.m = seksyg;
                                czasC.warn = false;
                                zegarczarne.setBackground(Color.BLACK);
                                zegarczarne.setForeground(Color.BLACK);
                                zegarczarne.setText(String.valueOf(czasC.s));
                            }
                        } else {
                            if (ruchB == false) {
                                czasC.s = sekbaza;
                                czasC.m = seksyg;
                                czasC.warn = false;
                                zegarczarne.setBackground(Color.BLACK);
                                zegarczarne.setForeground(Color.BLACK);
                                zegarczarne.setText(String.valueOf(czasC.s));
                            } else {
                                czasB.s = sekbaza;
                                czasB.m = seksyg;
                                czasB.warn = false;
                                zegarbiale.setBackground(Color.BLACK);
                                zegarbiale.setForeground(Color.BLACK);
                                zegarbiale.setText(String.valueOf(czasB.s));
                            }
                        }
                    }
                    if (tryb == 1) {
                        switch (czasgry) {
                            case 2:
                            case 4:
                            case 6:
                            case 8:
                            case 10:
                                if (ruchB == false) {
                                    czasB.s = czasB.s + bonuss;
                                    if (czasB.s >= 60) {
                                        czasB.s = czasB.s - 60;
                                        czasB.m = czasB.m + 1;
                                    }
                                    if (czasB.s < 10) {
                                        zegarbiale.setText(czasB.m + ":0" + czasB.s);
                                    } else {
                                        zegarbiale.setText(czasB.m + ":" + czasB.s);
                                    }
                                } else {
                                    czasC.s = czasC.s + bonuss;
                                    if (czasC.s >= 60) {
                                        czasC.s = czasC.s - 60;
                                        czasC.m = czasC.m + 1;
                                    }

                                    if (czasB.s < 10) {
                                        zegarczarne.setText(czasB.m + ":0" + czasB.s);
                                    } else {
                                        zegarczarne.setText(czasB.m + ":" + czasB.s);
                                    }
                                }
                                break;
                        }
                    }
                    Toolkit.getDefaultToolkit().beep();
                    //  System.out.println(zawrot);
                    if ((obrotowy.getText().equals("Obrót WŁ") && odwrot == false)
                            || (odwrot == true && (SI_ON == true || siec == true))) {
                        System.out.println("zamiana");
                        switch (start.charAt(0)) {
                            case 'A':
                                start = start.replace('A', 'H');
                                break;
                            case 'B':
                                start = start.replace('B', 'G');
                                break;
                            case 'C':
                                start = start.replace('C', 'F');
                                break;
                            case 'D':
                                start = start.replace('D', 'E');
                                break;
                            case 'E':
                                start = start.replace('E', 'D');
                                break;
                            case 'F':
                                start = start.replace('F', 'C');
                                break;
                            case 'G':
                                start = start.replace('G', 'B');
                                break;
                            case 'H':
                                start = start.replace('H', 'A');
                                break;
                        }
                        switch (start.charAt(1)) {
                            case '1':
                                start = start.replace('1', '8');
                                break;
                            case '2':
                                start = start.replace('2', '7');
                                break;
                            case '3':
                                start = start.replace('3', '6');
                                break;
                            case '4':
                                start = start.replace('4', '5');
                                break;
                            case '5':
                                start = start.replace('5', '4');
                                break;
                            case '6':
                                start = start.replace('6', '3');
                                break;
                            case '7':
                                start = start.replace('7', '2');
                                break;
                            case '8':
                                start = start.replace('8', '1');
                                break;
                        }
                        switch (stop.charAt(0)) {
                            case 'A':
                                stop = stop.replace('A', 'H');
                                break;
                            case 'B':
                                stop = stop.replace('B', 'G');
                                break;
                            case 'C':
                                stop = stop.replace('C', 'F');
                                break;
                            case 'D':
                                stop = stop.replace('D', 'E');
                                break;
                            case 'E':
                                stop = stop.replace('E', 'D');
                                break;
                            case 'F':
                                stop = stop.replace('F', 'C');
                                break;
                            case 'G':
                                stop = stop.replace('G', 'B');
                                break;
                            case 'H':
                                stop = stop.replace('H', 'A');
                                break;
                        }
                        switch (stop.charAt(1)) {
                            case '1':
                                stop = stop.replace('1', '8');
                                break;
                            case '2':
                                stop = stop.replace('2', '7');
                                break;
                            case '3':
                                stop = stop.replace('3', '6');
                                break;
                            case '4':
                                stop = stop.replace('4', '5');
                                break;
                            case '5':
                                stop = stop.replace('5', '4');
                                break;
                            case '6':
                                stop = stop.replace('6', '3');
                                break;
                            case '7':
                                stop = stop.replace('7', '2');
                                break;
                            case '8':
                                stop = stop.replace('8', '1');
                                break;
                        }
                    }

                    ostatni_start = start;
                    ostatni_stop = stop;
                    String ruchS = "";
                    if (((symbol == 'K' || (symbol == 'k')) && (lokalS[0] - lokalK[0] == -2 || lokalS[0] - lokalK[0] == 2))) {
                        if (ruchB == false) {
                            if (lokalS[0] - lokalK[0] == -2) {
                                jTextArea3.append(movenr + "  O-O");
                                ruch = "O-O";
                                ruchS = ruch;

                            } else {
                                if (lokalS[0] - lokalK[0] == 2) {
                                    jTextArea3.append(movenr + "  O-O-O");
                                    ruch = "O-O-O";
                                    ruchS = ruch;

                                }
                            }
                        } else {
                            if (lokalS[0] - lokalK[0] == -2) {
                                jTextArea3.append("     O-O");
                                ruch = "O-O";
                                ruchS = ruch;

                            } else {
                                if (lokalS[0] - lokalK[0] == 2) {
                                    jTextArea3.append("     O-O-O");
                                    ruch = "O-O-O";
                                    ruchS = ruch;

                                }
                            }
                            movenr = movenr + 1;
                        }

                    } else {
                        char promoSymbol = ' ';
                        switch (promo) {
                            case 'Q':
                                promoSymbol = "\u2655".charAt(0);
                                break;
                            case 'R':
                                promoSymbol = "\u2656".charAt(0);
                                break;
                            case 'B':
                                promoSymbol = "\u2657".charAt(0);
                                break;
                            case 'N':
                                promoSymbol = "\u2658".charAt(0);
                                break;
                            case 'q':
                                promoSymbol = "\u265B".charAt(0);
                                break;
                            case 'r':
                                promoSymbol = "\u265C".charAt(0);
                                break;
                            case 'b':
                                promoSymbol = "\u265D".charAt(0);
                                break;
                            case 'n':
                                promoSymbol = "\u265E".charAt(0);
                                break;
                        }
                        char figurka = ' ';
                        switch (symbol) {
                            case 'K':
                                figurka = "\u2654".charAt(0);
                                break;
                            case 'Q':
                                figurka = "\u2655".charAt(0);
                                break;
                            case 'R':
                                figurka = "\u2656".charAt(0);
                                break;
                            case 'B':
                                figurka = "\u2657".charAt(0);
                                break;
                            case 'N':
                                figurka = "\u2658".charAt(0);
                                break;
                            case 'P':
                                figurka = "\u2659".charAt(0);
                                break;
                            case 'k':
                                figurka = "\u265A".charAt(0);
                                break;
                            case 'q':
                                figurka = "\u265B".charAt(0);
                                break;
                            case 'r':
                                figurka = "\u265C".charAt(0);
                                break;
                            case 'b':
                                figurka = "\u265D".charAt(0);
                                break;
                            case 'n':
                                figurka = "\u265E".charAt(0);
                                break;
                            case 'p':
                                figurka = "\u265F".charAt(0);
                                break;
                        }
                        if (prze == false) {
                            if (ruchB == false) {
                                if ((stop.charAt(1) == '8') && (promo != ' ') && (promocja)) {
                                    if (bicie == false) {
                                        jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ". P" + start + "-" + stop + "=" + promo) : (movenr + ".  \u2659" + start + "-" + stop + "=" + promoSymbol));
                                        ruch = "P" + start + "-" + stop + "=" + promo;
                                        ruchS = "\u2659" + start + "-" + stop + "=" + promoSymbol;
                                    } else {
                                        jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ". P" + start + "x" + stop + "=" + promo) : (movenr + ".  \u2659" + start + "x" + stop + "=" + promoSymbol));
                                        ruch = "P" + start + "x" + stop + "=" + promo;
                                        ruchS = "\u2659" + start + "x" + stop + "=" + promoSymbol;
                                    }
                                } else {
                                    if (bicie == false) {
                                        jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ".  " + symbol + start + "-" + stop) : (movenr + ".  " + figurka + start + "-" + stop));

                                        ruch = symbol + start + "-" + stop;
                                        ruchS = figurka + start + "-" + stop;
                                    } else {
                                        if (dokonanoEP) {
                                            jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ".  " + symbol + start + "x" + stop + "EP") : (movenr + ".  " + figurka + start + "x" + stop + "EP"));
                                        } else {
                                            jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ".  " + symbol + start + "x" + stop) : (movenr + ".  " + figurka + start + "x" + stop));
                                        }
                                        ruch = symbol + start + "x" + stop;
                                        ruchS = figurka + start + "x" + stop;
                                    }
                                }

                            } else {
                                if ((stop.charAt(1) == '1') && (promo != ' ') && (promocja)) {
                                    if (bicie == false) {
                                        jTextArea3.append(!jCheckBox1.isSelected() ? ("    p" + start + "-" + stop + "=" + promo) : ("    \u265F" + start + "-" + stop + "=" + promoSymbol));
                                        ruch = "p" + start + "-" + stop + "=" + promo;
                                    } else {
                                        jTextArea3.append(!jCheckBox1.isSelected() ? ("    p" + start + "x" + stop + "=" + promo) : ("    \u265F" + start + "x" + stop + "=" + promoSymbol));
                                        ruch = "p" + start + "x" + stop + "=" + promo;
                                    }
                                    ruchS = "\u265F" + start + "x" + stop + "=" + promoSymbol;
                                } else {
                                    if (bicie == false) {
                                        jTextArea3.append(!jCheckBox1.isSelected() ? ("    " + symbol + start + "-" + stop) : ("    " + figurka + start + "-" + stop));
                                        ruch = symbol + start + "-" + stop;
                                        ruchS = figurka + start + "-" + stop;
                                    } else {
                                        if (dokonanoEP) {
                                            jTextArea3.append(!jCheckBox1.isSelected() ? ("  " + symbol + start + "x" + stop + "EP") : ("  " + figurka + start + "x" + stop + "EP"));

                                        } else {
                                            jTextArea3.append(!jCheckBox1.isSelected() ? ("  " + symbol + start + "x" + stop) : ("  " + figurka + start + "x" + stop));
                                        }
                                        ruch = symbol + start + "x" + stop + ((dokonanoEP) ? "EP" : "");
                                        ruchS = figurka + start + "x" + stop + ((dokonanoEP) ? "EP" : "");

                                    }
                                }

                                movenr = movenr + 1;
                            }
                        }
                        if (symbol == 'K') {
                            kingrochB = false;
                            dokonano_RB = Math.abs(lokalS[0] - lokalS[1]) == 2;
                        }
                        if (symbol == 'k') {
                            kingrochC = false;
                            dokonano_RC = Math.abs(lokalS[0] - lokalS[1]) == 2;
                        }
                        if (bicie) {
                            switch (stop) {
                                case "A1":
                                    wleft = false;
                                    if (!wright && !wleft) {
                                        kingrochB = false;
                                    }
                                    break;
                                case "A8":
                                    bleft = false;
                                    if (!bright && !bleft) {
                                        kingrochC = false;
                                    }
                                    break;
                                case "H1":
                                    wright = false;
                                    if (!wright && !wleft) {
                                        kingrochB = false;
                                    }
                                    break;
                                case "H8":
                                    bright = false;
                                    if (!bright && !bleft) {
                                        kingrochC = false;
                                    }
                                    break;
                            }
                        }
                        if (symbol == 'r' || symbol == 'R') {
                            switch (start) {
                                case "A1":
                                    wleft = false;
                                    if (!wright && !wleft) {
                                        kingrochB = false;
                                    }
                                    break;
                                case "A8":
                                    bleft = false;
                                    if (!bright && !bleft) {
                                        kingrochC = false;
                                    }
                                    break;
                                case "H1":
                                    wright = false;
                                    if (!wright && !wleft) {
                                        kingrochB = false;
                                    }
                                    break;
                                case "H8":
                                    bright = false;
                                    if (!bright && !bleft) {
                                        kingrochC = false;
                                    }
                                    break;
                            }
                        }
                    }

                    if (ruchB) {
                        jTextArea3.append("\n");
                    }
                    for (int i = 0; i < 8; i++) {
                        for (int j = 0; j < 8; j++) {
                            odwrotna[i][j] = ust[7 - i][7 - j];
                        }
                    }

                    ruchy_literowe.add(ruch);
                    ruchy_syboliczne.add(ruchS);
                    jTextArea3.setCaretPosition(jTextArea3.getDocument().getLength());
                    if (siec) {
                        try {
                            msgwy = ruch;
                            out.writeUTF(msgwy + ((!oczekiwanie) ? " Przeciwnik" : ""));
                            oczekiwanie = true;
                        } catch (IOException ex) {
                            Logger.getLogger(SzachowaArena.class
                                    .getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    if (bicie || (promocja || (symbol == 'P' || symbol == 'p'))) {
                        dolicz = false;
                        zasada50 = 0;
                        bicie = false;
                    } else {
                        if (dolicz) {
                            zasada50 = (byte) (zasada50 + 1);
                            dolicz = false;
                        } else {
                            dolicz = true;
                        }
                    }
                    if (zasada50 == 50) {
                        if (czasgry != -1) {
                            whitetime.interrupt();
                            blacktime.interrupt();
                        }
                        JOptionPane.showMessageDialog(rootPane, "zasada 50 ruchów.(50 ruchów po obu stronach bez bicia lub ruchu pionem). \nREMIS!", "Zasada", JOptionPane.WARNING_MESSAGE);
                        SI_ON = false;
                        symulacja = false;
                        losowanko.setEnabled(false);
                        for (char c = 'A'; c < 'I'; c++) {
                            for (int j = 0; j < 8; j++) {
                                String nazwabuttona = c + String.valueOf(j + 1);
                                dobierzprzycisk(nazwabuttona, false).setEnabled(false);
                            }
                        }
                        tryb = 0;
                        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                        remis();
                    }
                    styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                    if (lokalK[0] != lokalS[0] || lokalK[1] != lokalS[1]) {
                        String tmp3;
                        int powtorki = 0;
                        tmp3 = "";
                        for (int x = 0; x < 8; x++) {
                            for (int y = 0; y < 8; y++) {
                                tmp3 = tmp3.concat(String.valueOf(ust[x][y]));
                            }
                        }
                        tmp3 = tmp3.concat(" " + ruchB + " " + przelotcan + " " + wleft + " " + wright + " " + bleft + " " + bright);
                        historia.add(tmp3);
                        Collections.sort(historia);
                        if (historia.size() > 2) {
                            for (int i = 1; i < historia.size(); i++) {
                                if (historia.get(i).equals(historia.get(i - 1))) {
                                    powtorki = powtorki + 1;
                                    if (powtorki == 2) {
                                        if (czasgry != -1) {
                                            whitetime.interrupt();
                                            blacktime.interrupt();
                                        }

                                        JOptionPane.showMessageDialog(rootPane, "3-krotne powtórzenie pozycji. \nREMIS!", "Zasada", JOptionPane.WARNING_MESSAGE);
                                        SI_ON = false;
                                        symulacja = false;
                                        losowanko.setEnabled(false);
                                        for (char c = 'A'; c < 'I'; c++) {
                                            for (int j = 0; j < 8; j++) {
                                                String nazwabuttona = c + String.valueOf(j + 1);
                                                dobierzprzycisk(nazwabuttona, false).setEnabled(false);
                                            }
                                        }
                                        tryb = 0;
                                        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                        remis();
                                    }
                                } else {
                                    powtorki = 0;
                                }
                            }
                        }
                    }
                }
            }
            if (krole_biale == 0 || krole_czarne == 0) {
                if (krole_biale == 0) {
                    if (czasgry != -1) {
                        whitetime.interrupt();
                        blacktime.interrupt();
                    }

                    JOptionPane.showMessageDialog(rootPane, "Król białyh upadł. wygrywają czarne.", "Koniec", JOptionPane.WARNING_MESSAGE);
                    SI_ON = false;
                    tryb = 0;
                    symulacja = false;
                    losowanko.setEnabled(false);
                    jTextArea3.setVisible(true);
                    kapitulacja();
                }
                if (krole_czarne == 0) {
                    if (czasgry != -1) {
                        whitetime.interrupt();
                        blacktime.interrupt();
                    }

                    JOptionPane.showMessageDialog(rootPane, "Król carnych upadł. wygrywają białe.", "Koniec", JOptionPane.WARNING_MESSAGE);
                    SI_ON = false;
                    tryb = 0;
                    symulacja = false;
                    losowanko.setEnabled(false);
                    jTextArea3.setVisible(true);
                    kapitulacja();
                }
                for (char i = 'A'; i < 'I'; i++) {
                    for (int j = 0; j < 8; j++) {
                        String nazwabuttona = i + String.valueOf(j + 1);
                        dobierzprzycisk(nazwabuttona, false).setEnabled(false);
                    }
                }
                tryb = 0;
                styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
            }
            promo = ' ';
            znak_promocji = ' ';
            promocja = false;
            roch = false;
            dokonanoEP = false;
            dobierz_kursor_na_przycisku(' ', null);
            setCursor(Cursor.getDefaultCursor());
            dobierz_kursor_na_przycisku(' ', null);
        }
        pomoc_ruch = ruchB ? Color.blue : Color.red;

    }

    /*public int getKol() {
        return kol;
    }/*

    /**
     * zmienia wygląd planszy i figur
     *
     * @param kolor_zestaw zmienia kolory figur
     * @param kroj_zestaw zmienia krój figur
     * @param kolor_plansza zmienia kolory planszy
     */
    public void styl(int kolor_zestaw, int kroj_zestaw, int kolor_plansza) {
        String nazwabuttona;
        jLabel1.setText(odwrot ? "H" : "A");
        jLabel2.setText(odwrot ? "G" : "B");
        jLabel3.setText(odwrot ? "F" : "C");
        jLabel4.setText(odwrot ? "E" : "D");
        jLabel5.setText(odwrot ? "D" : "E");
        jLabel6.setText(odwrot ? "C" : "F");
        jLabel7.setText(odwrot ? "B" : "G");
        jLabel8.setText(odwrot ? "A" : "H");
        jLabel10.setText(odwrot ? "8" : "1");
        jLabel14.setText(odwrot ? "1" : "8");
        jLabel15.setText(odwrot ? "2" : "7");
        jLabel16.setText(odwrot ? "3" : "6");
        jLabel17.setText(odwrot ? "4" : "5");
        jLabel18.setText(odwrot ? "5" : "4");
        jLabel19.setText(odwrot ? "6" : "3");
        jLabel11.setText(odwrot ? "7" : "2");
        switch (kolor_zestaw) {
            case 1:
                switch (kroj_zestaw) {
                    case 1:
                        ustawWB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                        ustawWN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                        ustawWP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                        ustawWR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                        ustawWQ.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                        ustawWK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                        ustawBB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                        ustawBN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                        ustawBP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                        ustawBR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                        ustawBQ.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                        ustawBK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                        b0 = new ImageIcon(this.getClass().getResource("Wking001.png"));
                        b1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Wqueen01.png" : "Wamazon1.png"));
                        b2 = new ImageIcon(this.getClass().getResource("Wrook001.png"));
                        b3 = new ImageIcon(this.getClass().getResource("Wbishop1.png"));
                        b4 = new ImageIcon(this.getClass().getResource("Wknight1.png"));
                        c0 = new ImageIcon(this.getClass().getResource("Bking001.png"));
                        c1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Bqueen01.png" : "Bamazon1.png"));
                        c2 = new ImageIcon(this.getClass().getResource("Brook001.png"));
                        c3 = new ImageIcon(this.getClass().getResource("Bbishop1.png"));
                        c4 = new ImageIcon(this.getClass().getResource("Bknight1.png"));
                        c5 = new ImageIcon(this.getClass().getResource("Bpawn001.png"));
                        b5 = new ImageIcon(this.getClass().getResource("Wpawn001.png"));
                        break;
                    case 2:

                        ustawWB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wbishop4.png")));
                        ustawWN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wknight4.png")));
                        ustawWP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wpawn004.png")));
                        ustawWR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wrook004.png")));
                        ustawWQ.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wqueen04.png")));
                        ustawWK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wking004.png")));
                        ustawBB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bbishop4.png")));
                        ustawBN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bknight4.png")));
                        ustawBP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bpawn004.png")));
                        ustawBR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Brook004.png")));
                        ustawBQ.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bqueen04.png")));
                        ustawBK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bking004.png")));
                        b0 = new ImageIcon(this.getClass().getResource("Wking004.png"));
                        b1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Wqueen04.png" : "Wamazon4.png"));
                        b2 = new ImageIcon(this.getClass().getResource("Wrook004.png"));
                        b3 = new ImageIcon(this.getClass().getResource("Wbishop4.png"));
                        b4 = new ImageIcon(this.getClass().getResource("Wknight4.png"));
                        c0 = new ImageIcon(this.getClass().getResource("Wking004.png"));
                        c1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Bqueen04.png" : "Bamazon4.png"));
                        c2 = new ImageIcon(this.getClass().getResource("Brook004.png"));
                        c3 = new ImageIcon(this.getClass().getResource("Bbishop4.png"));
                        c4 = new ImageIcon(this.getClass().getResource("Bknight4.png"));
                        c5 = new ImageIcon(this.getClass().getResource("Bpawn004.png"));
                        b5 = new ImageIcon(this.getClass().getResource("Wpawn004.png"));
                        break;
                    case 3:
                        ustawWB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wbishop6.png")));
                        ustawWN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wknight6.png")));
                        ustawWP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wpawn006.png")));
                        ustawWR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wrook006.png")));
                        ustawWQ.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wqueen06.png")));
                        ustawWK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wking006.png")));
                        ustawBB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bbishop6.png")));
                        ustawBN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bknight6.png")));
                        ustawBP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bpawn006.png")));
                        ustawBR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Brook006.png")));
                        ustawBQ.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bqueen06.png")));
                        ustawBK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bking006.png")));
                        b0 = new ImageIcon(this.getClass().getResource("Wking006.png"));
                        b1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Wqueen06.png" : "Wamazon6.png"));
                        b2 = new ImageIcon(this.getClass().getResource("Wrook006.png"));
                        b3 = new ImageIcon(this.getClass().getResource("Wbishop6.png"));
                        b4 = new ImageIcon(this.getClass().getResource("Wknight6.png"));
                        c0 = new ImageIcon(this.getClass().getResource("Bking006.png"));
                        c1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Bqueen06.png" : "Bamazon6.png"));
                        c2 = new ImageIcon(this.getClass().getResource("Brook006.png"));
                        c3 = new ImageIcon(this.getClass().getResource("Bbishop6.png"));
                        c4 = new ImageIcon(this.getClass().getResource("Bknight6.png"));
                        c5 = new ImageIcon(this.getClass().getResource("Bpawn006.png"));
                        b5 = new ImageIcon(this.getClass().getResource("Wpawn006.png"));
                        break;
                }
                break;
            case 2:
                switch (kroj_zestaw) {
                    case 1:
                        ustawWB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wbishop2.png")));
                        ustawWN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wknight2.png")));
                        ustawWP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wpawn002.png")));
                        ustawWR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wrook002.png")));
                        ustawWQ.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wqueen02.png")));
                        ustawWK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wking002.png")));
                        ustawBB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bbishop2.png")));
                        ustawBN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bknight2.png")));
                        ustawBP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bpawn002.png")));
                        ustawBR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Brook002.png")));
                        ustawBQ.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bqueen02.png")));
                        ustawBK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bking002.png")));
                        b0 = new ImageIcon(this.getClass().getResource("Wking002.png"));
                        b1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Wqueen02.png" : "Wamazon2.png"));
                        b2 = new ImageIcon(this.getClass().getResource("Wrook002.png"));
                        b3 = new ImageIcon(this.getClass().getResource("Wbishop2.png"));
                        b4 = new ImageIcon(this.getClass().getResource("Wknight2.png"));
                        b0 = new ImageIcon(this.getClass().getResource("Wking002.png"));
                        c1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Bqueen02.png" : "Bamazon2.png"));
                        c2 = new ImageIcon(this.getClass().getResource("Brook002.png"));
                        c3 = new ImageIcon(this.getClass().getResource("Bbishop2.png"));
                        c4 = new ImageIcon(this.getClass().getResource("Bknight2.png"));
                        c5 = new ImageIcon(this.getClass().getResource("Bpawn002.png"));
                        b5 = new ImageIcon(this.getClass().getResource("Wpawn002.png"));
                        break;
                    case 2:
                        ustawWB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wbishop3.png")));
                        ustawWN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wknight3.png")));
                        ustawWP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wpawn003.png")));
                        ustawWR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wrook003.png")));
                        ustawWQ.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wqueen03.png")));
                        ustawWK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wking003.png")));
                        ustawBB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bbishop3.png")));
                        ustawBN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bknight3.png")));
                        ustawBP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bpawn003.png")));
                        ustawBR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Brook003.png")));
                        ustawBQ.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bqueen03.png")));
                        ustawBK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bking003.png")));
                        b0 = new ImageIcon(this.getClass().getResource("Wking003.png"));
                        b1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Wqueen03.png" : "Wamazon3.png"));
                        b2 = new ImageIcon(this.getClass().getResource("Wrook003.png"));
                        b3 = new ImageIcon(this.getClass().getResource("Wbishop3.png"));
                        b4 = new ImageIcon(this.getClass().getResource("Wknight3.png"));
                        b0 = new ImageIcon(this.getClass().getResource("Wking003.png"));
                        c1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Wqueen03.png" : "Wamazon3.png"));
                        c2 = new ImageIcon(this.getClass().getResource("Brook003.png"));
                        c3 = new ImageIcon(this.getClass().getResource("Bbishop3.png"));
                        c4 = new ImageIcon(this.getClass().getResource("Bknight3.png"));
                        c5 = new ImageIcon(this.getClass().getResource("Bpawn003.png"));
                        b5 = new ImageIcon(this.getClass().getResource("Wpawn003.png"));
                        break;
                    case 3:
                        ustawWB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wbishop5.png")));
                        ustawWN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wknight5.png")));
                        ustawWP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wpawn005.png")));
                        ustawWR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wrook005.png")));
                        ustawWQ.setSelectedIcon(new ImageIcon(this.getClass().getResource(tryb != 4 ? "Wqueen05.png" : "Wamazon5.png")));
                        ustawWK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Wking005.png")));
                        ustawBB.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bbishop5.png")));
                        ustawBN.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bknight5.png")));
                        ustawBP.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bpawn005.png")));
                        ustawBR.setSelectedIcon(new ImageIcon(this.getClass().getResource("Brook005.png")));
                        ustawBQ.setSelectedIcon(new ImageIcon(this.getClass().getResource(tryb != 4 ? "Bqueen05.png" : "Bamazon5.png")));
                        ustawBK.setSelectedIcon(new ImageIcon(this.getClass().getResource("Bking005.png")));
                        b0 = new ImageIcon(this.getClass().getResource("Wking005.png"));
                        b1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Wqueen05.png" : "Wamazon5.png"));
                        b2 = new ImageIcon(this.getClass().getResource("Wrook005.png"));
                        b3 = new ImageIcon(this.getClass().getResource("Wbishop5.png"));
                        b4 = new ImageIcon(this.getClass().getResource("Wknight5.png"));
                        c0 = new ImageIcon(this.getClass().getResource("Bking005.png"));
                        c1 = new ImageIcon(this.getClass().getResource(tryb != 4 ? "Bqueen05.png" : "Bamazon5.png"));
                        c2 = new ImageIcon(this.getClass().getResource("Brook005.png"));
                        c3 = new ImageIcon(this.getClass().getResource("Bbishop5.png"));
                        c4 = new ImageIcon(this.getClass().getResource("Bknight5.png"));
                        c5 = new ImageIcon(this.getClass().getResource("Bpawn005.png"));
                        b5 = new ImageIcon(this.getClass().getResource("Wpawn005.png"));
                        break;
                }
                break;
        }
        kolumna = 0;
        for (char i = 'A'; i < 'I'; i++) {
            for (int j = 0; j < 8; j++) {
                nazwabuttona = i + String.valueOf(j + 1);
                JButton przycisk = dobierzprzycisk(nazwabuttona, false);
                if (wlasnykolor == false) {
                    if (kolor_plansza == 1) {
                        if ((pole % 2 == 0 && kolumna % 2 == 0) || (kolumna % 2 == 1 && pole % 2 == 1)) {
                            przycisk.setBackground(new Color(102, 102, 102));
                            przycisk.setForeground(new Color(102, 102, 102));
                        } else {
                            przycisk.setBackground(Color.WHITE);
                            przycisk.setForeground(Color.WHITE);
                        }
                    }
                    if (kolor_plansza == 2) {
                        if ((pole % 2 == 0 && kolumna % 2 == 0) || (kolumna % 2 == 1 && pole % 2 == 1)) {
                            przycisk.setBackground(new Color(90, 0, 0));
                            przycisk.setForeground(new Color(90, 0, 0));
                        } else {
                            przycisk.setBackground(new Color(116, 255, 255));
                            przycisk.setForeground(new Color(116, 255, 255));
                        }
                    }
                    if (kolor_plansza == 3) {
                        if ((pole % 2 == 0 && kolumna % 2 == 0) || (kolumna % 2 == 1 && pole % 2 == 1)) {
                            przycisk.setBackground(new Color(115, 69, 19));
                            przycisk.setForeground(new Color(115, 69, 19));
                        } else {
                            przycisk.setBackground(new Color(244, 164, 96));
                            przycisk.setForeground(new Color(244, 164, 96));
                        }
                    }
                }
                if (tryb != 3) {
                    if (odwrot == false) {
                        switch (kroj_zestaw) {
                            case 1:
                                switch (kolor_zestaw) {
                                    case 1:
                                        switch (ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'A':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon1.png")));
                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001SB.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1SN.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1SP.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon1.png")));
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001SB.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1SN.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1SP.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            przycisk.setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                    case 2:
                                        switch (ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'A':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon2.png")));
                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen02.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen02.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen02SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen02SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen02.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002SB.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2SN.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2SP.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon2.png")));
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen02.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen02.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen02SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen02SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen02.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002SB.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2SN.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2SP.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[j][(int) i - 'A']) {
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            przycisk.setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                }
                                break;
                            case 2:
                                switch (kolor_zestaw) {
                                    case 1:
                                        switch (ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking004.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking004.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'A':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon4.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon4.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen04.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen04.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook004.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook004.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop4.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop4.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight4.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight4.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn004.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn004.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking004.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking004.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon4.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon4.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen04.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen04.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook004.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook004.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop4.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop4.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight4.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight4.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn004.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn004.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            przycisk.setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                    case 2:
                                        switch (ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking003.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking003.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'A':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon3.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon3.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen03.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen03.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook003.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook003.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop3.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop3.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight3.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight3.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn003.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn003.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking003.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking003.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon3.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon3.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen03.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen03.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook003.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook003.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop3.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop3.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight3.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight3.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn003.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn003.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            przycisk.setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                }
                                break;
                            case 3:
                                switch (kolor_zestaw) {
                                    case 1:
                                        switch (ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking006.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking006.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'A':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon6.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon6.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen06.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen06.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook006.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook006.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop6.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop6.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight6.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight6.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn006.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn006.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking006.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking006.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon6.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon6.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen06.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen06.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook006.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook006.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop6.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop6.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight6.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight6.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn006.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn006.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            przycisk.setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                    case 2:
                                        switch (ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking005.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking005.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'A':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon5.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon5.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen05.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen05.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook005.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook005.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop5.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop5.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight5.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight5.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn005.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn005.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking005.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking005.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon5.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon5.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen05.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen05.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook005.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook005.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop5.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop5.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight5.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight5.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn005.png")));
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn005.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            przycisk.setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                }
                                break;
                        }
                    } else {
                        switch (kroj_zestaw) {
                            case 1:
                                switch (kolor_zestaw) {
                                    case 1:
                                        switch (tryb != 7 ? odwrotna[j][(int) i - 'A'] : ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'A':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon1.png")));
                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001SB.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1SN.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1SP.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon1.png")));
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001SB.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1SN.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1SP.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                    case 2:
                                        switch (tryb != 7 ? odwrotna[j][(int) i - 'A'] : ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wking002.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'A':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon2.png")));
                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen02.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wqueen02.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen02SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen02SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen02.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wrook002.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002SB.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wbishop2.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2SN.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop2.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wknight2.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2SP.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight2.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wpawn002.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bking002.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon2.png")));
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen02.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bqueen02.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen02SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen02SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen02.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Brook002.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002SB.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bbishop2.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2SN.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop2.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bknight2.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2SP.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight2.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bpawn002.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn002.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                }
                                break;
                            case 2:
                                switch (kolor_zestaw) {
                                    case 4:
                                        switch (tryb != 7 ? odwrotna[j][(int) i - 'A'] : ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking004.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wking004.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking004SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking004SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking004SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking004SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking004SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking004.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'A':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon4.png")));
                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen04.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wqueen04.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen04SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen04SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen04.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook004.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wrook004.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook004SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook004SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook004SB.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook004SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook004.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop4.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wbishop4.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop4SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop4SN.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop4SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop4SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop4.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight4.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wknight4.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight4SP.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight4SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight4SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight4SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight4.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn004.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wpawn004.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn004SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn004SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn004SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn004SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn004.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking004.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bking004.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking004SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking004SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking004SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking004SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking004SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking004.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon4.png")));
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen04.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bqueen04.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen04SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen04SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen04.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook004.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Brook004.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook004SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook004SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook004SB.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook004SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook004.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop4.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bbishop4.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop4SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop4SN.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop4SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop4SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop4.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight4.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bknight4.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight4SP.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight4SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight4SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight4SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight4.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn004.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bpawn004.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn004SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn004SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn004SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn004SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn004.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                    case 2:
                                        switch (tryb != 7 ? odwrotna[j][(int) i - 'A'] : ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking003.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wking003.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking003SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking003SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking003SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking003SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking003SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking003.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'A':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon3.png")));
                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen03.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wqueen03.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen03SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen03SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen03.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook003.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wrook003.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook003SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook003SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook003SB.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook003SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook003.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop3.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wbishop3.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop3SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop3SN.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop3SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop3SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop3.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight3.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wknight3.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight3SP.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight3SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight3SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight3SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight3.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn003.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wpawn003.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn003SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn003SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn003SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn003SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn003.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking003.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bking003.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking003SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking003SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking003SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking003SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking003SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking003.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon3.png")));
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen03.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bqueen03.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen03SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen03SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen03.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook003.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Brook003.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook003SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook003SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook003SB.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook003SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook003.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop3.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bbishop3.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop3SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop3SN.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop3SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop3SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop3.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight3.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bknight3.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight3SP.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight3SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight3SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight3SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight3.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn003.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bpawn003.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn003SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn003SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn003SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn003SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn003.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                }
                                break;
                            case 3:
                                switch (kolor_zestaw) {
                                    case 6:
                                        switch (tryb != 7 ? odwrotna[j][(int) i - 'A'] : ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking006.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wking006.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking006SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking006SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking006SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking006SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking006SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking006.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'A':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon6.png")));
                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen06.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wqueen06.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen06SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen06SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen06.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook006.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wrook006.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook006SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook006SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook006SB.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook006SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook006.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop6.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wbishop6.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop6SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop6SN.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop6SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop6SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop6.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight6.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wknight6.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight6SP.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight6SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight6SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight6SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight6.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn006.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wpawn006.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn006SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn006SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn006SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn006SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn006.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking006.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bking006.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking006SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking006SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking006SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking006SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking006SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking006.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon6.png")));
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen06.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bqueen06.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen06SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen06SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen06.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook006.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Brook006.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook006SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook006SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook006SB.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook006SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook006.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop6.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bbishop6.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop6SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop6SN.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop6SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop6SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop6.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight6.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bknight6.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight6SP.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight6SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight6SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight6SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight6.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn006.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bpawn006.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn006SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn006SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn006SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn006SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn006.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                    case 2:
                                        switch (tryb != 7 ? odwrotna[j][(int) i - 'A'] : ust[j][(int) i - 'A']) {
                                            case 'K':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking005.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wking005.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking005SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking005SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking005SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking005SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking005SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking005.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'A':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wamazon5.png")));
                                                break;
                                            case 'Q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen05.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wqueen05.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen05SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen05SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen05.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'R':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook005.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wrook005.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook005SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook005SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook005SB.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook005SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook005.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'B':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop5.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wbishop5.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop5SP.png")));
                                                            break;
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop5SN.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop5SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop5SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop5.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'N':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight5.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wknight5.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'P':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight5SP.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight5SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight5SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight5SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight5.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'P':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn005.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == true) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Wpawn005.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'N':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn005SN.png")));
                                                            break;
                                                        case 'B':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn005SB.png")));
                                                            break;
                                                        case 'R':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn005SR.png")));
                                                            break;
                                                        case 'Q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn005SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn005.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'k':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking005.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bking005.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking005SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking005SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking005SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking005SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking005SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking005.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'a':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bamazon5.png")));
                                                break;
                                            case 'q':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen05.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bqueen05.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen05SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen05SN.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen05.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'r':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook005.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Brook005.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook005SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook005SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook005SB.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook005SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook005.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'b':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop5.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bbishop5.png")));
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop5SP.png")));
                                                            break;
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop5SN.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop5SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop5SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop5.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'n':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight5.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bknight5.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'p':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight5SP.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight5SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight5SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight5SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight5.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 'p':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn005.png")));
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName()) || ruchB == false) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Bpawn005.png")));
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (tryb == 5) {
                                                    switch (nakladki[7 - j][(int) 7 - i - 'A']) {
                                                        case 'n':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn005SN.png")));
                                                            break;
                                                        case 'b':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn005SB.png")));
                                                            break;
                                                        case 'r':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn005SR.png")));
                                                            break;
                                                        case 'q':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn005SQ.png")));
                                                            break;
                                                        case ' ':
                                                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn005.png")));
                                                            break;
                                                    }
                                                }
                                                break;
                                            case ' ':
                                                if (tryb != 7) {
                                                    przycisk.setIcon(null);
                                                } else {
                                                    dobierzprzycisk(przycisk.getName(), true).setIcon(new ImageIcon(this.getClass().getResource("Mgła.png")));
                                                    for (Ruch r : Generator.generuj_posuniecia(konwert(ust), ruchB, przelotcan, bleft, bright, wleft, wright, kingrochB, kingrochC, kolumna, false, true)) {
                                                        if (r.toString().contains(przycisk.getName())) {
                                                            dobierzprzycisk(przycisk.getName(), true).setIcon(null);
                                                            break;
                                                        }
                                                    }
                                                }
                                                break;
                                        }
                                        break;
                                }
                                break;
                        }
                    }
                }
                pole++;
            }
            pole = 0;
            kolumna = kolumna + 1;
        }
        kolumna = 0;
    }

    private void czysc_rame() {
        for (int i = 1; i <= 8; i++) {
            for (char j = 'A'; j <= 'H'; j++) {
                dobierzprzycisk(String.valueOf(j + "" + i), false).setBorder(null);
            }
        }
    }

    private void koloruj_pola(boolean b, Color kolor) {
        if (b) {
            for (int i = 1; i <= 8; i++) {
                for (char j = 'A'; j <= 'H'; j++) {
                    if ((i % 2 == 0 && j % 2 == 1) || (i % 2 == 1 && j % 2 == 0)) {
                        dobierzprzycisk(String.valueOf(j + "" + i), false).setBackground(kolor);
                    }
                }
            }
        } else {
            for (int i = 1; i <= 8; i++) {
                for (char j = 'A'; j <= 'H'; j++) {
                    if ((i % 2 == 1 && j % 2 == 0) || (i % 2 == 0 && j % 2 == 1)) {
                        dobierzprzycisk(String.valueOf(j + "" + i), false).setBackground(kolor);
                    }
                }
            }
        }
        buttonGroup5.clearSelection();
    }

    static void dodaj_do_listy(String nazwa) {
        listaip.add(nazwa);
    }

    private void poprawrame() {
        for (int i = 1; i <= 8; i++) {
            for (char j = 'A'; j <= 'H'; j++) {
                dobierzprzycisk(String.valueOf(j + "" + i), false)
                        .setBorder(dobierzprzycisk(String.valueOf(j + "" + i), false)
                                .getBorder() != null ? new LineBorder(rama, 4) : null);
            }
        }
    }

    private void polacz(int bazamin) throws IOException {
        jTextArea2.setText(jTextArea2.getText().trim() + "znaleziono gracza \n");
        Wydruk.setEnabled(true);
        siec = true;
        obrotowy.setText("Obrót WYŁ");
        obrotowy.setVisible(false);
        polaczenie_net = new lacze();
        polaczenie_net.start();

        msgwy = String.valueOf(oczekiwanie);
        out.writeUTF("color:" + msgwy);
        if (oczekiwanie) {
            odwrot = true;
            jTextArea2.setText(jTextArea2.getText().trim() + "\n grasz jako: czarne \n");
            poddanie.setEnabled(false);
            remis_prop.setEnabled(false);
        } else {
            odwrot = false;
            jTextArea2.setText(jTextArea2.getText().trim() + "\n grasz jako: białe  \n");
        }
        if (tryb == 1) {
            msgwy = String.valueOf(czasgry);
            out.writeUTF("TG" + msgwy);
            if (czasgry == 10) {
                msgwy = String.valueOf(bazamin);
                out.writeUTF("MIN" + msgwy);

                msgwy = String.valueOf(bonuss);
                out.writeUTF("BON" + msgwy);
            }
            whitetime = new Thread(czasB, "bieltime");
            blacktime = new Thread(czasC, "czerntime");
            whitetime.start();
            blacktime.start();
        }
        if (tryb == 2) {
            msgwy = sek + "|" + seksyg + "|" + oczekiwanie;
            out.writeUTF("ALT" + msgwy);
            whitetime = new Thread(czasB, "bieltime");
            blacktime = new Thread(czasC, "czerntime");
            whitetime.start();
            blacktime.start();
        }
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
        for (int i = 1; i <= 8; i++) {
            for (char j = 'A'; j <= 'H'; j++) {
                dobierzprzycisk(String.valueOf(j + "" + i), false).setEnabled(true);
            }
        }
        poddanie.setEnabled(true);
        remis_prop.setEnabled(true);
        Menu_gry_glowne.setEnabled(false);
        gra = true;
        zasada50 = 0;
        dolicz = false;
        ustawka = false;
        lekkieB = 4;
        lekkieC = 4;
        ciezkieB = 3;
        ciezkieC = 3;
        pionB = 8;
        pionC = 8;
    }

    private void dobierz_kursor(char symbole) {

        Image ikonka = null;
        if (tryb == 3) {
            switch (symbole) {
                case ' ':
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    break;
                case 'P':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Wpawn001.png")).getImage(),
                            new Point(0, 0), "custom cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Wpawn001.png")).getImage();
                    break;
                case 'N':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Wknight1.png")).getImage(),
                            new Point(0, 0), "custom cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Wknight1.png")).getImage();
                    break;
                case 'B':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Wbishop1.png")).getImage(),
                            new Point(0, 0), "custom cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Wbishop1.png")).getImage();
                    break;
                case 'R':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Wrook001.png")).getImage(),
                            new Point(0, 0), "custom cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Wrook001.png")).getImage();
                    break;
                case 'Q':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Wqueen01.png")).getImage(),
                            new Point(0, 0), "custom cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Wqueen01.png")).getImage();
                    break;
                case 'K':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Wking001.png")).getImage(),
                            new Point(0, 0), "custom cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Wking001.png")).getImage();
                    break;
                case 'p':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Bpawn001.png")).getImage(),
                            new Point(0, 0), "custom Cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Bpawn001.png")).getImage();
                    break;
                case 'n':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Bknight1.png")).getImage(),
                            new Point(0, 0), "custom Cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Bknight1.png")).getImage();
                    break;
                case 'b':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Bbishop1.png")).getImage(),
                            new Point(0, 0), "custom Cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Bbishop1.png")).getImage();
                    break;
                case 'r':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Brook001.png")).getImage(),
                            new Point(0, 0), "custom Cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Brook001.png")).getImage();
                    break;
                case 'q':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Bqueen01.png")).getImage(),
                            new Point(0, 0), "custom Cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Bqueen01.png")).getImage();
                    break;
                case 'k':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Bking001.png")).getImage(),
                            new Point(0, 0), "custom Cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Bking001.png")).getImage();
                    break;
                case 'A':
                case 'a':
                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                            new ImageIcon(this.getClass().getResource("Bamazon1.png")).getImage(),
                            new Point(0, 0), "custom Cursor"));
                    ikonka = new ImageIcon(this.getClass().getResource("Bamazon1.png")).getImage();
                    break;
            }
        } else {
            switch (kroj_zestaw) {
                case 1:
                    switch (kolor_zestaw) {
                        case 1:
                            switch (symbole) {
                                case ' ':
                                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                    break;
                                case 'P':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wpawn001.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wpawn001.png")).getImage();
                                    break;
                                case 'N':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wknight1.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wknight1.png")).getImage();
                                    break;
                                case 'B':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wbishop1.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wbishop1.png")).getImage();
                                    break;
                                case 'R':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wrook001.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wrook001.png")).getImage();
                                    break;
                                case 'Q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wqueen01.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wqueen01.png")).getImage();
                                    break;
                                case 'K':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wking001.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wking001.png")).getImage();
                                    break;
                                case 'p':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bpawn001.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bpawn001.png")).getImage();
                                    break;
                                case 'n':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bknight1.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bknight1.png")).getImage();
                                    break;
                                case 'b':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bbishop1.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bbishop1.png")).getImage();
                                    break;
                                case 'r':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Brook001.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Brook001.png")).getImage();
                                    break;
                                case 'q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bqueen01.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bqueen01.png")).getImage();
                                    break;
                                case 'k':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bking001.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bking001.png")).getImage();
                                    break;
                                case 'A':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wamazon1.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wamazon1.png")).getImage();
                                    break;
                                case 'a':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bamazon1.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bamazon1.png")).getImage();
                                    break;
                            }
                            break;
                        case 2:
                            switch (symbole) {
                                case ' ':
                                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                    break;
                                case 'P':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wpawn002.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wpawn002.png")).getImage();
                                    break;
                                case 'N':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wknight2.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wknight2.png")).getImage();
                                    break;
                                case 'B':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wbishop2.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wbishop2.png")).getImage();
                                    break;
                                case 'R':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wrook002.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wrook002.png")).getImage();
                                    break;
                                case 'Q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wqueen02.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wqueen02.png")).getImage();
                                    break;
                                case 'K':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wking002.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wking002.png")).getImage();
                                    break;
                                case 'p':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bpawn002.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bpawn002.png")).getImage();
                                    break;
                                case 'n':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bknight2.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bknight2.png")).getImage();
                                    break;
                                case 'b':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bbishop2.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bbishop2.png")).getImage();
                                    break;
                                case 'r':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Brook002.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Brook002.png")).getImage();
                                    break;
                                case 'q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bqueen02.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bqueen02.png")).getImage();
                                    break;
                                case 'k':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bking002.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bking002.png")).getImage();
                                    break;
                                case 'A':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wamazon2.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wamazon2.png")).getImage();
                                    break;
                                case 'a':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bamazon2.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bamazon2.png")).getImage();
                                    break;
                            }
                            break;
                    }
                    break;
                case 2:
                    switch (kolor_zestaw) {
                        case 1:
                            switch (symbole) {
                                case ' ':
                                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                    break;
                                case 'P':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wpawn004.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wpawn004.png")).getImage();
                                    break;
                                case 'N':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wknight4.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wknight4.png")).getImage();
                                    break;
                                case 'B':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wbishop4.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wbishop4.png")).getImage();
                                    break;
                                case 'R':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wrook004.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wrook004.png")).getImage();
                                    break;
                                case 'Q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wqueen04.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wqueen04.png")).getImage();
                                    break;
                                case 'K':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wking004.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wking004.png")).getImage();
                                    break;
                                case 'p':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bpawn004.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bpawn004.png")).getImage();
                                    break;
                                case 'n':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bknight4.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bknight4.png")).getImage();
                                    break;
                                case 'b':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bbishop4.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bbishop4.png")).getImage();
                                    break;
                                case 'r':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Brook004.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Brook004.png")).getImage();
                                    break;
                                case 'q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bqueen04.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bqueen04.png")).getImage();
                                    break;
                                case 'k':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bking004.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bking004.png")).getImage();
                                    break;
                                case 'A':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wamazon4.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wamazon4.png")).getImage();
                                    break;
                                case 'a':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bamazon4.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bamazon4.png")).getImage();
                                    break;
                            }
                            break;
                        case 2:
                            switch (symbole) {
                                case ' ':
                                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                    break;
                                case 'P':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wpawn003.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wpawn003.png")).getImage();
                                    break;
                                case 'N':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wknight3.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wknight3.png")).getImage();
                                    break;
                                case 'B':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wbishop3.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wbishop3.png")).getImage();
                                    break;
                                case 'R':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wrook003.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wrook003.png")).getImage();
                                    break;
                                case 'Q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wqueen03.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wqueen03.png")).getImage();
                                    break;
                                case 'K':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wking003.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wking003.png")).getImage();
                                    break;
                                case 'p':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bpawn003.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bpawn003.png")).getImage();
                                    break;
                                case 'n':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bknight3.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bknight3.png")).getImage();
                                    break;
                                case 'b':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bbishop3.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bbishop3.png")).getImage();
                                    break;
                                case 'r':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Brook003.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Brook003.png")).getImage();
                                    break;
                                case 'q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bqueen03.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bqueen03.png")).getImage();
                                    break;
                                case 'k':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bking003.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bking003.png")).getImage();
                                    break;
                                case 'A':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wamazon3.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wamazon3.png")).getImage();
                                    break;
                                case 'a':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bamazon3.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bamazon3.png")).getImage();
                                    break;
                            }
                            break;
                    }
                    break;
                case 3:
                    switch (kolor_zestaw) {
                        case 1:
                            switch (symbole) {
                                case ' ':
                                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                    break;
                                case 'P':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wpawn006.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wpawn006.png")).getImage();
                                    break;
                                case 'N':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wknight6.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wknight6.png")).getImage();
                                    break;
                                case 'B':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wbishop6.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wbishop6.png")).getImage();
                                    break;
                                case 'R':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wrook006.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wrook006.png")).getImage();
                                    break;
                                case 'Q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wqueen06.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wqueen06.png")).getImage();
                                    break;
                                case 'K':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wking006.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wking006.png")).getImage();
                                    break;
                                case 'p':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bpawn006.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bpawn006.png")).getImage();
                                    break;
                                case 'n':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bknight6.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bknight6.png")).getImage();
                                    break;
                                case 'b':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bbishop6.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bbishop6.png")).getImage();
                                    break;
                                case 'r':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Brook006.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Brook006.png")).getImage();
                                    break;
                                case 'q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bqueen06.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bqueen06.png")).getImage();
                                    break;
                                case 'k':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bking006.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bking006.png")).getImage();
                                    break;
                                case 'A':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wamazon6.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wamazon6.png")).getImage();
                                    break;
                                case 'a':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bamazon6.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bamazon6.png")).getImage();
                                    break;
                            }
                            break;
                        case 2:
                            switch (symbole) {
                                case ' ':
                                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                    break;
                                case 'P':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wpawn005.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wpawn005.png")).getImage();
                                    break;
                                case 'N':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wknight5.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wknight5.png")).getImage();
                                    break;
                                case 'B':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wbishop5.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wbishop5.png")).getImage();
                                    break;
                                case 'R':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wrook005.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wrook005.png")).getImage();
                                    break;
                                case 'Q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wqueen05.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wqueen05.png")).getImage();
                                    break;
                                case 'K':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wking005.png")).getImage(),
                                            new Point(0, 0), "custom cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wking005.png")).getImage();
                                    break;
                                case 'p':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bpawn005.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bpawn005.png")).getImage();
                                    break;
                                case 'n':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bknight5.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bknight5.png")).getImage();
                                    break;
                                case 'b':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bbishop5.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bbishop5.png")).getImage();
                                    break;
                                case 'r':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Brook005.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Brook005.png")).getImage();
                                    break;
                                case 'q':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bqueen05.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bqueen05.png")).getImage();
                                    break;
                                case 'k':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bking005.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bking005.png")).getImage();
                                    break;
                                case 'A':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Wamazon5.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Wamazon5.png")).getImage();
                                    break;
                                case 'a':
                                    setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                                            new ImageIcon(this.getClass().getResource("Bamazon5.png")).getImage(),
                                            new Point(0, 0), "custom Cursor"));
                                    ikonka = new ImageIcon(this.getClass().getResource("Bamazon5.png")).getImage();
                                    break;
                            }
                            break;
                    }
                    break;
            }
        }
        dobierz_kursor_na_przycisku(symbole, ikonka);

    }

    private void dobierz_kursor_na_przycisku(char symbole, Image img) {
        mysz = symbole != ' ' ? Toolkit.getDefaultToolkit().createCustomCursor(img, new Point(0, 0), "custom Cursor")
                : Cursor.getDefaultCursor();
        for (int i = 1; i <= 8; i++) {
            for (char j = 'A'; j <= 'H'; j++) {
                dobierzprzycisk(String.valueOf(j + "" + i), false).setCursor(mysz);
            }
        }
    }

    private ArrayList<String> zalatane(Pozycja pozstart, Pozycja pozstop, int limit, ArrayList<String> temp, ArrayList<String> param, int suma) {
        ArrayList<String> wynik = temp;
        jTextArea2.setVisible(true);
        if (limit == 0) {
            return pozstop.equals(pozstart) ? temp : null;
        } else {
            int indeks = 0;
            int maks = Generator.generuj_posuniecia(pozstart.pozycja, pozstart.DWhiteMove, pozstart.przelot_can,
                    pozstart.Dbleft, pozstart.Dbright, pozstart.Dwleft, pozstart.Dwright, pozstart.DKingrochB, pozstart.DKingrochC, pozstart.przelot, false).size();
            for (Ruch r : Generator.generuj_posuniecia(pozstart.pozycja, pozstart.DWhiteMove, pozstart.przelot_can,
                    pozstart.Dbleft, pozstart.Dbright, pozstart.Dwleft, pozstart.Dwright, pozstart.DKingrochB, pozstart.DKingrochC, pozstart.przelot, false)) {
                Pattern pattern = Pattern.compile(param.get(suma - limit).replace('?', '.'));
                Matcher matcher = pattern.matcher(r.toString());
                indeks++;
                if ((param.get(suma - limit)).equals("?????????") || matcher.matches()) {
                    wynik.add((suma - limit + 1) + "." + r.toString());
                    System.out.println(limit + "." + indeks + "/" + maks + " " + r.toString());
                    Pozycja pozstartnew;
                    boolean newprzelot_can;
                    int newprzelot;
                    if (pozstart.DWhiteMove) {
                        newprzelot = (r.wspolczynnik_ruchu == 100
                                && (Math.abs((r.toString().charAt(2)) - (r.toString().charAt(5))) == 2))
                                ? (r.toString().charAt(1)) - 'A' + 1 : 0;
                        newprzelot_can = newprzelot > 0;
                        boolean newDKingrochB = !(r.kolejnosc == 'K' || r.roszada);
                        boolean newDwleft = !(r.toString().substring(1, 3).equals("A1") || r.roszada);
                        boolean newDwright = !(r.toString().substring(1, 3).equals("H1") || r.roszada);
                        pozstartnew = new Pozycja(pozstart.Dbleft, pozstart.Dbright, newDwleft,
                                newDwright, newDKingrochB, pozstart.DKingrochC, false,
                                newprzelot_can, newprzelot, r.chessboard_after);
                    } else {
                        newprzelot = (r.wspolczynnik_ruchu == 100
                                && (Math.abs((r.toString().charAt(2)) - (r.toString().charAt(5))) == 2))
                                ? ((r.toString().charAt(1))) - 'A' + 1 : 0;
                        newprzelot_can = newprzelot > 0;
                        boolean newDKingrochC = !(r.kolejnosc == 'k' || r.roszada);
                        boolean newDbleft = !(r.toString().substring(1, 3).equals("A8") || r.roszada);
                        boolean newDbright = !(r.toString().substring(1, 3).equals("H8") || r.roszada);
                        pozstartnew = new Pozycja(newDbleft, newDbright, pozstart.Dwleft,
                                pozstart.Dwright, pozstart.DKingrochB, newDKingrochC, true,
                                newprzelot_can, newprzelot, r.chessboard_after);
                    }
                    if (pozstop.equals(pozstartnew)) {
                        System.out.println("solved");
                        return wynik;
                    } else {
                        ArrayList<String> temp2 = zalatane(pozstartnew, pozstop, limit - 1, wynik, param, suma);
                        if (temp2 != null) {
                            if (!wynik.containsAll(temp2)) {
                                wynik.addAll(temp2);
                            }
                            return wynik;
                        }
                    }
                    wynik.remove(wynik.size() - 1);
                }
            }
        }
        return null;
    }

    private void styl_tulenie(int kolor_zestaw, int kroj_zestaw, int kolor_plansza) {
        for (char i = 'A'; i < 'I'; i++) {
            for (int j = 0; j < 8; j++) {
                String nazwabuttona = i + String.valueOf(j + 1);
                JButton przycisk = dobierzprzycisk(nazwabuttona, false);
                if (wlasnykolor == false) {
                    if (kolor_plansza == 1) {
                        if ((pole % 2 == 0 && kolumna % 2 == 0) || (kolumna % 2 == 1 && pole % 2 == 1)) {
                            przycisk.setBackground(new Color(102, 102, 102));
                            przycisk.setForeground(new Color(102, 102, 102));
                        } else {
                            przycisk.setBackground(Color.WHITE);
                            przycisk.setForeground(Color.WHITE);
                        }
                    }
                    if (kolor_plansza == 2) {
                        if ((pole % 2 == 0 && kolumna % 2 == 0) || (kolumna % 2 == 1 && pole % 2 == 1)) {
                            przycisk.setBackground(new Color(90, 0, 0));
                            przycisk.setForeground(new Color(90, 0, 0));
                        } else {
                            przycisk.setBackground(new Color(116, 255, 255));
                            przycisk.setForeground(new Color(116, 255, 255));
                        }
                    }
                    if (kolor_plansza == 3) {
                        if ((pole % 2 == 0 && kolumna % 2 == 0) || (kolumna % 2 == 1 && pole % 2 == 1)) {
                            przycisk.setBackground(new Color(115, 69, 19));
                            przycisk.setForeground(new Color(115, 69, 19));
                        } else {
                            przycisk.setBackground(new Color(244, 164, 96));
                            przycisk.setForeground(new Color(244, 164, 96));
                        }
                    }
                }
            }
        }
        for (char i = 'A'; i < 'I'; i++) {
            for (int j = 0; j < 8; j++) {
                String nazwabuttona = i + String.valueOf(j + 1);
                JButton przycisk = dobierzprzycisk(nazwabuttona, false);
                switch (kroj_zestaw) {
                    case 1:
                        switch (kolor_zestaw) {
                            case 1:
                                switch (szachownica_pokoj[j][(int) i - 'A'][0]) {
                                    case 'P':
                                        switch (szachownica_pokoj[j][(int) i - 'A'][1]) {
                                            case ' ':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                                                break;
                                            case 'p':
                                                przycisk.setIcon(przytul_figure[0]);
                                                break;
                                            case 'n':
                                                przycisk.setIcon(przytul_figure[1]);
                                                break;
                                            case 'b':
                                                przycisk.setIcon(przytul_figure[2]);
                                                break;
                                            case 'r':
                                                przycisk.setIcon(przytul_figure[3]);
                                                break;
                                            case 'q':
                                                przycisk.setIcon(przytul_figure[4]);
                                                break;
                                            case 'k':
                                                przycisk.setIcon(przytul_figure[5]);
                                                break;
                                        }
                                        break;
                                    case 'N':
                                        switch (szachownica_pokoj[j][(int) i - 'A'][1]) {
                                            case ' ':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                                                break;
                                            case 'p':
                                                przycisk.setIcon(przytul_figure[6]);
                                                break;
                                            case 'n':
                                                przycisk.setIcon(przytul_figure[7]);
                                                break;
                                            case 'b':
                                                przycisk.setIcon(przytul_figure[8]);
                                                break;
                                            case 'r':
                                                przycisk.setIcon(przytul_figure[9]);
                                                break;
                                            case 'q':
                                                przycisk.setIcon(przytul_figure[10]);
                                                break;
                                            case 'k':
                                                przycisk.setIcon(przytul_figure[11]);
                                                break;
                                        }
                                        break;
                                    case 'B':
                                        switch (szachownica_pokoj[j][(int) i - 'A'][1]) {
                                            case ' ':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                                                break;
                                            case 'p':
                                                przycisk.setIcon(przytul_figure[12]);
                                                break;
                                            case 'n':
                                                przycisk.setIcon(przytul_figure[13]);
                                                break;
                                            case 'b':
                                                przycisk.setIcon(przytul_figure[14]);
                                                break;
                                            case 'r':
                                                przycisk.setIcon(przytul_figure[15]);
                                                break;
                                            case 'q':
                                                przycisk.setIcon(przytul_figure[16]);
                                                break;
                                            case 'k':
                                                przycisk.setIcon(przytul_figure[17]);
                                                break;
                                        }
                                        break;
                                    case 'R':
                                        switch (szachownica_pokoj[j][(int) i - 'A'][1]) {
                                            case ' ':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                                                break;
                                            case 'p':
                                                przycisk.setIcon(przytul_figure[18]);
                                                break;
                                            case 'n':
                                                przycisk.setIcon(przytul_figure[19]);
                                                break;
                                            case 'b':
                                                przycisk.setIcon(przytul_figure[20]);
                                                break;
                                            case 'r':
                                                przycisk.setIcon(przytul_figure[21]);
                                                break;
                                            case 'q':
                                                przycisk.setIcon(przytul_figure[22]);
                                                break;
                                            case 'k':
                                                przycisk.setIcon(przytul_figure[23]);
                                                break;
                                        }
                                        break;
                                    case 'Q':
                                        switch (szachownica_pokoj[j][(int) i - 'A'][1]) {
                                            case ' ':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                                                break;
                                            case 'p':
                                                przycisk.setIcon(przytul_figure[24]);
                                                break;
                                            case 'n':
                                                przycisk.setIcon(przytul_figure[25]);
                                                break;
                                            case 'b':
                                                przycisk.setIcon(przytul_figure[26]);
                                                break;
                                            case 'r':
                                                przycisk.setIcon(przytul_figure[27]);
                                                break;
                                            case 'q':
                                                przycisk.setIcon(przytul_figure[28]);
                                                break;
                                            case 'k':
                                                przycisk.setIcon(przytul_figure[29]);
                                                break;
                                        }
                                        break;
                                    case 'K':
                                        switch (szachownica_pokoj[j][(int) i - 'A'][1]) {
                                            case ' ':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                                                break;
                                            case 'p':
                                                przycisk.setIcon(przytul_figure[30]);
                                                break;
                                            case 'n':
                                                przycisk.setIcon(przytul_figure[31]);
                                                break;
                                            case 'b':
                                                przycisk.setIcon(przytul_figure[32]);
                                                break;
                                            case 'r':
                                                przycisk.setIcon(przytul_figure[33]);
                                                break;
                                            case 'q':
                                                przycisk.setIcon(przytul_figure[34]);
                                                break;
                                        }
                                        break;
                                    case ' ':
                                        switch (szachownica_pokoj[j][(int) i - 'A'][1]) {
                                            case ' ':
                                                przycisk.setIcon(null);
                                                break;
                                            case 'p':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                                break;
                                            case 'n':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                                break;
                                            case 'b':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                                break;
                                            case 'r':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                                                break;
                                            case 'q':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                                break;
                                            case 'k':
                                                przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                                                break;
                                        }
                                        break;
                                }
                                break;
                        }
                }
            }
        }
    }

    private void dostawianka(Object source) {
        JButton BUTTON = (JButton) source;
        if (dostawka) {
            pomoce = BUTTON.getName();
            char pomoc3 = pomoce.charAt(1);
            char pomoc2 = pomoce.charAt(0);
            stop = pomoce;
            int pomocx = 0;
            int pomocy = 0;
            if (odwrot == false) {
                switch (pomoc2) {
                    case 'A':
                        pomocx = 1;
                        break;
                    case 'B':
                        pomocx = 2;
                        break;
                    case 'C':
                        pomocx = 3;
                        break;
                    case 'D':
                        pomocx = 4;
                        break;
                    case 'E':
                        pomocx = 5;
                        break;
                    case 'F':
                        pomocx = 6;
                        break;
                    case 'G':
                        pomocx = 7;
                        break;
                    case 'H':
                        pomocx = 8;
                        break;
                }
                switch (pomoc3) {
                    case '1':
                        pomocy = 1;
                        break;
                    case '2':
                        pomocy = 2;
                        break;
                    case '3':
                        pomocy = 3;
                        break;
                    case '4':
                        pomocy = 4;
                        break;
                    case '5':
                        pomocy = 5;
                        break;
                    case '6':
                        pomocy = 6;
                        break;
                    case '7':
                        pomocy = 7;
                        break;
                    case '8':
                        pomocy = 8;
                        break;
                }
            } else {
                switch (pomoc2) {
                    case 'A':
                        pomocx = 8;
                        break;
                    case 'B':
                        pomocx = 7;
                        break;
                    case 'C':
                        pomocx = 6;
                        break;
                    case 'D':
                        pomocx = 5;
                        break;
                    case 'E':
                        pomocx = 4;
                        break;
                    case 'F':
                        pomocx = 3;
                        break;
                    case 'G':
                        pomocx = 2;
                        break;
                    case 'H':
                        pomocx = 1;
                        break;
                }
                switch (pomoc3) {
                    case '1':
                        pomocy = 8;
                        break;
                    case '2':
                        pomocy = 7;
                        break;
                    case '3':
                        pomocy = 6;
                        break;
                    case '4':
                        pomocy = 5;
                        break;
                    case '5':
                        pomocy = 4;
                        break;
                    case '6':
                        pomocy = 3;
                        break;
                    case '7':
                        pomocy = 2;
                        break;
                    case '8':
                        pomocy = 1;
                        break;
                }
            }
            lokalK[0] = pomocx - 1;
            lokalK[1] = pomocy - 1;
            if (ust[lokalK[1]][lokalK[0]] == ' ' && ((symbol != 'p' && symbol != 'P') || (symbol == 'p' || symbol == 'P') && lokalK[1] != 0 && lokalK[1] != 7)) {
                ust[lokalK[1]][lokalK[0]] = symbol;
                odwrotna[7 - (lokalK[1])][7 - (lokalK[0])] = symbol;
                if (!RuchZagrozenie_kontrola.szach(ust, ruchB)) {
                    char figurka = ' ';
                    switch (symbol) {
                        case 'K':
                            figurka = "\u2654".charAt(0);
                            break;
                        case 'Q':
                            figurka = "\u2655".charAt(0);
                            break;
                        case 'R':
                            figurka = "\u2656".charAt(0);
                            break;
                        case 'B':
                            figurka = "\u2657".charAt(0);
                            break;
                        case 'N':
                            figurka = "\u2658".charAt(0);
                            break;
                        case 'P':
                            figurka = "\u2659".charAt(0);
                            break;
                        case 'k':
                            figurka = "\u265A".charAt(0);
                            break;
                        case 'q':
                            figurka = "\u265B".charAt(0);
                            break;
                        case 'r':
                            figurka = "\u265C".charAt(0);
                            break;
                        case 'b':
                            figurka = "\u265D".charAt(0);
                            break;
                        case 'n':
                            figurka = "\u265E".charAt(0);
                            break;
                        case 'p':
                            figurka = "\u265F".charAt(0);
                            break;
                    }
                    ruchB = ruchB != true;
                    krolS = RuchZagrozenie_kontrola.szach(ust, ruchB);
                    char[][] USTAWIENIE1 = ust;
                    if (krolS) {
                        if (siec == false && symulacja == false) {
                            JOptionPane.showMessageDialog(rootPane, "SZACH! KROL JEST ATAKOWANY", "Ostrzeżenie",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                        Toolkit.getDefaultToolkit().beep();
                        kontrolamat = ust;
                        for (int i = 0; i < 8; i++) {
                            for (int j = 0; j < 8; j++) {
                                USTAWIENIE1[i][j] = ust[i][j];
                                if ((ruchB && kontrolamat[i][j] == 'K') || (ruchB == false && kontrolamat[i][j] == 'k')) {
                                    poza_krolewska[0] = i;
                                    poza_krolewska[1] = j;
                                }
                            }
                        }
                        klopoty = Wspomagacz.znajdzklopot(USTAWIENIE1, ruchB);
                        System.out.println("klopoty X:" + klopoty[0] + "Y:" + klopoty[1]);
                        System.out.println(ust[klopoty[0]][klopoty[1]]);
                        hodu = SzachMatPatKontrola.uciekaj(USTAWIENIE1, ruchB, poza_krolewska);
                        if (hodu == false) {
                            char[][] backupzapas = ust;
                            hitme = SzachMatPatKontrola.znajdzodsiecz(USTAWIENIE1, ruchB, Wspomagacz.znajdzklopot(USTAWIENIE1, ruchB), kol, przelotcan);
                            if (hitme == false) {
                                protectme = SzachMatPatKontrola.zastaw(backupzapas.clone(), ruchB, Wspomagacz.znajdzklopot(backupzapas, ruchB), poza_krolewska, przelotcan);
                                if (Math.abs(klopoty[1] - poza_krolewska[0]) != 1 && Math.abs(klopoty[0] - poza_krolewska[1]) != 1 && !protectme) {
                                    protectme = (ruchB ? (rezerwyBG + rezerwyBH + ((Wspomagacz.znajdzklopot(USTAWIENIE1, ruchB)[1] == poza_krolewska[1] && (poza_krolewska[1] == 7 || poza_krolewska[1] == 0)) ? rezerwyBP : 0) + rezerwyBS + rezerwyBW > 0)
                                            : (rezerwyCG + rezerwyCH + ((Wspomagacz.znajdzklopot(USTAWIENIE1, ruchB)[1] == poza_krolewska[1] && (poza_krolewska[1] == 7 || poza_krolewska[1] == 0)) ? rezerwyBP : 0) + rezerwyCS + rezerwyCW > 0))
                                            && ((Math.abs(poza_krolewska[0] - (Wspomagacz.znajdzklopot(USTAWIENIE1, ruchB)[0])) > 1 || Math.abs(poza_krolewska[1] - (Wspomagacz.znajdzklopot(USTAWIENIE1, ruchB)[1])) > 1) && ust[klopoty[0]][klopoty[1]] != 'n' && ust[klopoty[0]][klopoty[1]] != 'N');

                                } else {
                                    protectme = false;
                                }
                            }
                        }
                        System.out.println(Wspomagacz.znajdzklopot(USTAWIENIE1, ruchB)[0] + "|" + Wspomagacz.znajdzklopot(USTAWIENIE1, ruchB)[1] + "  " + poza_krolewska[0] + "|" + poza_krolewska[1]);
                        System.out.println(hodu + " " + hitme + " " + protectme);
                        if (hodu == false && hitme == false && protectme == false) {
                            if (czasgry != -1) {
                                whitetime.interrupt();
                                blacktime.interrupt();
                            }
                            JOptionPane.showMessageDialog(rootPane, "SZACH MAT!", "Ostrzeżenie",
                                    JOptionPane.WARNING_MESSAGE);
                            SI_ON = false;
                            symulacja = false;
                            losowanko.setEnabled(false);
                            gra = false;
                            ustawka = false;
                            partia_odlozona.setEnabled(false);
                        }
                    } else {
                        krolS = false;
                        move = false;
                        USTAWIENIE1 = ust;
                        for (int i = 0; i < 8; i++) {
                            for (int j = 0; j < 8; j++) {
                                if (ust[i][j] != ' ') {
                                    pole_baza[0] = j;
                                    pole_baza[1] = i;
                                    if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                        if ((ruchB && ust[i][j] == 'K') || (ruchB == false && ust[i][j] == 'k')) {
                                            pole_baza[0] = i;
                                            pole_baza[1] = j;
                                            hodu = SzachMatPatKontrola.uciekaj(ust, ruchB, pole_baza);
                                        }
                                    } else {
                                        move = SzachMatPatKontrola.znajdz_ruch(ust, ruchB, ust[i][j], pole_baza, przelotcan);
                                        if (move) {
                                            break;
                                        }
                                    }
                                }
                            }
                            if (move) {
                                break;
                            }
                        }
                        move = ((ruchB && rezerwyBG + rezerwyBH + rezerwyBP + rezerwyBS + rezerwyBW == 0) || (!ruchB && rezerwyCG + rezerwyCH + rezerwyCP + rezerwyCS + rezerwyCW == 0));
                    }
                    for (int i = 0; i < 8; i++) {
                        System.arraycopy(USTAWIENIE1[i], 0, ust[i], 0, 8);
                    }
                    odwrot = !odwrot;
                    if (!odwrot && obrotowy.getText().equals("Obrót WŁ")) {
                        System.out.println("zamiana");
                        switch (stop.charAt(0)) {
                            case 'A':
                                stop = stop.replace('A', 'H');
                                break;
                            case 'B':
                                stop = stop.replace('B', 'G');
                                break;
                            case 'C':
                                stop = stop.replace('C', 'F');
                                break;
                            case 'D':
                                stop = stop.replace('D', 'E');
                                break;
                            case 'E':
                                stop = stop.replace('E', 'D');
                                break;
                            case 'F':
                                stop = stop.replace('F', 'C');
                                break;
                            case 'G':
                                stop = stop.replace('G', 'B');
                                break;
                            case 'H':
                                stop = stop.replace('H', 'A');
                                break;
                        }
                        switch (stop.charAt(1)) {
                            case '1':
                                stop = stop.replace('1', '8');
                                break;
                            case '2':
                                stop = stop.replace('2', '7');
                                break;
                            case '3':
                                stop = stop.replace('3', '6');
                                break;
                            case '4':
                                stop = stop.replace('4', '5');
                                break;
                            case '5':
                                stop = stop.replace('5', '4');
                                break;
                            case '6':
                                stop = stop.replace('6', '3');
                                break;
                            case '7':
                                stop = stop.replace('7', '2');
                                break;
                            case '8':
                                stop = stop.replace('8', '1');
                                break;
                        }
                    }
                    String ruchS;
                    ostatni_start = "";
                    ostatni_stop = stop;
                    czysc_rame();
                    ustawrame();
                    if (ruchB == false) {
                        jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ". " + symbol + "@" + stop) : (movenr + ".  " + figurka + "@" + stop));
                        ruch = symbol + "@" + stop;
                        ruchS = figurka + "@" + stop;
                        if (krolS) {
                            if (hodu == false && hitme == false && protectme == false) {
                                jTextArea3.append("#");
                                ruch += ("#");
                                ruchS += ("#");
                            } else {
                                jTextArea3.append("+");
                                ruch += ("+");
                                ruchS += ("+");
                            }
                        }
                    } else {
                        jTextArea3.append(!jCheckBox1.isSelected() ? ("     " + symbol + "@" + stop) : ("      " + figurka + "@" + stop));
                        ruch = symbol + "@" + stop;
                        ruchS = figurka + "@" + stop;
                        if (krolS) {
                            if (hodu == false && hitme == false && protectme == false) {
                                jTextArea3.append("#");
                                ruch += ("#");
                                ruchS += ("#");
                            } else {
                                jTextArea3.append("+");
                                ruch += ("+");
                                ruchS += ("+");
                            }
                        }
                        jTextArea3.append("\n");
                        movenr = movenr + 1;
                    }
                    switch (symbol) {
                        case 'P':
                            rezerwyBP--;
                            break;
                        case 'p':
                            rezerwyCP--;
                            break;
                        case 'N':
                            rezerwyBS--;
                            break;
                        case 'n':
                            rezerwyCS--;
                            break;
                        case 'B':
                            rezerwyBG--;
                            break;
                        case 'b':
                            rezerwyCG--;
                            break;
                        case 'R':
                            rezerwyBW--;
                            break;
                        case 'r':
                            rezerwyCW--;
                            break;
                        case 'Q':
                            rezerwyBH--;
                            break;
                        case 'q':
                            rezerwyCH--;
                            break;
                    }
                    dostawka = false;
                    symbol = ' ';
                    dobierz_kursor(symbol);
                    if (odwrot == true) {
                        odwrot = false;
                    }
                    styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                    ruchy_literowe.add(ruch);
                    ruchy_syboliczne.add(ruchS);
                    pomoc_ruch = ruchB ? Color.BLUE : Color.RED;

                    kapitulacja();
                } else {
                    ust[lokalK[1] - 1][lokalK[0] - 1] = ' ';
                    Toolkit.getDefaultToolkit().beep();
                }
            } else {
                Toolkit.getDefaultToolkit().beep();
            }
        } else {
            Button_Clicked(source);
            if (!polestart) {
                symbol = ' ';
                schodzi = ' ';
            }
        }

        hetmanRW.setText(!odwrot ? String.valueOf(rezerwyBH) : String.valueOf(rezerwyCH));
        hetmanRB.setText(!odwrot ? String.valueOf(rezerwyCH) : String.valueOf(rezerwyBH));
        wiezaRW.setText(!odwrot ? String.valueOf(rezerwyBW) : String.valueOf(rezerwyCW));
        wiezaRB.setText(!odwrot ? String.valueOf(rezerwyCW) : String.valueOf(rezerwyBW));
        goniecRW.setText(!odwrot ? String.valueOf(rezerwyBG) : String.valueOf(rezerwyCG));
        goniecRB.setText(!odwrot ? String.valueOf(rezerwyCG) : String.valueOf(rezerwyBG));
        skoczekRW.setText(!odwrot ? String.valueOf(rezerwyBS) : String.valueOf(rezerwyCS));
        skoczekRB.setText(!odwrot ? String.valueOf(rezerwyCS) : String.valueOf(rezerwyBS));
        pionRW.setText(!odwrot ? String.valueOf(rezerwyBP) : String.valueOf(rezerwyCP));
        pionRB.setText(!odwrot ? String.valueOf(rezerwyCP) : String.valueOf(rezerwyBP));
        hetmanRW.setEnabled(!odwrot ? (rezerwyBH > 0 && ruchB) : (rezerwyCH > 0 && !ruchB));
        hetmanRB.setEnabled(!odwrot ? (rezerwyCH > 0 && !ruchB) : (rezerwyBH > 0 && ruchB));
        wiezaRW.setEnabled(!odwrot ? (rezerwyBW > 0 && ruchB) : (rezerwyCW > 0 && !ruchB));
        wiezaRB.setEnabled(!odwrot ? (rezerwyCW > 0 && !ruchB) : (rezerwyBW > 0 && ruchB));
        goniecRW.setEnabled(!odwrot ? (rezerwyBG > 0 && ruchB) : (rezerwyCG > 0 && !ruchB));
        goniecRB.setEnabled(!odwrot ? (rezerwyCG > 0 && !ruchB) : (rezerwyBG > 0 && ruchB));
        skoczekRW.setEnabled(!odwrot ? (rezerwyBS > 0 && ruchB) : (rezerwyCS > 0 && !ruchB));
        skoczekRB.setEnabled(!odwrot ? (rezerwyCS > 0 && !ruchB) : (rezerwyBS > 0 && ruchB));
        pionRW.setEnabled(!odwrot ? (rezerwyBP > 0 && ruchB) : (rezerwyCP > 0 && !ruchB));
        pionRB.setEnabled(!odwrot ? (rezerwyCP > 0 && !ruchB) : (rezerwyBP > 0 && ruchB));
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        hetmanRW.setIcon(odwrot ? c1 : b1);
        hetmanRB.setIcon(odwrot ? b1 : c1);
        wiezaRW.setIcon(odwrot ? c2 : b2);
        wiezaRB.setIcon(odwrot ? b2 : c2);
        goniecRW.setIcon(odwrot ? c3 : b3);
        goniecRB.setIcon(odwrot ? b3 : c3);
        skoczekRW.setIcon(odwrot ? c4 : b4);
        skoczekRB.setIcon(odwrot ? b4 : c4);
        pionRW.setIcon(odwrot ? c5 : b5);
        pionRB.setIcon(odwrot ? b5 : c5);

    }

    private void create_set_game() {
        kombinacja.setVisible(true);
        odwrot = false;
        SIOnOff.setEnabled(false);
        Wydruk.setEnabled(true);
        partia_odlozona.setVisible(false);
        menu_load.setVisible(false);
        Menu_gry_glowne.setEnabled(false);
        for (int i = 0; i < 8; i++) {
            for (char j = 'A'; j < 'I'; j++) {
                dobierzprzycisk(String.valueOf(j + "" + (i + 1)), false).setEnabled(true);
                ust[i][j - 'A'] = ' ';
                odwrotna[i][j - 'A'] = ' ';
            }
        }
        przelotowe.setVisible(false);
        jLabel20.setVisible(false);
        mazyna_losujaca.setEnabled(false);
        krole_biale = 0;
        krole_czarne = 0;
        ustawka = true;
        Blackkingside.setVisible(true);
        Whitekingside.setVisible(true);
        Blackqueenside.setVisible(true);
        Whitequeenside.setVisible(true);
        obrotowy.setVisible(!(SI_ON || siec));
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
        jButton72.setVisible(true);
        czarneRuch.setVisible(true);
        bialeRuch.setVisible(true);
        jRadioButton11.setVisible(true);
        ustawWP.setVisible(true);
        ustawBP.setVisible(true);
        ustawWN.setVisible(true);
        ustawBN.setVisible(true);
        ustawWB.setVisible(true);
        ustawBB.setVisible(true);
        ustawWR.setVisible(true);
        ustawBR.setVisible(true);
        ustawWQ.setVisible(true);
        ustawBQ.setVisible(true);
        ustawWK.setVisible(true);
        ustawBK.setVisible(true);
        zasada50 = 0;
        dolicz = false;
        lekkieB = 0;
        lekkieC = 0;
        ciezkieB = 0;
        ciezkieC = 0;
        pionB = 0;
        pionC = 0;
        symbol = ' ';
        buttonGroup3.clearSelection();
        buttonGroup4.clearSelection();
        przelotowe.setVisible(true);
        jLabel20.setVisible(true);
    }

    private void laduj_wstrzymane(java.awt.event.ActionEvent evt) {
        JFileChooser wyborP = new JFileChooser();
        wyborP.setFileFilter(new FileNameExtensionFilter("txt file", "txt"));
        menu_load.setVisible(false);
        wyborP.setAcceptAllFileFilterUsed(false);
        if (wyborP.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            pionB = 0;
            pionC = 0;
            lekkieB = 0;
            lekkieC = 0;
            ciezkieB = 0;
            ciezkieC = 0;
            try {
                String katalog = wyborP.getSelectedFile().getCanonicalPath();
                String nazwa = wyborP.getSelectedFile().getName();
                jTextArea3.setText("");
                System.out.println(katalog + nazwa);
                File plik = new File(katalog);

                BufferedReader inP;
                inP = new BufferedReader(new InputStreamReader(
                        new FileInputStream(plik), "UTF-8"));
                for (int i = 0; i < 8; i++) {
                    String zdanie = inP.readLine();
                    for (int j = 0; j < 8; j++) {
                        ust[i][j] = zdanie.charAt(j);
                        odwrotna[7 - i][7 - j] = zdanie.charAt(j);
                        switch (zdanie.charAt(j)) {
                            case 'P':
                                pionB++;
                                break;
                            case 'p':
                                pionC++;
                                break;
                            case 'N':
                            case 'B':
                                lekkieB++;
                                break;
                            case 'n':
                            case 'b':
                                lekkieC++;
                                break;
                            case 'Q':
                            case 'R':
                                ciezkieB++;
                                break;
                            case 'r':
                            case 'q':
                                ciezkieC++;
                                break;

                        }
                    }
                }
                String zdanie = inP.readLine();
                StringTokenizer st = new StringTokenizer(zdanie, "|");
                ruchB = Boolean.parseBoolean(st.nextToken());
                przelotcan = Boolean.parseBoolean(st.nextToken());
                kingrochB = Boolean.parseBoolean(st.nextToken());
                kingrochC = Boolean.parseBoolean(st.nextToken());
                dokonano_RB = Boolean.parseBoolean(st.nextToken());
                dokonano_RC = Boolean.parseBoolean(st.nextToken());
                dolicz = Boolean.parseBoolean(st.nextToken());
                wright = Boolean.parseBoolean(st.nextToken());
                wleft = Boolean.parseBoolean(st.nextToken());
                bright = Boolean.parseBoolean(st.nextToken());
                bleft = Boolean.parseBoolean(st.nextToken());
                zdanie = inP.readLine();
                st = new StringTokenizer(zdanie);
                zasada50 = Byte.parseByte(st.nextToken("+"));
                kol = Byte.parseByte(st.nextToken("+"));
                movenr = Integer.parseInt(st.nextToken("+"));
                zdanie = inP.readLine();
                while (!"----".equals(zdanie)) {
                    historia.add(zdanie);
                    zdanie = inP.readLine();
                }
                while ((zdanie = inP.readLine()) != null) {
                    if (zdanie.equals("----")) {
                        System.out.println(zdanie);
                        break;
                    }
                    System.out.println(zdanie);
                    ruchy_literowe.add(zdanie);
                    String promotemp = "";
                    if (zdanie.length() >= 8) {
                        if (zdanie.charAt(6) == '=') {
                            switch (zdanie.charAt(7)) {
                                case 'Q':
                                    promotemp = zdanie.length() == 8 ? "=\u2655" : ("=\u2655" + zdanie.substring(8));
                                    break;
                                case 'R':
                                    promotemp = zdanie.length() == 8 ? "=\u2656" : ("=\u2656" + zdanie.substring(8));
                                    break;
                                case 'B':
                                    promotemp = zdanie.length() == 8 ? "=\u2657" : "=\u2657" + zdanie.substring(8);
                                    break;
                                case 'N':
                                    promotemp = zdanie.length() == 8 ? "=\u2658" : "=\u2658" + zdanie.substring(8);
                                    break;
                                case 'q':
                                    promotemp = zdanie.length() == 8 ? "=\u265B" : "=\u265B" + zdanie.substring(8);
                                    break;
                                case 'r':
                                    promotemp = zdanie.length() == 8 ? "=\u265C" : "=\u265C" + zdanie.substring(8);
                                    break;
                                case 'b':
                                    promotemp = zdanie.length() == 8 ? "=\u265D" : "=\u265D" + zdanie.substring(8);
                                    break;
                                case 'n':
                                    promotemp = zdanie.length() == 8 ? "=\u265E" : "=\u265E" + zdanie.substring(8);
                                    break;
                            }
                        }
                    }
                    switch (zdanie.charAt(0)) {
                        case 'K':
                            ruchy_syboliczne.add("\u2654" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'Q':
                            ruchy_syboliczne.add("\u2655" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'R':
                            ruchy_syboliczne.add("\u2656" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'B':
                            ruchy_syboliczne.add("\u2657" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'N':
                            ruchy_syboliczne.add("\u2658" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'P':
                            ruchy_syboliczne.add("\u2659" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'k':
                            ruchy_syboliczne.add("\u265A" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'q':
                            ruchy_syboliczne.add("\u265B" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'r':
                            ruchy_syboliczne.add("\u265C" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'b':
                            ruchy_syboliczne.add("\u265D" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'n':
                            ruchy_syboliczne.add("\u265E" + zdanie.substring(1, 6) + promotemp);
                            break;
                        case 'p':
                            ruchy_syboliczne.add("\u265F" + zdanie.substring(1, 6) + promotemp);
                            break;
                        default:
                            ruchy_syboliczne.add(zdanie);
                            break;
                    }
                }

                jCheckBox1ActionPerformed(null);
                pomoc_ruch = ruchB ? Color.BLUE : Color.RED;
                JOptionPane.showMessageDialog(rootPane, "Ruch mają " + (ruchB ? "białe" : "czarne") + ".");

                ustawka = false;
                for (int i = 1; i <= 8; i++) {
                    for (char j = 'A'; j <= 'H'; j++) {
                        dobierzprzycisk(String.valueOf(j + "" + i), false).setEnabled(true);
                    }
                }
                Wydruk.setEnabled(true);
                styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                poddanie.setEnabled(true);
                remis_prop.setEnabled(true);
                tryb = 0;
                gra = true;
                partia_odlozona.setVisible(true);
                Wydruk.setEnabled(true);
                SIOnOff.setEnabled(true);
                Menu_gry_glowne.setEnabled(false);
            } catch (HeadlessException | IOException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(partia_odlozona, "Wystąpił nieoczekiwany błąd");
                resetgameActionPerformed(evt);
            }
        }
    }

    private void online_create_game() {
        Object[] opcjeK = {KB, KC, KL};
        URI whatismyip = null;
        String ip2 = "";
        try {
            whatismyip = new URI("http://checkip.amazonaws.com");
        } catch (URISyntaxException ex) {
            Logger.getLogger(SzachowaArena.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader in2 = null;
        try {
            in2 = new BufferedReader(new InputStreamReader(
                    whatismyip.toURL().openStream()));
        } catch (IOException ex) {
            Logger.getLogger(SzachowaArena.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        String lokalneIP = "";
        try {
            ip2 = in2.readLine();
            lokalneIP = InetAddress.getLocalHost().getHostAddress();
        } catch (IOException ex) {
            Logger.getLogger(SzachowaArena.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        jLabel9.setText("twoje ip globalne:" + ip2 + "  ip lokalne:" + lokalneIP);
        wybor = JOptionPane.showOptionDialog(null, "WYBIERZ KOLOR", "WYBÓR",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeK, null);
        Random los = new Random();
        switch (wybor) {
            case 0:
                oczekiwanie = false;
                break;
            case 1:
                oczekiwanie = true;
                odwrot = true;
                break;
            case 2:
            default:
                oczekiwanie = los.nextBoolean();
                break;
        }
        if (odwrot) {
            JLabel pom1 = zegarbiale;
            zegarbiale = zegarczarne;
            zegarczarne = pom1;
        }
        Object[] opcje_czasu = {"60", "30", "15+10", "10", "5+5", "5", "3+2", "3", "2+1", "1", "inny system"};
        Object[] opcje_trybu = {"klasyczny bez limitu", "klasyczny na czas", "SzachMaty"};
        tryb = (byte) JOptionPane.showOptionDialog(rootPane, "wybierz opcje gry", "opcje gry", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcje_trybu, null);
        zegarbiale.setText("--:--");
        zegarczarne.setText("--:--");
        if (tryb == 1) {
            czasgry = JOptionPane.showOptionDialog(rootPane, "wybierz opcje czasowe", "opcje czasu", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcje_czasu, null);
        }
        if (tryb == 2) {
            boolean prawidlowosc;
            do {
                try {
                    sek = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "podaj na ruch w sekundach", "parametry gry", JOptionPane.INFORMATION_MESSAGE));
                    prawidlowosc = sek > 0;
                    if (prawidlowosc) {
                        seksyg = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "podaj dlugosc sygnału(mniejszy niż czas na ruch)", "parametry gry", JOptionPane.INFORMATION_MESSAGE));
                        prawidlowosc = sek > seksyg && seksyg > 0;
                        if (prawidlowosc) {
                            sekbaza = sek;
                            blokada = new ReentrantLock();
                            warunek = blokada.newCondition();
                            czasB = (new zegar(sek * 1000, zegarbiale, blokada, warunek, true, tryb, seksyg));
                            czasC = (new zegar(sek * 1000, zegarczarne, blokada, warunek, false, tryb, seksyg));
                            zegarbiale.setText(String.valueOf(sek));
                            zegarczarne.setText(String.valueOf(sek));
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą \n bez wartosci po przecinku", "błąd parametru", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą \n bez wartosci po przecinku", "błąd parametru", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (HeadlessException | NumberFormatException e) {
                    JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą \n bez wartosci po przecinku", "błąd parametru", JOptionPane.ERROR_MESSAGE);
                    prawidlowosc = false;
                }
            } while (!prawidlowosc);
        }

        blokada = new ReentrantLock();
        warunek = blokada.newCondition();
        int bazamin = 0;
        if (tryb == 1) {
            switch (czasgry) {
                case 0:
                    czasB = (new zegar(60 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(60 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("60:00");
                    zegarczarne.setText("60:00");
                    break;
                case 1:
                    czasB = (new zegar(30 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(30 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("30:00");
                    zegarczarne.setText("30:00");

                    break;
                case 2:
                    czasB = (new zegar(15 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(15 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    bonuss = 10;
                    zegarbiale.setText("15:00");
                    zegarczarne.setText("15:00");
                    break;
                case 3:
                    czasB = (new zegar(10 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(10 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("10:00");
                    zegarczarne.setText("10:00");
                    break;
                case 4:
                    czasB = (new zegar(5 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(5 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("5:00");
                    zegarczarne.setText("5:00");
                    bonuss = 5;
                    break;
                case 5:
                    czasB = (new zegar(5 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(5 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("5:00");
                    zegarczarne.setText("5:00");
                    break;
                case 6:
                    czasB = (new zegar(3 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(3 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("3:00");
                    zegarczarne.setText("3:00");
                    bonuss = 2;
                    break;
                case 7:
                    czasB = (new zegar(3 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(3 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("3:00");
                    zegarczarne.setText("3:00");
                    break;
                case 8:
                    czasB = (new zegar(2 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(2 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("2:00");
                    zegarczarne.setText("2:00");
                    bonuss = 1;
                    break;
                case 9:
                    czasB = (new zegar(60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("1:00");
                    zegarczarne.setText("1:00");
                    break;
                case 10:
                    boolean prawidlowosc;
                    do {
                        try {
                            bazamin = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "podaj czas na grę w minutach", "parametry gry", JOptionPane.INFORMATION_MESSAGE));
                            prawidlowosc = bazamin > 0;
                            if (prawidlowosc) {
                                bonuss = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "podaj czas dodawany do czasy  sekundach", "parametry gry", JOptionPane.INFORMATION_MESSAGE));
                                if (bonuss >= 0) {
                                    czasB = (new zegar(bazamin * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(bazamin * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText(bazamin + ":00");
                                    zegarczarne.setText(bazamin + ":00");
                                } else {
                                    prawidlowosc = false;
                                    JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą większą od 0 \n bez wartosci po przecinku", "błąd parametrów", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą \n bez wartosci po przecinku", "bląd parametru", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (HeadlessException | NumberFormatException e) {
                            JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą \n bez wartosci po przecinku", "bląd parametru", JOptionPane.ERROR_MESSAGE);
                            prawidlowosc = false;
                        }
                    } while (prawidlowosc != true);
                    break;
                default:
                    zegarbiale.setText("--:--");
                    zegarczarne.setText("--:--");
                    czasgry = 0;
                    break;
            }
        }
        jTextArea2.setVisible(true);
        jTextField1.setVisible(true);
        jButton81.setVisible(true);
        Menu_gry_glowne.setEnabled(false);
        siec = true;
        organizator = true;
        try {
            int port = 6070;
            JOptionPane.showMessageDialog(rootPane, "czekaj aż ktoś się z tobą polączy na porcie " + port + "(do 5 minut) \n"
                    + "jeśli twój partner nie zna twego IP, podaj mu i liczbę 6070 port połączenia\n"
                    + "w przypadku braku połączenia z innym graczem w ciągu minuty\n będziesz mógł znowu wysłać zapytanie o grę lub zagrać stacjonarnie", "informacja", JOptionPane.INFORMATION_MESSAGE);
            server = new ServerSocket(port);
            server.setSoTimeout(300000);

            socket = server.accept();
            socket.getRemoteSocketAddress();
            DataInputStream in3 = new DataInputStream(socket.getInputStream());
            DataOutputStream out3 = new DataOutputStream(socket.getOutputStream());
            if (!in3.readUTF().equals("TEST")) {
                in = new DataInputStream(socket.getInputStream());
                out = new DataOutputStream(socket.getOutputStream());
                SIOnOff.setEnabled(false);
            } else {
                in3.close();
                out3.close();
                server.close();
                socket.close();
                server = new ServerSocket(port);
                server.setSoTimeout(300000);
                socket = server.accept();
                socket.getRemoteSocketAddress();
                in = new DataInputStream(socket.getInputStream());
                out = new DataOutputStream(socket.getOutputStream());
            }
            polacz(bazamin);
        } catch (IOException e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(rootPane, "nie udało się połączyć, upłynął czas oczekiwania", "informacja", JOptionPane.ERROR_MESSAGE);
            zegarbiale.setText("czas białych");
            zegarczarne.setText("czas czarnych");
            jTextArea2.setVisible(false);
            jTextField1.setVisible(false);
            jButton81.setVisible(false);
            Menu_gry_glowne.setEnabled(true);
            siec = false;
            organizator = false;
            try {
                if (server != null) {
                    server.close();
                }
            } catch (IOException ex) {
            }
        }
    }

    private void online_join_game() {
        int portk = 6070;
        jTextArea2.setVisible(true);
        jTextField1.setVisible(true);
        jButton81.setVisible(true);
        Menu_gry_glowne.setEnabled(false);
        siec = true;
        int[] adresik = new int[4];
        try {
            System.out.println(InetAddress.getLocalHost().getHostAddress());

            StringTokenizer tokeny = new StringTokenizer(InetAddress.getLocalHost().getHostAddress(), ".", false);
            adresik[0] = Integer.parseInt(tokeny.nextToken());
            adresik[1] = Integer.parseInt(tokeny.nextToken());
            adresik[2] = Integer.parseInt(tokeny.nextToken());
        } catch (UnknownHostException ex) {

        }
        try {

            scanip = new Thread() {  //creazione del thread responsabile per la scansione

                @Override
                public void run() {

                    ExecutorService exec = Executors.newCachedThreadPool();  //ExecutorService, mi permette di gestire e interrompere i sotto-thread che vengono creati

                    int progres = 2;
                    for (int i = 2; i <= 254; i++) {
                        try {
                            Thread.sleep(230);
                        } catch (InterruptedException ex) {
                        }
                        exec.execute(new Pingowanie((adresik[0] + "." + adresik[1] + "."
                                + adresik[2] + "."),
                                (adresik[0] + "." + adresik[1] + "."
                                + adresik[2] + ".") + i)
                        );
                        progres++;
                    }
                    exec.shutdown();
                    if (progres == 255) {
                        scanip.interrupt();
                    }

                }
            };
            scanip.start();
            while (!scanip.isInterrupted()) {
            }
            choices = new String[listaip.size() + 2];
            int numerek = 0;
            for (String ip : listaip) {
                choices[numerek] = ip;
                numerek = numerek + 1;
            }
            choices[numerek] = "127.0.0.1";
            choices[numerek + 1] = "Gość z obcej sieci";
            String serverName2 = (String) JOptionPane.showInputDialog(
                    this, // optional reference to frame/window or null
                    "Wybierz gracza...", // prompt displayed over list
                    "Wybór gracza", // title
                    JOptionPane.QUESTION_MESSAGE, // message style
                    null, // Use default icon for message style
                    choices, // array of choices
                    null);
            String serverName = null;
            for (int i = 0; i < choices.length - 1; i++) {
                if (serverName2.equals(choices[i])) {
                    serverName = choices[i];
                }
            }
            if (serverName == null) {
                String serverName3 = JOptionPane.showInputDialog(rootPane, "wybierz ip przeciwnika", "nawiąż połączenie", JOptionPane.INFORMATION_MESSAGE);
                socket = new Socket();
                socket.connect(new InetSocketAddress(serverName3, portk), 1000);
            } else {
                socket = new Socket();
                socket.connect(new InetSocketAddress(serverName, portk), 1000);
            }
            in = new DataInputStream(socket.getInputStream());
            out = new DataOutputStream(socket.getOutputStream());
            out.writeUTF("");
            jTextArea2.setText(jTextArea2.getText().trim() + "polaczono z innym graczem" + "\n");
            SIOnOff.setEnabled(false);
            zegarbiale.setText("--:--");
            zegarczarne.setText("--:--");
            obrotowy.setText("Obrót WYŁ");
            Wydruk.setEnabled(true);
            polaczenie_net = new lacze();
            polaczenie_net.start();

            for (int i = 1; i <= 8; i++) {
                for (char j = 'A'; j <= 'H'; j++) {
                    dobierzprzycisk(String.valueOf(j + "" + i), false).setEnabled(true);
                }
            }
            Menu_gry_glowne.setEnabled(false);
            gra = true;
            zasada50 = 0;
            dolicz = false;
            lekkieB = 4;
            lekkieC = 4;
            ciezkieB = 3;
            ciezkieC = 3;
            pionB = 8;
            pionC = 8;
            ustawka = false;
            obrotowy.setVisible(false);
        } catch (IOException ex) {
            zegarbiale.setText("czas białych");
            zegarczarne.setText("czas czarnych");
            jTextArea2.setVisible(false);
            jTextField1.setVisible(false);
            jButton81.setVisible(false);
            Menu_gry_glowne.setEnabled(true);
            siec = false;
            JOptionPane.showMessageDialog(rootPane, "nie udało się połączyć", "błąd połączenia", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void new_game(int tryb_cel, boolean SION, boolean SI_color) {

        String[] opcje_czasu = {"01. 60", "02. 30", "03. 15+10", "04. 10", "05. 5+5",
            "06. 5", "07. 3+2", "08. 3", "09. 2+1", "10. 1", "11. inny system"};

        sztuczny_rywal = !SION ? 0 : (SI_color ? 1 : 2);
        JSlider suwak_trudnosci = new JSlider(1, 14, 1);
        Hashtable<Integer, JLabel> Opisy = new Hashtable<>();
        suwak_trudnosci.setOrientation(JSlider.VERTICAL);
        suwak_trudnosci.setMinorTickSpacing(1);
        menu_load.setVisible(false);
        Opisy.put(1, new JLabel("Nowicjusz"));
        Opisy.put(2, new JLabel("Przeciętny"));
        Opisy.put(4, new JLabel("Doświadczony"));
        Opisy.put(6, new JLabel("Weteran"));
        Opisy.put(8, new JLabel("Mistrz"));
        Opisy.put(10, new JLabel("Kandydat na Arcymistrza"));
        Opisy.put(12, new JLabel("Arcymistrz"));
        Opisy.put(14, new JLabel("Wielki Arcymistrz"));
        suwak_trudnosci.setLabelTable(Opisy);
        suwak_trudnosci.setPaintTicks(true);
        suwak_trudnosci.setPaintLabels(true);
        czasgry = -1;
        switch (sztuczny_rywal) {
            case 1:
                tura_rywala = false;
                tryb = 0;
                SI_ON = true;
                odwrot = false;
                obrotowy.setText("Obrót WYŁ");
                JOptionPane.showMessageDialog(null, suwak_trudnosci, "wybierz stopień trudności", JOptionPane.INFORMATION_MESSAGE);
                glebiaSI = (byte) (((byte) suwak_trudnosci.getValue()));
                break;
            case 2:
                tura_rywala = true;
                tryb = 0;
                SI_ON = true;
                odwrot = true;
                obrotowy.setText("Obrót WYŁ");
                JOptionPane.showMessageDialog(null, suwak_trudnosci, "wybierz stopień trudności", JOptionPane.INFORMATION_MESSAGE);
                glebiaSI = (byte) (((byte) suwak_trudnosci.getValue()));
                break;
            case 0:
                obrotowy.setText("Obrót WŁ");
                SI_ON = false;
                break;
            default:
                SI_ON = false;
                obrotowy.setText("Obrót WŁ");
                break;
        }
        System.out.println(glebiaSI);
        if (odwrot) {
            JLabel pomoc1 = zegarbiale;
            zegarbiale = zegarczarne;
            zegarczarne = pomoc1;
        }
        tryb = tryb_cel;
        oldschool.setEnabled(tryb < 3 || tryb > 5 || tryb == 4);
        oldschool1.setEnabled(tryb < 3 || tryb > 5 || tryb == 4);
        Wydruk.setEnabled(tryb < 3);
        System.out.println("tryb " + tryb);
        jTextArea3.setVisible(true);
        switch (tryb) {

            case 1:
                String[] options = {"OK"};
                JComboBox<String> opcje = new JComboBox<>(opcje_czasu);
                JOptionPane.showOptionDialog(null, opcje, "wybór odmiany",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options,
                        options[0]);
                czasgry = opcje.getSelectedIndex();
                break;
            case 2:
                obrotowy.setText("Obrót WYŁ");
                odwrot = false;
                obrotowy.setEnabled(false);
                boolean prawidlowosc;
                do {
                    try {
                        sek = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "podaj na ruch w sekundach", "parametry gry", JOptionPane.INFORMATION_MESSAGE));
                        prawidlowosc = sek > 0;
                        if (prawidlowosc) {
                            seksyg = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "podaj dlugosc sygnału(mniejszy niż czas na ruch)", "parametry gry", JOptionPane.INFORMATION_MESSAGE));
                            prawidlowosc = sek > seksyg && seksyg > 0;
                            if (prawidlowosc) {
                                sekbaza = sek;
                                blokada = new ReentrantLock();
                                warunek = blokada.newCondition();
                                czasB = (new zegar(sek * 1000, zegarbiale, blokada, warunek, true, tryb, seksyg));
                                czasC = (new zegar(sek * 1000, zegarczarne, blokada, warunek, false, tryb, seksyg));
                                zegarbiale.setText(String.valueOf(sek));
                                zegarczarne.setText(String.valueOf(sek));
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą \n bez wartosci po przecinku");
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą \n bez wartosci po przecinku");
                        }
                    } catch (HeadlessException | NumberFormatException e) {
                        JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą większą od 0 \n bez wartosci po przecinku");
                        prawidlowosc = false;
                    }
                } while (prawidlowosc != true);
                SIOnOff.setEnabled(false);
                break;
            case 3:
                SIOnOff.setEnabled(false);
                obrotowy.setText("Obrót WYŁ");
                Design.setEnabled(false);
                jPopupMenu1.setEnabled(false);
                kroj_zestaw = 1;
                kolor_zestaw = 1;
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        switch (ust[i][j]) {
                            case 'K':
                            case 'Q':
                            case 'R':
                            case 'B':
                            case 'N':
                            case 'P':
                                szachownica_pokoj[i][j][0] = ust[i][j];
                                szachownica_pokoj[i][j][1] = ' ';
                                break;
                            case 'k':
                            case 'q':
                            case 'r':
                            case 'b':
                            case 'n':
                            case 'p':
                                szachownica_pokoj[i][j][1] = ust[i][j];
                                szachownica_pokoj[i][j][0] = ' ';
                                break;
                            default:
                                szachownica_pokoj[i][j][0] = ' ';
                                szachownica_pokoj[i][j][1] = ' ';
                                break;
                        }
                    }
                }
                break;
            case 4:
                kroj_zestaw = 3;
                kolor_zestaw = 2;
                ust[0][3] = 'A';
                ust[7][3] = 'a';
                SIOnOff.setEnabled(false);
                jTextArea3.setEnabled(true);
                styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                JOptionPane.showMessageDialog(rootPane, "W tym trybie nie masz hetmana.\n Zamiast tego masz amazonkę.\n"
                        + "Amazonka posiada właściwości hetmana i skoczka.\n"
                        + "Amazonka jest przedstawiona jako hetman na skoczku, tak jak w ikonce tej wiadomości", "Właściwości amazonki", JOptionPane.INFORMATION_MESSAGE, b1);
                break;
            case 5:
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        nakladki[i][j] = ' ';
                    }
                }
                jTextArea3.setEnabled(true);
                kolor_zestaw = 1;
                kroj_zestaw = 1;
                oldschool.setEnabled(false);
                oldschool1.setEnabled(false);
                SIOnOff.setEnabled(false);
                klasykstyl.setEnabled(false);
                klasykstyl1.setEnabled(false);
                JOptionPane.showMessageDialog(rootPane, "W tym trybie możesz zagrabić ruch zbitej bierki\nzyskując możliwość jednorazowego ruchu"
                        + "zgonie z zasadami zbitej bierki.\nGrabież nie jest obowiązkowa. Możesz mieć właściwość tylko tej bierki,\n"
                        + "której możliwości rozszerzają możliwości bijącego.", "Właściwości grabieży", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 6:
                SIOnOff.setEnabled(false);
                JOptionPane.showMessageDialog(rootPane, "W tym trybie bicie jest obowiązkowe.\n"
                        + "Wszystko staje się bierką zbijalną, włącznie z królem\n"
                        + "Wygrywa ten, kto wytraci wszystkie bierki", "Właściwości anty-szachów", JOptionPane.INFORMATION_MESSAGE);
                krole_biale = 1;
                jTextArea3.setEnabled(true);
                krole_czarne = 1;
                break;
            case 7:
                krole_biale = 1;
                krole_czarne = 1;
                JOptionPane.showMessageDialog(rootPane, "W tym trybie widzisz tylko tyle, na ile pozwala zasięg twoich figur.\n"
                        + "Uważaj, ponieważ reszta planszy i pozycje przeciwnika są zamglone i niewidoczne\n"
                        + "Zwycięża ten, co zbije króla przeciwnika.", "Właściwości mgły", JOptionPane.INFORMATION_MESSAGE);
                jTextArea3.setVisible(false);
                break;
            case 8:
                krole_biale = 1;
                krole_czarne = 1;
                JOptionPane.showMessageDialog(rootPane, "W tym trybie co zbijesz, to zbity dołącza do twojej rezerwy.\n"
                        + "Zamiast wykonać ruch możesz dostawić z rezerwy na dowolne puste pole.", "Właściwości domu szaleństwa", JOptionPane.INFORMATION_MESSAGE);
                jTextArea3.setVisible(true);
                hetmanRW.setEnabled(false);
                hetmanRB.setEnabled(false);
                wiezaRW.setEnabled(false);
                wiezaRB.setEnabled(false);
                goniecRW.setEnabled(false);
                goniecRB.setEnabled(false);
                skoczekRW.setEnabled(false);
                skoczekRB.setEnabled(false);
                pionRW.setEnabled(false);
                pionRB.setEnabled(false);
                break;
        }
        SIOnOff.setVisible(tryb == 0);
        Wydruk.setEnabled(tryb < 3);
        blokada = new ReentrantLock();
        warunek = blokada.newCondition();
        if (tryb == 1) {
            SIOnOff.setEnabled(false);
            odwrot = false;
            obrotowy.setText("Obrót WYŁ");
            obrotowy.setEnabled(false);
            switch (czasgry) {
                case 0:
                    czasB = (new zegar(60 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(60 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("60:00");
                    zegarczarne.setText("60:00");
                    break;
                case 1:
                    czasB = (new zegar(30 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(30 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("30:00");
                    zegarczarne.setText("30:00");

                    break;
                case 2:
                    czasB = (new zegar(15 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(15 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    bonuss = 10;
                    zegarbiale.setText("15:00");
                    zegarczarne.setText("15:00");
                    break;
                case 3:
                    czasB = (new zegar(10 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(10 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("10:00");
                    zegarczarne.setText("10:00");
                    break;
                case 4:
                    czasB = (new zegar(5 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(5 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("5:00");
                    zegarczarne.setText("5:00");
                    bonuss = 5;
                    break;
                case 5:
                    czasB = (new zegar(5 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(5 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("5:00");
                    zegarczarne.setText("5:00");
                    break;
                case 6:
                    czasB = (new zegar(3 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(3 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("3:00");
                    zegarczarne.setText("3:00");
                    bonuss = 2;
                    break;
                case 7:
                    czasB = (new zegar(3 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(3 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("3:00");
                    zegarczarne.setText("3:00");
                    break;
                case 8:
                    czasB = (new zegar(2 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(2 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("2:00");
                    zegarczarne.setText("2:00");
                    bonuss = 1;
                    break;
                case 9:
                    czasB = (new zegar(60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("1:00");
                    zegarczarne.setText("1:00");
                    break;
                case 10:
                    boolean prawidlowosc;
                    int bazamin;
                    do {
                        try {
                            bazamin = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "podaj czas na grę w minutach", "parametry gry", JOptionPane.INFORMATION_MESSAGE));
                            prawidlowosc = bazamin > 0;
                            if (prawidlowosc) {
                                bonuss = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "podaj czas dodawany do czasy  sekundach", "parametry gry", JOptionPane.INFORMATION_MESSAGE));
                                if (bonuss >= 0) {
                                    czasB = (new zegar(bazamin * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(bazamin * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText(bazamin + ":00");
                                    zegarczarne.setText(bazamin + ":00");
                                } else {
                                    prawidlowosc = false;
                                    JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą większą od 0 \n bez wartosci po przecinku", "błąd parametrów", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą większą od 0 \n bez wartosci po przecinku", "błąd parametrów", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (HeadlessException | NumberFormatException e) {
                            JOptionPane.showMessageDialog(rootPane, "musisz podać liczbę całkowitą większą od 0 \n bez wartosci po przecinku", "błąd parametrów", JOptionPane.ERROR_MESSAGE);
                            prawidlowosc = false;
                        }
                    } while (prawidlowosc != true);
                    break;
                default:
                    czasB = (new zegar(60 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                    czasC = (new zegar(60 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                    zegarbiale.setText("60:00");
                    zegarczarne.setText("60:00");
                    czasgry = 0;
                    break;
            }
        }
        if (tryb != 0) {
            whitetime = new Thread(czasB, "bieltime");
            blacktime = new Thread(czasC, "czerntime");
            whitetime.start();
            blacktime.start();
        }
        Menu_gry_glowne.setEnabled(false);
        ustawka = false;
        for (int i = 1; i <= 8; i++) {
            for (char j = 'A'; j <= 'H'; j++) {
                dobierzprzycisk(String.valueOf(j + "" + i), false).setEnabled(true);
            }
        }
        losowanko.setEnabled(tryb == 0 && !SI_ON);
        mazyna_losujaca.setEnabled(tryb == 0 && !SI_ON);
        if (tryb != 3 && tryb != 5) {
            kolor_zestaw = 2;
            kroj_zestaw = 3;
            styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
        } else {
            styl_tulenie(1, 1, kolor_plansza);
        }
        poddanie.setEnabled(true);
        remis_prop.setEnabled(true);
        Menu_gry_glowne.setEnabled(false);
        gra = true;
        zasada50 = 0;
        dolicz = false;
        lekkieB = 4;
        lekkieC = 4;
        ciezkieB = 3;
        ciezkieC = 3;
        pionB = 8;
        pionC = 8;
        pionRB.setVisible(tryb == 8);
        pionRW.setVisible(tryb == 8);
        skoczekRB.setVisible(tryb == 8);
        skoczekRW.setVisible(tryb == 8);
        goniecRB.setVisible(tryb == 8);
        goniecRW.setVisible(tryb == 8);
        wiezaRB.setVisible(tryb == 8);
        wiezaRW.setVisible(tryb == 8);
        hetmanRB.setVisible(tryb == 8);
        hetmanRW.setVisible(tryb == 8);
        pionRB.setVisible(tryb == 8);
        pionRW.setVisible(tryb == 8);
        hetmanRW.setText("0");
        hetmanRB.setText("0");
        wiezaRW.setText("0");
        wiezaRB.setText("0");
        goniecRW.setText("0");
        goniecRB.setText("0");
        skoczekRW.setText("0");
        skoczekRB.setText("0");
        pionRW.setText("0");
        pionRB.setText("0");

        partia_odlozona.setVisible(tryb == 0);
        partia_odlozona.setEnabled(tryb == 0);
        menu_load.setVisible(tryb == 0);
        obrotowy.setEnabled(true);
        SIOnOff.setEnabled(!SI_ON);
        if (SI_ON && tura_rywala) {
            char[][] backup1 = new char[8][8];
            for (int i = 0; i < 8; i++) {
                System.arraycopy(ust[i], 0, backup1[i], 0, 8);
            }
            /*for (byte i = 0; i < 8; i++) {
                for (byte j = 0; j < 8; j++) {
                    System.out.print("{" + backup1[i][j] + "}");
                }
                System.out.println();
            }*/
            SI_ma_ruch();
        }
        obrotowy.setVisible(!(SI_ON || siec));
    }

    private void ruch_nauki(Object source) {
        JButton BUTTON = (JButton) source;
        System.out.println("nauka");
        String kurs = BUTTON.getName();
        int pomocx = 0, pomocy = 0;
        switch (kurs.charAt(0)) {
            case 'A':
                pomocx = 1;
                break;
            case 'B':
                pomocx = 2;
                break;
            case 'C':
                pomocx = 3;
                break;
            case 'D':
                pomocx = 4;
                break;
            case 'E':
                pomocx = 5;
                break;
            case 'F':
                pomocx = 6;
                break;
            case 'G':
                pomocx = 7;
                break;
            case 'H':
                pomocx = 8;
                break;
        }
        switch (kurs.charAt(1)) {
            case '1':
                pomocy = 1;
                break;
            case '2':
                pomocy = 2;
                break;
            case '3':
                pomocy = 3;
                break;
            case '4':
                pomocy = 4;
                break;
            case '5':
                pomocy = 5;
                break;
            case '6':
                pomocy = 6;
                break;
            case '7':
                pomocy = 7;
                break;
            case '8':
                pomocy = 8;
                break;
        }
        if (wzor) {
            if (!polestart) {
                polestart = true;
                cursor = BUTTON.getIcon();
                BUTTON.setIcon(null);
                symbol = ust[pomocy - 1][pomocx - 1];
                ust[pomocy - 1][pomocx - 1] = ' ';
                System.out.println(symbol);
            } else {
                polestart = false;
                BUTTON.setIcon(cursor);
                cursor = null;
                ust[pomocy - 1][pomocx - 1] = symbol;
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        System.out.print(ust[i][j]);
                    }
                    System.out.println();
                }
            }

            styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
        } else {
            if (!polestart) {
                start = kurs;
                polestart = true;
                lokalS[0] = pomocx;
                lokalS[1] = pomocy;
                cursor = BUTTON.getIcon();
                BUTTON.setIcon(null);
                symbol = ust[pomocy - 1][pomocx - 1];
                ust[pomocy - 1][pomocx - 1] = ' ';
                koniecanimacji = false;
                animacja anim1 = new animacja(2, polestart, zmien, BUTTON, kurs);
            } else {
                stop = kurs;
                koniecanimacji = true;
                lokalK[0] = pomocx;
                lokalK[1] = pomocy;
                if (lokalK[0] == lokalS[0] && lokalS[1] == lokalK[1]) {
                    ust[pomocy - 1][pomocx - 1] = symbol;
                    BUTTON.setIcon(cursor);
                    polestart = false;
                } else {
                    if (debiut_nauka.trening.get(movenr * 2 + (ruchB ? 0 : 1)).substring(1, 3).equals(start)
                            && debiut_nauka.trening.get(movenr * 2 + (ruchB ? 0 : 1)).substring(4, 6).equals(stop)) {
                        ruchB = ruchB != true;
                        BUTTON.setIcon(cursor);
                        cursor = null;
                        ust[pomocy - 1][pomocx - 1] = symbol;
                        if (!ruchB) {
                            movenr++;
                        }
                        switch (wybor_treningu) {
                            case 0:
                                if (!ruchB) {
                                    wzor = true;
                                    aktywuj(false, debiut_nauka.trening.get((movenr - 1) * 2 + 1).substring(1, 3));
                                    aktywuj(false, debiut_nauka.trening.get((movenr - 1) * 2 + 1).substring(4, 6));
                                    wzor = false;
                                }
                                break;
                            case 1:
                                if (!ruchB) {
                                    wzor = true;
                                    aktywuj(false, debiut_nauka.trening.get((movenr - 1) * 2).substring(1, 3));
                                    aktywuj(false, debiut_nauka.trening.get((movenr - 1) * 2).substring(4, 6));
                                    wzor = false;
                                }
                                break;
                        }
                        if ((movenr * 2 + (ruchB ? 1 : 0) == debiut_nauka.trening.size())) {
                            int zle = 0;
                            for (boolean b : debiut_nauka.bledy) {
                                if ((wybor_treningu == 0 && !ruchB) || (wybor_treningu == 1 && ruchB)) {
                                    continue;
                                }
                                if (b == false) {
                                    zle++;
                                }
                            }
                            double procenty = 0;
                            switch (wybor_treningu) {
                                case 2:
                                    procenty = Math.round((zle / debiut_nauka.trening.size()) * 100);
                                    break;
                                case 1:
                                    if(debiut_nauka.trening.size()%2==0){
                                        procenty = Math.round((zle / debiut_nauka.trening.size()/2)*100);
                                    }else{
                                        procenty = Math.round((zle / Math.floor(debiut_nauka.trening.size()/2))*100);
                                    }
                                    break;
                                case 0:
                                    if(debiut_nauka.trening.size()%2==0){
                                        procenty = Math.round((zle / debiut_nauka.trening.size()/2)*100);
                                    }else{
                                        procenty = Math.round((zle / Math.ceil(debiut_nauka.trening.size()/2))*100);
                                    }
                                    break;
                            }
                            JOptionPane.showMessageDialog(rootPane, "Debiut odwzorowany w " + procenty + "%.");
                            nauka_praktyczna = false;
                            wzor = true;
                            remis_odrzut.setVisible(true);
                            remis_zgoda.setVisible(true);
                        }
                    } else {
                        if (RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, ruchB, przelotcan, kol, false)) {
                            debiut_nauka.bledy.set(movenr * 2 + (ruchB ? 0 : 1), false);
                        }
                        debiut_nauka.bledy.set(ruchB ? (movenr - 1) * 2 : (movenr - 1) * 2 + 1, false);
                        Toolkit.getDefaultToolkit().beep();
                    }
                }
            }
        }
    }

    /**
     * Odpowiada za działanie w tle programu SI
     *
     */
    public class Progres_postep extends SwingWorker<Object, Object> {

        @Override
        protected Object doInBackground() throws InterruptedException, ExecutionException {
            do {
                ArrayList<String> bialyL = new ArrayList<>();
                ArrayList<String> czarnyL = new ArrayList<>();
                String ksiazka = "";
                String temp = "";
                boolean zmiana = false;
                if (movenr <= 6) {
                    if (!ustawka) {
                        if (ruchy_literowe.isEmpty()) {
                            temp = "START";
                        } else {

                            for (String s : ruchy_literowe) {
                                if (!zmiana) {
                                    bialyL.add(s);
                                } else {
                                    czarnyL.add(s);
                                }
                                zmiana = zmiana != true;
                                temp = temp.concat(s + ",");
                            }
                            temp = temp.substring(0, temp.length() - 1);
                        }
                    }
                    System.out.println(temp);
                    ksiazka = lacze_z_baza.uzyskaj_ruch(temp, bialyL, czarnyL);
                } else {
                    ksiazka = "";
                }
                System.out.println("book:" + ksiazka);
                if (!ksiazka.equals("")) {
                    System.out.println(ksiazka);
                    SI_wyk = true;
                    if (!ksiazka.equals("O-O") && !ksiazka.equals("O-O-O")) {
                        aktywuj(odwrot, ksiazka.substring(1, 3));
                        aktywuj(odwrot, ksiazka.substring(4, 6));
                    } else {
                        if (ruchB) {
                            aktywuj(odwrot, "E1");
                            aktywuj(odwrot, ksiazka.equals("O-O-O") ? "C1" : "G1");
                        } else {
                            aktywuj(odwrot, "E8");
                            aktywuj(odwrot, ksiazka.equals("O-O-O") ? "C8" : "G8");
                        }
                    }
                    for (int i = 1; i <= 8; i++) {
                        for (char j = 'A'; j <= 'H'; j++) {
                            dobierzprzycisk(String.valueOf(j + "" + i), false).setEnabled(true);
                        }
                    }
                    SI_wyk = false;

                } else {
                    if (symulacja) {
                        odwrot = false;
                    }
                    String oponet = "";
                    char[][] backup = new char[8][8];
                    jProgressBar1.setMinimum(0);
                    SI_wyk = false;
                    for (int x = 0; x < 8; x++) {
                        System.arraycopy(ust[x], 0, backup[x], 0, 8);
                    }
                    int elem = 0, dlugosc = Generator.generuj_posuniecia((backup.clone()), ruchB, przelotcan,
                            bleft, bright, wleft, wright, kingrochB, kingrochC, kol, false, ' ', new int[2], false, false).size();
                    // System.out.println(dlugosc + "elem");
                    jProgressBar1.setMaximum(dlugosc);
                    jProgressBar1.setValue(0);
                    int najlepszy = tura_rywala ? Integer.MIN_VALUE : Integer.MAX_VALUE;
                    int najwieksza = Integer.MIN_VALUE;
                    int najmniejsza = Integer.MAX_VALUE;
                    int pula_pozycji = 0;
                    int pula_sprawdzona = 0;
                    String ostatni = "";
                    long czas_start = System.currentTimeMillis();
                    int licznik = 0;

                    if (Generator.generuj_posuniecia((ust), ruchB, przelotcan,
                            bleft, bright, wleft, wright, kingrochB, kingrochC, kol, false).size() > 1) {
                        SI_MIN_MAX_Alfa_Beta ai = new SI_MIN_MAX_Alfa_Beta(backup.clone(), ruchB, przelotcan,
                                bleft, bright, wleft, wright, kingrochB, kingrochC, dokonano_RB, dokonano_RC, kol, licznik, glebiaSI);
                        Ruch_wartosc wynik = ai.wykonaj(glebiaSI, Generator.generuj_posuniecia(backup.clone(), ruchB, przelotcan,
                                bleft, bright, wleft, wright, kingrochB, kingrochC, kol, false), najwieksza, najmniejsza);
                        pula_pozycji = pula_pozycji + ai.all_position;
                        pula_sprawdzona = pula_sprawdzona + ai.pozycje;
                        // System.out.println(ai.licznik);
                        oponet = wynik.ruch.toString();
                        najlepszy = wynik.wartosc;
                        /* ArrayList<Ruch_wartosc> ruchyW = new ArrayList<>();
                        ExecutorService executor = Executors.newFixedThreadPool(4);
                        ArrayList<Callable<Ruch_wartosc>> zadania = new ArrayList<Callable<Ruch_wartosc>>();
                        for (int i = 0; i<4;i++) {
                            ArrayList<Ruch> ruchy = (ArrayList<Ruch>)Generator.generuj_posuniecia(backup.clone(), ruchB, przelotcan,
                                bleft, bright, wleft, wright, kingrochB, kingrochC, kol, false);
                            ArrayList<Ruch> moves = new ArrayList<>();
                            for(int m=0;m<ruchy.size();m++){
                                if(m%4==i){
                                    moves.add(ruchy.get(m));
                                }
                            }
                            zadania.add(new SI_MIN_MAX_Alfa_Beta1(backup.clone(), ruchB, przelotcan,
                                    bleft, bright, wleft, wright, kingrochB, kingrochC, dokonano_RB, dokonano_RC,
                                    kol, licznik, glebiaSI, najwieksza, najmniejsza,moves));
                        }
                        List<Future<Ruch_wartosc>> wartosci = executor.invokeAll(zadania);
                        for (Future<Ruch_wartosc> f : wartosci) {
                            ruchyW.add(f.get());
                        }
                        najlepszy = ruchyW.get(0).wartosc;
                        oponet = ruchyW.get(0).ruch.toString();
                        for (Ruch_wartosc r : ruchyW.subList(1, ruchyW.size() - 1)) {
                            if ((ruchB && r.wartosc > najlepszy) || (!ruchB && r.wartosc < najlepszy)) {
                                najlepszy = r.wartosc;
                                oponet = r.ruch.toString();
                            }
                        }*/

                    } else {
                        pula_pozycji = 1;
                        pula_sprawdzona = 1;
                        oponet = Generator.generuj_posuniecia(ust, ruchB, przelotcan,
                                bleft, bright, wleft, wright, kingrochB, kingrochC, kol, false).get(0).toString();
                        najlepszy = tura_rywala ? Integer.MAX_VALUE : Integer.MIN_VALUE;
                    }
                    long czas_stop = System.currentTimeMillis();
                    long czas = (czas_stop - czas_start) / 1000;
                    //System.out.println("wszystkich kombinacji: " + pula_pozycji);
                    //System.out.println("zaanalizowano kombinacji: " + pula_sprawdzona);
                    System.out.printf("procent analizowanych kombinacji: %.2f %n", (float) (pula_sprawdzona) / (float) (pula_pozycji) * 100f);
                    if ("".equals(oponet)) {
                        oponet = ostatni;
                    }
                    System.out.println("Ruch SI:" + oponet + "(" + najlepszy + ")");
                    System.out.println("Czas SI:" + czas + "s");
                    float procent = (Math.round(pula_sprawdzona * 10000.0f / pula_pozycji)) / 100.0f;
                    System.out.println("Czas w min: " + czas / 60 + " min, " + czas % 60 + " s");
                    jTextArea2.setVisible(true);
                    laczny_czas = laczny_czas + czas;
                    jTextArea2.append("Ruch SI:" + oponet + "(" + najlepszy + ") \n");
                    jTextArea2.append("Czas SI:" + czas + "s" + " \n");
                    jTextArea2.append("Czas w min: " + czas / 60 + " min, " + czas % 60 + " s" + " \n");
                    jTextArea2.append("Czas łączny: " + laczny_czas + " (" + laczny_czas / 60 + " min " + laczny_czas % 60 + " s)\n");
                    jTextArea2.append("wszystkich kombinacji: " + pula_pozycji + " \n");
                    jTextArea2.append("zaanalizowano kombinacji: " + pula_sprawdzona + " \n");
                    jTextArea2.append("procent analizowanych kombinacji:" + procent + " \n \n");
                    jTextArea2.setCaretPosition(jTextArea2.getDocument().getLength());
                    for (int i = 1; i <= 8; i++) {
                        for (char j = 'A'; j <= 'H'; j++) {
                            dobierzprzycisk(String.valueOf(j + "" + i), false).setEnabled(true);
                        }
                    }
                    SI_wyk = true;
                    if ("O-O".equals(oponet.substring(0, 3))) {
                        if ("O-O".equals(oponet.substring(0, 3)) && oponet.length() <= 4) {
                            if (ruchB) {
                                aktywuj(odwrot, "E1");
                                aktywuj(odwrot, "G1");
                            } else {
                                aktywuj(odwrot, "E8");
                                aktywuj(odwrot, "G8");
                            }
                        } else if ("O-O-O".equals(oponet.substring(0, 5)) && oponet.length() > 4) {
                            if (ruchB) {
                                aktywuj(odwrot, "E1");
                                aktywuj(odwrot, "C1");
                            } else {
                                aktywuj(odwrot, "E8");
                                aktywuj(odwrot, "C8");
                            }
                        }
                    } else {
                        System.out.println("Corr");
                        start = oponet.substring(1, 3);
                        stop = oponet.substring(4, 6);
                        if (oponet.charAt(6) == '=') {
                            znak_promocji = oponet.charAt(7);
                        }
                        System.out.println(oponet);
                        aktywuj(odwrot, oponet.substring(1, 3));
                        aktywuj(odwrot, oponet.substring(4, 6));
                    }
                    SI_wyk = false;
                    if (symulacja) {
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(SzachowaArena.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            } while (symulacja);

            return null;
        }
    }

    private figury[][] konwert(char[][] ustawienie) {
        figury[][] pozycja = new figury[8][8];
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                switch (ustawienie[i][j]) {
                    case ' ':
                        pozycja[i][j] = figury.pustka;
                        break;
                    case 'P':
                        pozycja[i][j] = figury.BPion;
                        break;
                    case 'p':
                        pozycja[i][j] = figury.CPion;
                        break;
                    case 'N':
                        pozycja[i][j] = figury.BSkoczek;
                        break;
                    case 'n':
                        pozycja[i][j] = figury.CSkoczek;
                        break;
                    case 'B':
                        pozycja[i][j] = figury.BGoniec;
                        break;
                    case 'b':
                        pozycja[i][j] = figury.CGoniec;
                        break;
                    case 'R':
                        pozycja[i][j] = figury.BWieza;
                        break;
                    case 'r':
                        pozycja[i][j] = figury.CWieza;
                        break;
                    case 'Q':
                        pozycja[i][j] = figury.BHetman;
                        break;
                    case 'q':
                        pozycja[i][j] = figury.CHetman;
                        break;
                    case 'K':
                        pozycja[i][j] = figury.BKrol;
                        break;
                    case 'k':
                        pozycja[i][j] = figury.CKrol;
                        break;
                }
            }
        }
        return pozycja;
    }

    private figuryA[][] konwertA(char[][] ustawienie) {
        figuryA[][] pozycja = new figuryA[8][8];
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                switch (ustawienie[i][j]) {
                    case ' ':
                        pozycja[i][j] = figuryA.pustka;
                        break;
                    case 'P':
                        pozycja[i][j] = figuryA.BPion;
                        break;
                    case 'p':
                        pozycja[i][j] = figuryA.CPion;
                        break;
                    case 'N':
                        pozycja[i][j] = figuryA.BSkoczek;
                        break;
                    case 'n':
                        pozycja[i][j] = figuryA.CSkoczek;
                        break;
                    case 'B':
                        pozycja[i][j] = figuryA.BGoniec;
                        break;
                    case 'b':
                        pozycja[i][j] = figuryA.CGoniec;
                        break;
                    case 'R':
                        pozycja[i][j] = figuryA.BWieza;
                        break;
                    case 'r':
                        pozycja[i][j] = figuryA.CWieza;
                        break;
                    case 'Q':
                        pozycja[i][j] = figuryA.BHetman;
                        break;
                    case 'q':
                        pozycja[i][j] = figuryA.CHetman;
                        break;
                    case 'K':
                        pozycja[i][j] = figuryA.BKrol;
                        break;
                    case 'k':
                        pozycja[i][j] = figuryA.CKrol;
                        break;
                    case 'A':
                        pozycja[i][j] = figuryA.BAmazonka;
                        break;
                    case 'a':
                        pozycja[i][j] = figuryA.CAmazonka;
                        break;

                }
            }
        }
        return pozycja;
    }

    /**
     * Uruchamia działanie SI
     */
    private void SI_ma_ruch() {

        for (int i = 1; i <= 8; i++) {
            for (char j = 'A'; j <= 'H'; j++) {
                dobierzprzycisk(String.valueOf(j + "" + i), false).setEnabled(false);
            }
        }
        Progres_postep progresik = new Progres_postep();
        progresik.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            String name1 = evt.getPropertyName();
            if (name1.equals("progress")) {
                repaint();
            } else if (name1.equals("state")) {
            }
        });
        progresik.execute();
        System.out.println("uruchomiony");

        // oponet = ai.wykonaj(glebiaSI);
    }

    /**
     * usuwa wcześniejsze obramowania i potem ustawia obramowanie dla bieżącej
     * pary przycisków
     */
    public void ustawrame() {
        czysc_rame();
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
        boolean zawrot = odwrot;
        if (tryb != 8) {
            if (!"".equals(ostatni_start) && !"".equals(ostatni_stop)) {
                JButton poczatek;
                JButton koniec;
                if (!symulacja) {
                    poczatek = dobierzprzycisk(ostatni_start, ((!SI_ON && !siec && zawrot) || ((tura_rywala && SI_ON) || (odwrot))));
                    koniec = dobierzprzycisk(ostatni_stop, ((!SI_ON && !siec && zawrot) || ((tura_rywala && SI_ON) || (odwrot))));
                } else {
                    poczatek = dobierzprzycisk(ostatni_start, false);
                    koniec = dobierzprzycisk(ostatni_stop, false);

                }
                poczatek.setBorder(new LineBorder(rama, 4));
                koniec.setBorder(new LineBorder(rama, 4));
            }
        } else {
            JButton poczatek;
            JButton koniec;
            if (!dostawka && !"".equals(ostatni_start)) {
                poczatek = dobierzprzycisk(ostatni_start, odwrot);
                poczatek.setBorder(new LineBorder(rama, 4));
            }
            if (!"".equals(ostatni_stop)) {
                koniec = dobierzprzycisk(ostatni_stop, odwrot);
                koniec.setBorder(new LineBorder(rama, 4));
            }
        }
    }

    class zegar implements Runnable {

        JLabel labelek;
        Lock blokuj;
        Condition war;
        boolean stronnictwo;
        long m, s;
        int tryb;
        private boolean warn;

        private zegar(int czas, JLabel wybrany, Lock blokada, Condition warunek, boolean strona, int tryb) {

            labelek = wybrany;
            m = czas / 60000;
            this.war = warunek;
            this.blokuj = blokada;
            this.stronnictwo = strona;
            this.tryb = tryb;
            this.s = 0;

        }

        private zegar(int i, JLabel wybrany, Lock blokada, Condition warunek, boolean strona, int tryb, int seksyg) {

            labelek = wybrany;
            m = seksyg;
            this.war = warunek;
            this.blokuj = blokada;
            this.stronnictwo = strona;
            this.tryb = tryb;
            this.s = i / 1000;
        }

        @Override
        public void run() {

            this.blokuj.lock();
            try {
                while (true) {
                    while (ruchB != stronnictwo) {
                        try {
                            this.war.await();
                        } catch (InterruptedException ignored) {
                        }
                    }
                    if (tryb == 1) {
                        this.s = this.s - 1;
                        if (this.s == -1) {
                            this.s = 59;
                            this.m = this.m - 1;
                            labelek.setText(this.m + ":" + this.s);
                        } else {
                            if (s < 10) {
                                labelek.setText(this.m + ":0" + this.s);
                            } else {
                                labelek.setText(this.m + ":" + this.s);
                            }
                            if (this.s == 0 && this.m == 0) {
                                JOptionPane.showMessageDialog(rootPane, "Przekroczono czas na grę");
                                kapitulacja();
                            }
                        }
                    }
                    if (tryb == 2) {
                        this.s = this.s - 1;
                        labelek.setText(String.valueOf(this.s));
                        if (this.s == 0 && !this.warn) {
                            Toolkit.getDefaultToolkit().beep();
                            labelek.setBackground(Color.red);
                            labelek.setForeground(Color.red);
                            labelek.setText(String.valueOf(this.m));
                            this.warn = true;
                            this.s = m;
                        }
                        if (this.warn && this.s == 0) {
                            JOptionPane.showMessageDialog(rootPane, "Przekroczono czas");
                            kapitulacja();
                        }
                    }
                    try {
                        if (hodu || hitme || protectme) {
                            Thread.sleep(1000);
                        } else {
                            break;
                        }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SzachowaArena.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    this.war.signalAll();
                }
            } finally {
                labelek.setBackground(null);
                this.blokuj.unlock();
            }
        }
    }

    public class lacze extends Thread {

        public lacze() {
        }

        @Override
        public void run() {
            while (!msgwe.equals("exit")) {
                try {
                    msgwe = in.readUTF();
                    boolean rywal = msgwe.endsWith(" Przeciwnik");
                    System.out.println(msgwe + " " + rywal);
                    msgwe = msgwe.replace(" Przeciwnik", "");
                    if ("Gramy dalej".equals(msgwe)) {
                        poddanie.setEnabled(true);
                        remis_prop.setEnabled(true);
                        remis_zgoda.setEnabled(false);
                        remis_odrzut.setEnabled(false);
                    }
                    if ("remis?".equals(msgwe)) {
                        remis_prop.setEnabled(false);
                        remis_zgoda.setEnabled(true);
                        remis_odrzut.setEnabled(true);
                    }
                    if ("Zgadzam sie na remis".equals(msgwe)) {
                        remis();
                    }
                    if ("poddaje sie. wygraleś".equals(msgwe)) {
                        if (organizator) {
                            try {
                                server.close();
                                socket.close();
                                in.close();
                                out.close();
                            } catch (IOException ex) {
                                Logger.getLogger(SzachowaArena.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            try {
                                socket.close();
                                in.close();
                                out.close();
                            } catch (IOException ex) {
                                Logger.getLogger(SzachowaArena.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        kapitulacja();
                    }
                    if (msgwe.length() > 0) {
                        if (!"color:true".equals(msgwe) && !"color:false".equals(msgwe)) {

                            if (!(msgwe.startsWith("TG")) && !(msgwe.startsWith("BON")) && !(msgwe.startsWith("MIN"))
                                    && !(msgwe.startsWith("ALT"))) {
                                jTextArea2.setText(jTextArea2.getText().trim() + "\n" + msgwe);
                            }
                            if (msgwe.length() >= 8) {
                                znak_promocji = msgwe.charAt(msgwe.charAt(7));
                            }
                            if (rywal) {
                                System.out.println("TRUE");
                                if (!"O-O".equals(msgwe) && !"O-O-O".equals(msgwe) && msgwe.length() >= 6) {
                                    ruszaj = msgwe.substring(1, 3);
                                    zatrzymaj = msgwe.substring(4, 6);
                                    System.out.println(ruszaj + "-" + zatrzymaj + " " + odwrot);
                                    wzor = true;
                                    aktywuj(odwrot, ruszaj);
                                    aktywuj(odwrot, zatrzymaj);
                                    oczekiwanie = false;
                                    if (oczekiwanie) {
                                        poddanie.setEnabled(false);
                                        remis_prop.setEnabled(false);
                                    } else {
                                        poddanie.setEnabled(true);
                                        remis_prop.setEnabled(true);
                                    }
                                    wzor = false;

                                }
                                if ("O-O".equals(msgwe)) {
                                    wzor = true;
                                    if (ruchB) {
                                        if (oczekiwanie) {
                                            if (odwrot == false) {
                                                Button_Clicked(E1);
                                                Button_Clicked(G1);
                                            } else {
                                                Button_Clicked(D8);
                                                Button_Clicked(B8);
                                            }
                                        }
                                    } else {
                                        if (oczekiwanie) {
                                            if (odwrot == false) {
                                                Button_Clicked(E8);
                                                Button_Clicked(G8);
                                            } else {
                                                Button_Clicked(D1);
                                                Button_Clicked(B1);
                                            }
                                        }
                                    }
                                    oczekiwanie = false;
                                    wzor = false;
                                }
                                if ("O-O-O".equals(msgwe)) {
                                    wzor = true;
                                    if (ruchB) {
                                        if (oczekiwanie) {
                                            if (odwrot == false) {
                                                Button_Clicked(E1);
                                                Button_Clicked(C1);
                                            } else {
                                                Button_Clicked(D8);
                                                Button_Clicked(F8);
                                            }
                                        }
                                    } else {
                                        if (oczekiwanie) {
                                            if (odwrot == false) {
                                                Button_Clicked(E8);
                                                Button_Clicked(C8);
                                            } else {
                                                Button_Clicked(D1);
                                                Button_Clicked(F1);
                                            }
                                        }
                                    }
                                    oczekiwanie = false;
                                    wzor = false;
                                }
                            }
                        } else {
                            if ("color:true".equals(msgwe)) {
                                oczekiwanie = false;
                                odwrot = false;
                                jTextArea2.setText(jTextArea2.getText().trim() + "\n" + "grasz jako białe");
                                jTextArea2.setText(jTextArea2.getText().trim() + "\n" + "czekasz" + oczekiwanie);
                                poddanie.setEnabled(true);
                            }
                            if ("color:false".equals(msgwe)) {
                                oczekiwanie = true;
                                poddanie.setEnabled(false);
                                odwrot = true;
                                JLabel pomoc1 = zegarbiale;
                                zegarbiale = zegarczarne;
                                zegarczarne = pomoc1;
                                styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                jTextArea2.setText(jTextArea2.getText().trim() + "\n" + "grasz jako czarne");
                                jTextArea2.setText(jTextArea2.getText().trim() + "\n" + "czekasz" + oczekiwanie);
                            }
                        }
                        int bazamin;
                        if ((msgwe.startsWith("TG"))) {
                            tryb = 1;
                            blokada = new ReentrantLock();
                            warunek = blokada.newCondition();
                            String tmp = (msgwe.substring(2));
                            czasgry = Integer.parseInt(tmp);
                            if (tmp.equals("")) {
                                tmp = "0";
                            }
                            czasgry = -1;
                            switch (tmp) {
                                case "0":
                                    czasB = (new zegar(60 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(60 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("60:00");
                                    zegarczarne.setText("60:00");
                                    break;
                                case "1":
                                    czasB = (new zegar(30 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(30 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("30:00");
                                    zegarczarne.setText("30:00");

                                    break;
                                case "2":
                                    czasB = (new zegar(15 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(15 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("15:00");
                                    zegarczarne.setText("15:00");
                                    bonuss = 10;
                                    break;
                                case "3":
                                    czasB = (new zegar(10 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(10 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("10:00");
                                    zegarczarne.setText("10:00");
                                    break;
                                case "4":
                                    czasB = (new zegar(5 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(5 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("5:00");
                                    zegarczarne.setText("5:00");
                                    bonuss = 5;
                                    break;
                                case "5":
                                    czasB = (new zegar(5 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(5 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("5:00");
                                    zegarczarne.setText("5:00");
                                    break;
                                case "6":
                                    czasB = (new zegar(3 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(3 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("3:00");
                                    zegarczarne.setText("3:00");
                                    bonuss = 2;
                                    break;
                                case "7":
                                    czasB = (new zegar(3 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(3 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("3:00");
                                    zegarczarne.setText("3:00");
                                    break;
                                case "8":
                                    czasB = (new zegar(2 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(2 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("2:00");
                                    zegarczarne.setText("2:00");
                                    bonuss = 1;
                                    break;
                                case "9":
                                    czasB = (new zegar(60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("1:00");
                                    zegarczarne.setText("1:00");
                                    break;
                                case "10":
                                    czasgry = 0;
                                    czasB = (new zegar(60 * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                                    czasC = (new zegar(60 * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                                    zegarbiale.setText("60:00");
                                    zegarczarne.setText("60:00");
                                    break;
                            }

                            whitetime = new Thread(czasB, "bieltime");
                            blacktime = new Thread(czasC, "czerntime");
                            whitetime.start();
                            blacktime.start();
                        }
                        if ((msgwe.startsWith("ALT"))) {
                            tryb = 2;
                            blokada = new ReentrantLock();
                            warunek = blokada.newCondition();
                            String tmp = msgwe.substring(3);
                            StringTokenizer tokeny = new StringTokenizer(tmp, "|");
                            sek = Integer.parseInt(tokeny.nextToken());
                            sekbaza = sek;
                            seksyg = Integer.parseInt(tokeny.nextToken());
                            oczekiwanie = Boolean.parseBoolean(tokeny.nextToken());
                            poddanie.setEnabled(!oczekiwanie);
                            czasB = (new zegar(sek * 1000, zegarbiale, blokada, warunek, true, tryb, seksyg));
                            czasC = (new zegar(sek * 1000, zegarczarne, blokada, warunek, false, tryb, seksyg));
                            zegarbiale.setText(String.valueOf(sek));
                            zegarczarne.setText(String.valueOf(sek));
                            whitetime = new Thread(czasB, "bieltime");
                            blacktime = new Thread(czasC, "czerntime");
                            whitetime.start();
                            blacktime.start();
                        }
                        if ((msgwe.startsWith("MIN"))) {
                            tryb = 1;
                            String tmp = msgwe.substring(3);
                            bazamin = Integer.parseInt(tmp);
                            czasB = (new zegar(bazamin * 60 * 1000, zegarbiale, blokada, warunek, true, tryb));
                            czasC = (new zegar(bazamin * 60 * 1000, zegarczarne, blokada, warunek, false, tryb));
                            zegarbiale.setText(bazamin + ":00");
                            zegarczarne.setText(bazamin + ":00");
                        }
                        if ((msgwe.startsWith("BON"))) {
                            tryb = 1;
                            String tmp = msgwe.substring(3);
                            bonuss = Integer.parseInt(tmp);
                            whitetime = new Thread(czasB, "bieltime");
                            blacktime = new Thread(czasC, "czerntime");
                            whitetime.start();
                            blacktime.start();
                        }
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(rootPane, "przeciwnik się rozłączył. \n"
                            + "partia została przerwana, a wynik nie zostanie zapisany.\n"
                            + "Zostanie u ciebie utworzony plik z przebiegiem partii na wypadek,\n"
                            + "gdybyście chcieli odwzorować pozycję i od niej kontynuować");
                    try (PrintWriter plik1 = new PrintWriter(new FileWriter("spis partii przerwanych.txt", true))) {
                        jTextArea3.write(plik1);
                        plik1.println();
                        plik1.println();
                        plik1.println();
                        plik1.println();
                    } catch (IOException ex1) {
                        Logger.getLogger(SzachowaArena.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                    if (siec == false) {
                        Object[] opcje_rewanzu = {"tak", "nie"};
                        int opcja_rewanzu = JOptionPane.showOptionDialog(null, "NASTĘPNA GRA?", "REAWNŻ",
                                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcje_rewanzu, null);
                        if (opcja_rewanzu == 0) {
                            try {
                                final String javaBin = System.getProperty("java.home") + File.separator + "bin" + File.separator + "java";
                                final File currentJar = new File(SzachowaArena.class.getProtectionDomain().getCodeSource().getLocation().toURI());
                                final ArrayList<String> command = new ArrayList<>();
                                command.add(javaBin);
                                command.add("-jar");
                                command.add(currentJar.getPath());
                                final ProcessBuilder builder = new ProcessBuilder(command);
                                builder.start();
                            } catch (URISyntaxException | IOException ex1) {
                                Logger.getLogger(SzachowaArena.class.getName()).log(Level.SEVERE, null, ex1);
                            }
                        }
                    }
                    break;
                }
            }
        }
    }

    /**
     * zmusza do działania konkretne pzycisk
     *
     * @param odwrot1 Czy plansza jest odwrócona (białymi na górze)
     * @param ruszaj Nazwa pola
     */
    private void aktywuj(boolean odwrot1, String ruszaj) {
        switch (ruszaj) {
            case "A1":
                if (!odwrot1) {
                    Button_Clicked(A1);
                } else {
                    Button_Clicked(H8);
                }
                break;
            case "A2":
                if (!odwrot1) {
                    Button_Clicked(A2);
                } else {
                    Button_Clicked(H7);
                }
                break;
            case "A3":
                if (!odwrot1) {
                    Button_Clicked(A3);
                } else {
                    Button_Clicked(H6);
                }
                break;
            case "A4":
                if (!odwrot1) {
                    Button_Clicked(A4);
                } else {
                    Button_Clicked(H5);
                }
                break;
            case "A5":
                if (!odwrot1) {
                    Button_Clicked(A5);
                } else {
                    Button_Clicked(H4);
                }
                break;
            case "A6":
                if (!odwrot1) {
                    Button_Clicked(A6);
                } else {
                    Button_Clicked(H3);
                }
                break;
            case "A7":
                if (!odwrot1) {
                    Button_Clicked(A7);
                } else {
                    Button_Clicked(H2);
                }
                break;
            case "A8":
                if (!odwrot1) {
                    Button_Clicked(A8);
                } else {
                    Button_Clicked(H1);
                }
                break;
            case "B1":
                if (!odwrot1) {
                    Button_Clicked(B1);
                } else {
                    Button_Clicked(G8);
                }
                break;
            case "B2":
                if (!odwrot1) {
                    Button_Clicked(B2);
                } else {
                    Button_Clicked(G7);
                }
                break;
            case "B3":
                if (!odwrot1) {
                    Button_Clicked(B3);
                } else {
                    Button_Clicked(G6);
                }
                break;
            case "B4":
                if (!odwrot1) {
                    Button_Clicked(B4);
                } else {
                    Button_Clicked(G5);
                }
                break;
            case "B5":
                if (!odwrot1) {
                    Button_Clicked(B5);
                } else {
                    Button_Clicked(G4);
                }
                break;
            case "B6":
                if (!odwrot1) {
                    Button_Clicked(B6);
                } else {
                    Button_Clicked(G3);
                }
                break;
            case "B7":
                if (!odwrot1) {
                    Button_Clicked(B7);
                } else {
                    Button_Clicked(G2);
                }
                break;
            case "B8":
                if (!odwrot1) {
                    Button_Clicked(B8);
                } else {
                    Button_Clicked(G1);
                }
                break;
            case "C1":
                if (!odwrot1) {
                    Button_Clicked(C1);
                } else {
                    Button_Clicked(F8);
                }
                break;
            case "C2":
                if (!odwrot1) {
                    Button_Clicked(C2);
                } else {
                    Button_Clicked(F7);
                }
                break;
            case "C3":
                if (!odwrot1) {
                    Button_Clicked(C3);
                } else {
                    Button_Clicked(F6);
                }
                break;
            case "C4":
                if (!odwrot1) {
                    Button_Clicked(C4);
                } else {
                    Button_Clicked(F5);
                }
                break;
            case "C5":
                if (!odwrot1) {
                    Button_Clicked(C5);
                } else {
                    Button_Clicked(F4);
                }
                break;
            case "C6":
                if (!odwrot1) {
                    Button_Clicked(C6);
                } else {
                    Button_Clicked(F3);
                }
                break;
            case "C7":
                if (!odwrot1) {
                    Button_Clicked(C7);
                } else {
                    Button_Clicked(F2);
                }
                break;
            case "C8":
                if (!odwrot1) {
                    Button_Clicked(C8);
                } else {
                    Button_Clicked(F1);
                }
                break;
            case "D1":
                if (!odwrot1) {
                    Button_Clicked(D1);
                } else {
                    Button_Clicked(E8);
                }
                break;
            case "D2":
                if (!odwrot1) {
                    Button_Clicked(D2);
                } else {
                    Button_Clicked(E7);
                }
                break;
            case "D3":
                if (!odwrot1) {
                    Button_Clicked(D3);
                } else {
                    Button_Clicked(E6);
                }
                break;
            case "D4":
                if (!odwrot1) {
                    Button_Clicked(D4);
                } else {
                    Button_Clicked(E5);
                }
                break;
            case "D5":
                if (!odwrot1) {
                    Button_Clicked(D5);
                } else {
                    Button_Clicked(E4);
                }
                break;
            case "D6":
                if (!odwrot1) {
                    Button_Clicked(D6);
                } else {
                    Button_Clicked(E3);
                }
                break;
            case "D7":
                if (!odwrot1) {
                    Button_Clicked(D7);
                } else {
                    Button_Clicked(E2);
                }
                break;
            case "D8":
                if (!odwrot1) {
                    Button_Clicked(D8);
                } else {
                    Button_Clicked(E1);
                }
                break;
            case "E1":
                if (!odwrot1) {
                    Button_Clicked(E1);
                } else {
                    Button_Clicked(D8);
                }
                break;
            case "E2":
                if (!odwrot1) {
                    Button_Clicked(E2);
                } else {
                    Button_Clicked(D7);
                }
                break;
            case "E3":
                if (!odwrot1) {
                    Button_Clicked(E3);
                } else {
                    Button_Clicked(D6);
                }
                break;
            case "E4":
                if (!odwrot1) {
                    Button_Clicked(E4);
                } else {
                    Button_Clicked(D5);
                }
                break;
            case "E5":
                if (!odwrot1) {
                    Button_Clicked(E5);
                } else {
                    Button_Clicked(D4);
                }
                break;
            case "E6":
                if (!odwrot1) {
                    Button_Clicked(E6);
                } else {
                    Button_Clicked(D3);
                }
                break;
            case "E7":
                if (!odwrot1) {
                    Button_Clicked(E7);
                } else {
                    Button_Clicked(D2);
                }
                break;
            case "E8":
                if (!odwrot1) {
                    Button_Clicked(E8);
                } else {
                    Button_Clicked(D1);
                }
                break;
            case "F1":
                if (!odwrot1) {
                    Button_Clicked(F1);
                } else {
                    Button_Clicked(C8);
                }
                break;
            case "F2":
                if (!odwrot1) {
                    Button_Clicked(F2);
                } else {
                    Button_Clicked(C7);
                }
                break;
            case "F3":
                if (!odwrot1) {
                    Button_Clicked(F3);
                } else {
                    Button_Clicked(C6);
                }
                break;
            case "F4":
                if (!odwrot1) {
                    Button_Clicked(F4);
                } else {
                    Button_Clicked(C5);
                }
                break;
            case "F5":
                if (!odwrot1) {
                    Button_Clicked(F5);
                } else {
                    Button_Clicked(C4);
                }
                break;
            case "F6":
                if (!odwrot1) {
                    Button_Clicked(F6);
                } else {
                    Button_Clicked(C3);
                }
                break;
            case "F7":
                if (!odwrot1) {
                    Button_Clicked(F7);
                } else {
                    Button_Clicked(C2);
                }
                break;
            case "F8":
                if (!odwrot1) {
                    Button_Clicked(F8);
                } else {
                    Button_Clicked(C1);
                }
                break;
            case "G1":
                if (!odwrot1) {
                    Button_Clicked(G1);
                } else {
                    Button_Clicked(B8);
                }
                break;
            case "G2":
                if (!odwrot1) {
                    Button_Clicked(G2);
                } else {
                    Button_Clicked(B7);
                }
                break;
            case "G3":
                if (!odwrot1) {
                    Button_Clicked(G3);
                } else {
                    Button_Clicked(B6);
                }
                break;
            case "G4":
                if (!odwrot1) {
                    Button_Clicked(G4);
                } else {
                    Button_Clicked(B5);
                }
                break;
            case "G5":
                if (!odwrot1) {
                    Button_Clicked(G5);
                } else {
                    Button_Clicked(B4);
                }
                break;
            case "G6":
                if (!odwrot1) {
                    Button_Clicked(G6);
                } else {
                    Button_Clicked(B3);
                }
                break;
            case "G7":
                if (!odwrot1) {
                    Button_Clicked(G7);
                } else {
                    Button_Clicked(B2);
                }
                break;
            case "G8":
                if (!odwrot1) {
                    Button_Clicked(G8);
                } else {
                    Button_Clicked(B1);
                }
                break;
            case "H1":
                if (!odwrot1) {
                    Button_Clicked(H1);
                } else {
                    Button_Clicked(A8);
                }
                break;
            case "H2":
                if (!odwrot1) {
                    Button_Clicked(H2);
                } else {
                    Button_Clicked(A7);
                }
                break;
            case "H3":
                if (!odwrot1) {
                    Button_Clicked(H3);
                } else {
                    Button_Clicked(A6);
                }
                break;
            case "H4":
                if (!odwrot1) {
                    Button_Clicked(H4);
                } else {
                    Button_Clicked(A5);
                }
                break;
            case "H5":
                if (!odwrot1) {
                    Button_Clicked(H5);
                } else {
                    Button_Clicked(A4);
                }
                break;
            case "H6":
                if (!odwrot1) {
                    Button_Clicked(H6);
                } else {
                    Button_Clicked(A3);
                }
                break;
            case "H7":
                if (!odwrot1) {
                    Button_Clicked(H7);
                } else {
                    Button_Clicked(A2);
                }
                break;
            case "H8":
                if (!odwrot1) {
                    Button_Clicked(H8);
                } else {
                    Button_Clicked(A1);
                }
                break;
        }
    }

    public class animacja2 {

        String nazwaB;
        Timer czasowy;
        public int lina = 0;
        JButton przycisk;
        char znak;

        public animacja2(int czasy, boolean polestart, boolean zmien, JButton sender, String nazwa, char symbol) {
            czasowy = new Timer();
            nazwaB = nazwa;
            znak = symbol;
            przycisk = dobierzprzycisk(nazwaB, false);
            czasowy.schedule(new limit(polestart, zmien, znak), 0, 250L * czasy);
        }

        public class limit extends TimerTask {

            char tulis;

            public limit(boolean polestart, boolean zmien, char tulis) {
                this.tulis = tulis;
            }

            @Override
            public void run() {
                lina = lina + 1;
                if (lina % 2 == 0) {
                    przycisk.setIcon(cursor);
                } else {
                    switch (tulis) {
                        case ' ':
                            przycisk.setIcon(null);
                            break;
                        case 'p':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                            break;
                        case 'P':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                            break;
                        case 'N':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                            break;
                        case 'n':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                            break;
                        case 'B':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                            break;
                        case 'b':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                            break;
                        case 'R':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                            break;
                        case 'r':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                            break;
                        case 'Q':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                            break;
                        case 'q':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                            break;
                        case 'K':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                            break;
                        case 'k':
                            przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                            break;
                    }
                    if (polestart == false) {
                        if (lokalS[0] == lokalK[0] && lokalS[1] == lokalK[1]) {
                            przycisk.setIcon(cursor);
                        } else {
                            switch (tulis) {
                                case ' ':
                                    przycisk.setIcon(null);
                                    break;
                                case 'p':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                    break;
                                case 'P':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                                    break;
                                case 'N':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                                    break;
                                case 'n':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                    break;
                                case 'B':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                                    break;
                                case 'b':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                    break;
                                case 'R':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                                    break;
                                case 'r':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                                    break;
                                case 'Q':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                                    break;
                                case 'q':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                    break;
                                case 'K':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                                    break;
                                case 'k':
                                    przycisk.setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                                    break;
                            }
                        }
                        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                        czasowy.cancel();
                    }
                }
            }
        }
    }

    /**
     * odpowiada za animowanie wybranej figury
     */
    public class animacja {

        String nazwaB;
        Timer czasowy;
        public int lina = 0;
        JButton przycisk;

        public animacja(int czasy, boolean polestart, boolean zmien, JButton sender, String nazwa) {
            czasowy = new Timer();
            nazwaB = nazwa;
            przycisk = dobierzprzycisk(nazwaB, false);
            czasowy.schedule(new limit(polestart, zmien), 0, 250L * czasy);
        }

        public class limit extends TimerTask {

            public limit(boolean polestart, boolean zmien) {
            }

            @Override
            public void run() {
                lina = lina + 1;
                if (lina % 2 == 0) {
                    przycisk.setIcon(cursor);
                } else {
                    przycisk.setIcon(null);
                    if (!polestart) {
                        if (lokalS[0] == lokalK[0] && lokalS[1] == lokalK[1]) {
                            przycisk.setIcon(cursor);
                        } else {
                            przycisk.setIcon(null);
                        }
                        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                        czasowy.cancel();
                    }
                }
            }
        }
    }

    /**
     * wywołuje procedurę poddania partii
     */
    void kapitulacja() {
        if (!siec) {
            if (tryb != 2) {
                if (ruchB) {
                    koncowe = "BIALE:0, CZARNE:1   \n";
                    biale = "0";
                    czarne = "1";
                    JOptionPane.showMessageDialog(rootPane, "KONIEC CZARNE WYGRAŁY", "KONIEC GRY",
                            JOptionPane.INFORMATION_MESSAGE);
                } else {
                    koncowe = "BIALE:1, CZARNE:0  \n";
                    biale = "1";
                    czarne = "0";
                    JOptionPane.showMessageDialog(rootPane, "KONIEC BIAŁE WYGRAŁY", "KONIEC GRY",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                if (ruchB) {
                    biale = "0";
                    if (movenr <= 25) {
                        czarne = "5";
                    }
                    if (movenr > 25 && movenr <= 40) {
                        czarne = "4";
                    }
                    if (movenr > 40 && movenr <= 55) {
                        czarne = "3";
                    }
                    if (movenr > 55) {
                        czarne = "2";
                    }
                    koncowe = "BIALE:0, CZARNE:" + czarne + "   \n";
                    JOptionPane.showMessageDialog(rootPane, "KONIEC CZARNE WYGRAŁY", "KONIEC GRY",
                            JOptionPane.INFORMATION_MESSAGE);
                } else {
                    if (movenr <= 25) {
                        biale = "5";
                    }
                    if (movenr > 25 && movenr <= 40) {
                        biale = "4";
                    }
                    if (movenr > 40 && movenr <= 55) {
                        biale = "3";
                    }
                    if (movenr > 55) {
                        biale = "2";
                    }
                    koncowe = "BIALE:" + biale + ", CZARNE:0  \n";
                    czarne = "0";
                    JOptionPane.showMessageDialog(rootPane, "KONIEC BIAŁE WYGRAŁY", "KONIEC GRY",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
            int zwrot_numeru;
            if (!ustawka) {
                String baza = "kronika_szachowa";
                Connection polaczenie = lacze_z_baza.polacz(baza);
                assert polaczenie != null;
                lacze_z_baza.stworzTabele(polaczenie, baza);
                lacze_z_baza.dodajDane(baza, biale, czarne);
                zwrot_numeru = uzyskajid(baza);
                try (PrintWriter plik1 = new PrintWriter(new FileWriter("spis partii nr. " + (zwrot_numeru) + ".txt", true))) {
                    boolean zmiana = czarneRuch.isSelected();
                    int ilosc_ruchow = 1;
                    for (String s : ruchy_literowe) {
                        plik1.print((!zmiana ? (ilosc_ruchow + ".   " + s) : ("    " + s + "\n")));
                        zmiana = !zmiana;
                        if (zmiana) {
                            ilosc_ruchow++;
                        }
                    }
                    plik1.println();
                    if (SI_ON) {
                        plik1.println("Łączny czas SI: " + laczny_czas + " s");
                        plik1.println("Średni czas SI: " + (float) (laczny_czas / movenr) + " s");
                    }
                    plik1.println();
                    plik1.println();

                } catch (IOException ex) {
                    Logger.getLogger(SzachowaArena.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                if (tryb != 2) {
                    try (PrintWriter plik = new PrintWriter(new FileWriter("wyniki.txt", true))) {
                        plik.println(koncowe);

                    } catch (IOException ex) {
                        Logger.getLogger(SzachowaArena.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    try (PrintWriter plik = new PrintWriter(new FileWriter("wynik_szach_matynr. " + (zwrot_numeru) + ".txt", true))) {
                        plik.println(koncowe);

                    } catch (IOException ex) {
                        Logger.getLogger(SzachowaArena.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                String baza = "kronika_ustawek";
                Connection polaczenie = lacze_z_baza.polacz(baza);
                assert polaczenie != null;
                lacze_z_baza.stworzTabele(polaczenie, baza);
                lacze_z_baza.dodajDane(baza, biale, czarne);
                zwrot_numeru = uzyskajid(baza);
                try (PrintWriter plik1 = new PrintWriter(new FileWriter("partie ustawionenr. " + (zwrot_numeru) + ".txt", true))) {
                    if (pierwsza_kolej) {
                        plik1.println("Pierwszy ruch mają białe");
                    } else {
                        plik1.println("Pierwszy ruch mają czarne");
                    }
                    for (int i = 7; i > -1; i--) {
                        for (int j = 0; j < 8; j++) {
                            plik1.print("[" + pozycja_ustawki[i][j] + "]");
                        }
                        plik1.println();
                    }
                    jTextArea3.write(plik1);
                    plik1.println();
                    if (SI_ON) {
                        plik1.println("Łączny czas SI: " + laczny_czas + " s");
                        plik1.println("Średni czas SI: " + (float) (laczny_czas / movenr) + " s");
                    }
                    plik1.println();
                    plik1.println();
                } catch (IOException ex) {
                    Logger.getLogger(SzachowaArena.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                try (PrintWriter plik = new PrintWriter(new FileWriter("wyniki ustawek.txt", true))) {
                    plik.println(koncowe);

                } catch (IOException ex) {
                    Logger.getLogger(SzachowaArena.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            if (ruchB) {
                JOptionPane.showMessageDialog(rootPane, "czarne wygrywaja");
                kap = "czarne";
            } else {
                JOptionPane.showMessageDialog(rootPane, "biale wygrywaja");
                kap = "biale";
            }
            if (organizator) {
                try {
                    server.close();
                    socket.close();
                    in.close();
                    out.close();
                } catch (IOException ex) {
                    Logger.getLogger(SzachowaArena.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    socket.close();
                    in.close();
                    out.close();
                } catch (IOException ex) {
                    Logger.getLogger(SzachowaArena.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }

    public int uzyskajid(String baza) {
        int wynik;
        int ic = 0;
        Statement stat;
        try {
            Class.forName("org.sqlite.JDBC");
            Connection polaczenie = DriverManager.getConnection("jdbc:sqlite:" + baza + ".db");
            stat = polaczenie.createStatement();
            String szukajSQL = "SELECT ID FROM " + baza + " WHERE ID=(  SELECT MAX(ID) FROM " + baza + ");";
            try (ResultSet rezultacik = stat.executeQuery(szukajSQL)) {
                while (rezultacik.next()) {
                    ic = ((Number) rezultacik.getObject(1)).intValue();
                }
            }

            wynik = ic;
            System.out.println("id=" + wynik);
            if (wynik == 0) {
                return 1;
            }
        } catch (ClassNotFoundException | SQLException e) {
            return 1;
        }
        return wynik;
        //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * Zwraca odpowiedni przycisk zależnie od nazwy pola
     *
     * @param nazwabuttona nazwa obsługiwanego pola
     * @param obrocona czy plansza obrocona
     * @return zwraca odpowiedni przycisk
     */
    public JButton dobierzprzycisk(String nazwabuttona, boolean obrocona) {
        switch (nazwabuttona) {
            case "A1":
                return !obrocona ? A1 : H8;
            case "A2":
                return !obrocona ? A2 : H7;
            case "A3":
                return !obrocona ? A3 : H6;
            case "A4":
                return !obrocona ? A4 : H5;
            case "A5":
                return !obrocona ? A5 : H4;
            case "A6":
                return !obrocona ? A6 : H3;
            case "A7":
                return !obrocona ? A7 : H2;
            case "A8":
                return !obrocona ? A8 : H1;
            case "B1":
                return !obrocona ? B1 : G8;
            case "B2":
                return !obrocona ? B2 : G7;
            case "B3":
                return !obrocona ? B3 : G6;
            case "B4":
                return !obrocona ? B4 : G5;
            case "B5":
                return !obrocona ? B5 : G4;
            case "B6":
                return !obrocona ? B6 : G3;
            case "B7":
                return !obrocona ? B7 : G2;
            case "B8":
                return !obrocona ? B8 : G1;
            case "C1":
                return !obrocona ? C1 : F8;
            case "C2":
                return !obrocona ? C2 : F7;
            case "C3":
                return !obrocona ? C3 : F6;
            case "C4":
                return !obrocona ? C4 : F5;
            case "C5":
                return !obrocona ? C5 : F4;
            case "C6":
                return !obrocona ? C6 : F3;
            case "C7":
                return !obrocona ? C7 : F2;
            case "C8":
                return !obrocona ? C8 : F1;
            case "D1":
                return !obrocona ? D1 : E8;
            case "D2":
                return !obrocona ? D2 : E7;
            case "D3":
                return !obrocona ? D3 : E6;
            case "D4":
                return !obrocona ? D4 : E5;
            case "D5":
                return !obrocona ? D5 : E4;
            case "D6":
                return !obrocona ? D6 : E3;
            case "D7":
                return !obrocona ? D7 : E2;
            case "D8":
                return !obrocona ? D8 : E1;
            case "E1":
                return !obrocona ? E1 : D8;
            case "E2":
                return !obrocona ? E2 : D7;
            case "E3":
                return !obrocona ? E3 : D6;
            case "E4":
                return !obrocona ? E4 : D5;
            case "E5":
                return !obrocona ? E5 : D4;
            case "E6":
                return !obrocona ? E6 : D3;
            case "E7":
                return !obrocona ? E7 : D2;
            case "E8":
                return !obrocona ? E8 : D1;
            case "F1":
                return !obrocona ? F1 : C8;
            case "F2":
                return !obrocona ? F2 : C7;
            case "F3":
                return !obrocona ? F3 : C6;
            case "F4":
                return !obrocona ? F4 : C5;
            case "F5":
                return !obrocona ? F5 : C4;
            case "F6":
                return !obrocona ? F6 : C3;
            case "F7":
                return !obrocona ? F7 : C2;
            case "F8":
                return !obrocona ? F8 : C1;
            case "G1":
                return !obrocona ? G1 : B8;
            case "G2":
                return !obrocona ? G2 : B7;
            case "G3":
                return !obrocona ? G3 : B6;
            case "G4":
                return !obrocona ? G4 : B5;
            case "G5":
                return !obrocona ? G5 : B4;
            case "G6":
                return !obrocona ? G6 : B3;
            case "G7":
                return !obrocona ? G7 : B2;
            case "G8":
                return !obrocona ? G8 : B1;
            case "H1":
                return !obrocona ? H1 : A8;
            case "H2":
                return !obrocona ? H2 : A7;
            case "H3":
                return !obrocona ? H3 : A6;
            case "H4":
                return !obrocona ? H4 : A5;
            case "H5":
                return !obrocona ? H5 : A4;
            case "H6":
                return !obrocona ? H6 : A3;
            case "H7":
                return !obrocona ? H7 : A2;
            case "H8":
                return !obrocona ? H8 : A1;
        }
        return null;
    }

    /**
     * Uruchamia provcedurę remisu
     */
    private void remis() {
        remis_prop.setEnabled(true);
        remis_zgoda.setEnabled(false);
        remis_odrzut.setEnabled(false);
        if (tryb != 2) {
            koncowe = "BIALE:0.5, CZARNE:0.5   \n";
            biale = "0.5";
            czarne = "0.5";
        } else {
            koncowe = "BIALE:0, CZARNE:0   \n";
            biale = "0";
            czarne = "0";
        }
        JOptionPane.showMessageDialog(rootPane, "KONIEC REMIS", "KONIEC GRY",
                JOptionPane.INFORMATION_MESSAGE);

        if (tryb == 2) {
            try (PrintWriter plik = new PrintWriter(new FileWriter("wynik_szach_maty.txt", true))) {
                plik.println(koncowe);

            } catch (IOException ex) {
                Logger.getLogger(SzachowaArena.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (!ustawka) {
            String baza = "kronika_szachowa";
            Connection polaczenie = lacze_z_baza.polacz(baza);
            assert polaczenie != null;
            lacze_z_baza.stworzTabele(polaczenie, baza);
            lacze_z_baza.dodajDane(baza, biale, czarne);
            int zwrot_numeru = uzyskajid(baza);
            try (PrintWriter plik1 = new PrintWriter(new FileWriter("spis partii nr. " + (zwrot_numeru) + ".txt", true))) {
                boolean zmiana = czarneRuch.isSelected();
                int ilosc_ruchow = 1;
                for (String s : ruchy_literowe) {
                    plik1.print((!zmiana ? (ilosc_ruchow + ".   " + s) : ("    " + s + "\n")));
                    zmiana = !zmiana;
                    if (zmiana) {
                        ilosc_ruchow++;
                    }
                }
                plik1.println();
                if (SI_ON) {
                    plik1.println("Łączny czas SI: " + laczny_czas + " s");
                    plik1.println("Średni czas SI: " + (float) (laczny_czas / movenr) + " s");
                }
                plik1.println();
                plik1.println();

            } catch (IOException ex) {
                Logger.getLogger(SzachowaArena.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            if (tryb != 2) {
                try (PrintWriter plik = new PrintWriter(new FileWriter("wyniki.txt", true))) {
                    plik.println(koncowe);

                } catch (IOException ex) {
                    Logger.getLogger(SzachowaArena.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try (PrintWriter plik = new PrintWriter(new FileWriter("wynik_szach_matynr. " + (zwrot_numeru) + ".txt", true))) {
                    plik.println(koncowe);

                } catch (IOException ex) {
                    Logger.getLogger(SzachowaArena.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            String baza = "kronika_ustawek";
            Connection polaczenie = lacze_z_baza.polacz(baza);
            assert polaczenie != null;
            lacze_z_baza.stworzTabele(polaczenie, baza);
            lacze_z_baza.dodajDane(baza, biale, czarne);
            int zwrot_numeru = uzyskajid(baza);
            try (PrintWriter plik1 = new PrintWriter(new FileWriter("partie ustawionenr. " + (zwrot_numeru) + ".txt", true))) {
                if (pierwsza_kolej) {
                    plik1.println("Pierwszy ruch mają białe");
                } else {
                    plik1.println("Pierwszy ruch mają czarne");
                }
                for (int i = 7; i > -1; i--) {
                    for (int j = 0; j < 8; j++) {
                        plik1.print("[" + pozycja_ustawki[i][j] + "]");
                    }
                    plik1.println();
                }
                jTextArea3.write(plik1);
                plik1.println();
                if (SI_ON) {
                    plik1.println("Łączny czas SI: " + laczny_czas + " s");
                    plik1.println("Średni czas SI: " + (float) (laczny_czas / movenr) + " s");
                }
                plik1.println();
                plik1.println();
            } catch (IOException ex) {
                Logger.getLogger(SzachowaArena.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try (PrintWriter plik = new PrintWriter(new FileWriter("wyniki ustawek.txt", true))) {
                plik.println(koncowe);

            } catch (IOException ex) {
                Logger.getLogger(SzachowaArena.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (siec) {
            try {
                msgwy = "Zgadzam sie na remis";
                out.writeUTF(msgwy);
                jTextArea2.setText(jTextArea2.getText().trim() + "\n ja: " + msgwy + "\n");
                jTextField1.setText("");
            } catch (IOException ignored) {
            }
            if (organizator) {
                try {
                    server.close();
                    socket.close();
                    in.close();
                    out.close();
                } catch (IOException ex) {
                    Logger.getLogger(SzachowaArena.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    socket.close();
                    in.close();
                    out.close();
                } catch (IOException ex) {
                    Logger.getLogger(SzachowaArena.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }

    private void Rusz_przytul(Object source) {
        JButton BUTTON = (JButton) source;
        byte pomx = 0, pomy = 0;
        if (polestart == false) {

            BUTTON.setBorder(new LineBorder(rama, 4));
            switch ((BUTTON.getName().charAt(0))) {
                case 'A':
                    pomx = 1;
                    break;
                case 'B':
                    pomx = 2;
                    break;
                case 'C':
                    pomx = 3;
                    break;
                case 'D':
                    pomx = 4;
                    break;
                case 'E':
                    pomx = 5;
                    break;
                case 'F':
                    pomx = 6;
                    break;
                case 'G':
                    pomx = 7;
                    break;
                case 'H':
                    pomx = 8;
                    break;
            }
            switch ((BUTTON.getName().charAt(1))) {
                case '1':
                    pomy = 1;
                    break;
                case '2':
                    pomy = 2;
                    break;
                case '3':
                    pomy = 3;
                    break;
                case '4':
                    pomy = 4;
                    break;
                case '5':
                    pomy = 5;
                    break;
                case '6':
                    pomy = 6;
                    break;
                case '7':
                    pomy = 7;
                    break;
                case '8':
                    pomy = 8;
                    break;
            }
            lokalS[0] = (byte) pomx;
            lokalS[1] = (byte) pomy;
            cursor = BUTTON.getIcon();
            symbole[0] = szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][0];
            symbole[1] = szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][1];
            symbol = ruchB ? symbole[0] : symbole[1];
            dobierz_kursor(symbol);
            BUTTON.setIcon(null);
            jLabel12.setIcon(cursor);
            jLabel12.setText(BUTTON.getName());
            if (szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][ruchB ? 0 : 1] != ' ') {
                start = BUTTON.getName();
                polestart = true;
                if ((symbol == 'P' | symbol == 'p')) {
                    promo = ' ';
                }
                koniecanimacji = false;
            } else {
                if ((opcje_pomoc == 0 || opcje_pomoc == 2) && ((ruchB && symbole[0] == ' ' && symbole[1] != ' ') || (ruchB && symbole[1] == ' ' && symbole[0] != ' '))) {
                    JOptionPane.showMessageDialog(rootPane, ruchB ? "Aktualny ruch mają białe" : "Aktualny ruch mają "
                            + "czarne",
                            "Błąd wyboru", JOptionPane.WARNING_MESSAGE);
                    BUTTON.setBorder(null);
                }
            }
        } else {
            switch ((BUTTON.getName().charAt(0))) {
                case 'A':
                    pomx = 1;
                    break;
                case 'B':
                    pomx = 2;
                    break;
                case 'C':
                    pomx = 3;
                    break;
                case 'D':
                    pomx = 4;
                    break;
                case 'E':
                    pomx = 5;
                    break;
                case 'F':
                    pomx = 6;
                    break;
                case 'G':
                    pomx = 7;
                    break;
                case 'H':
                    pomx = 8;
                    break;
            }
            switch ((BUTTON.getName().charAt(1))) {
                case '1':
                    pomy = 1;
                    break;
                case '2':
                    pomy = 2;
                    break;
                case '3':
                    pomy = 3;
                    break;
                case '4':
                    pomy = 4;
                    break;
                case '5':
                    pomy = 5;
                    break;
                case '6':
                    pomy = 6;
                    break;
                case '7':
                    pomy = 7;
                    break;
                case '8':
                    pomy = 8;
                    break;
            }
            lokalK[0] = pomx;
            lokalK[1] = pomy;
            if (BUTTON.getIcon() == null) {
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                dobierz_kursor_na_przycisku(' ', null);
                if (lokalK[0] == lokalS[0] && lokalK[1] == lokalS[1]) {
                    BUTTON.setBorder(null);
                    if (liczba_usciskow == 0) {
                        zmien = false;
                        promo = ' ';
                        koniecanimacji = true;
                        BUTTON.setIcon(cursor);
                        polestart = false;
                        wyk = false;
                        szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][0] = symbole[0];
                        szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][1] = symbole[1];
                        szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1] = symbol;
                        for (int i = 0; i < 8; i++) {
                            for (int j = 7; j >= 0; j--) {
                                System.out.print("[" + (szachownica_pokoj[i][j][0] != ' ' ? szachownica_pokoj[i][j][0] : ' ') + "|" + (szachownica_pokoj[i][j][1] != ' ' ? szachownica_pokoj[i][j][1] : ' ') + "]");
                            }
                            System.out.println();
                        }
                    } else {
                        styl_tulenie(1, 1, kolor_plansza);
                        char tmp = szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1];
                        szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1] = symbol;
                        symbol = tmp;
                        switch (symbol) {
                            case 'K':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                                break;
                            case 'Q':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                                break;
                            case 'R':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                                break;
                            case 'B':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                                break;
                            case 'N':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                                break;
                            case 'P':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                                break;
                            case 'k':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                                break;
                            case 'q':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                break;
                            case 'r':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                                break;
                            case 'b':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                break;
                            case 'n':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                break;
                            case 'p':
                                jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                break;
                            default:
                                jLabel12.setIcon(null);
                                break;
                        }

                        liczba_usciskow = liczba_usciskow - 1;
                        start = hug_list.get(hug_list.size() - 1).substring(0, 2);
                        hug_list.remove(hug_list.size() - 1);
                        koniecanimacji = false;

                        switch ((BUTTON.getName().charAt(0))) {
                            case 'A':
                                pomx = 1;
                                break;
                            case 'B':
                                pomx = 2;
                                break;
                            case 'C':
                                pomx = 3;
                                break;
                            case 'D':
                                pomx = 4;
                                break;
                            case 'E':
                                pomx = 5;
                                break;
                            case 'F':
                                pomx = 6;
                                break;
                            case 'G':
                                pomx = 7;
                                break;
                            case 'H':
                                pomx = 8;
                                break;
                        }
                        switch ((BUTTON.getName().charAt(1))) {
                            case '1':
                                pomy = 1;
                                break;
                            case '2':
                                pomy = 2;
                                break;
                            case '3':
                                pomy = 3;
                                break;
                            case '4':
                                pomy = 4;
                                break;
                            case '5':
                                pomy = 5;
                                break;
                            case '6':
                                pomy = 6;
                                break;
                            case '7':
                                pomy = 7;
                                break;
                            case '8':
                                pomy = 8;
                                break;
                        }
                        lokalS[0] = (byte) pomx;
                        lokalS[1] = (byte) pomy;
                    }
                } else {
                    if ((symbol == 'K' || symbol == 'k')
                            && ((ruchB && kingrochB == true && (((lokalS[0] - lokalK[0]) == -2 && szachownica_pokoj[0][5][0] == ' ' && szachownica_pokoj[0][5][1] == ' ' && szachownica_pokoj[0][6][0] == ' ' && szachownica_pokoj[0][6][1] == ' ' && wright == true && szachownica_pokoj[0][7][1] == ' ')
                            || (lokalS[0] - lokalK[0] == 2 && szachownica_pokoj[0][3][0] == ' ' && szachownica_pokoj[0][2][0] == ' ' && szachownica_pokoj[0][1][0] == ' ' && szachownica_pokoj[0][3][1] == ' ' && szachownica_pokoj[0][2][1] == ' ' && szachownica_pokoj[0][1][1] == ' ' && wleft == true && szachownica_pokoj[0][0][1] == ' ')))
                            || (ruchB == false && kingrochC == true && (((lokalS[0] - lokalK[0]) == -2 && szachownica_pokoj[7][5][1] == ' ' && szachownica_pokoj[7][6][1] == ' ' && szachownica_pokoj[7][5][0] == ' ' && szachownica_pokoj[7][6][0] == ' ' && bright == true && szachownica_pokoj[7][7][0] == ' ')
                            || (lokalS[0] - lokalK[0] == 2 && szachownica_pokoj[7][3][0] == ' ' && szachownica_pokoj[7][2][0] == ' ' && szachownica_pokoj[7][1][0] == ' ' && szachownica_pokoj[7][3][1] == ' ' && szachownica_pokoj[7][2][1] == ' ' && szachownica_pokoj[7][1][1] == ' ' && bleft == true && szachownica_pokoj[7][0][0] == ' '))))) {
                        if (ruchB) {
                            if (lokalS[0] - lokalK[0] > 0) {

                                szachownica_pokoj[0][4][0] = ' ';
                                szachownica_pokoj[0][0][0] = ' ';
                                szachownica_pokoj[0][2][0] = 'K';
                                szachownica_pokoj[0][3][0] = 'R';

                            } else {

                                szachownica_pokoj[0][4][0] = ' ';
                                szachownica_pokoj[0][7][0] = ' ';
                                szachownica_pokoj[0][6][0] = 'K';
                                szachownica_pokoj[0][5][0] = 'R';

                            }
                            kingrochB = false;
                        } else {
                            if (lokalS[0] - lokalK[0] > 0) {

                                szachownica_pokoj[7][4][1] = ' ';
                                szachownica_pokoj[7][0][1] = ' ';
                                szachownica_pokoj[7][2][1] = 'k';
                                szachownica_pokoj[7][3][1] = 'r';

                            } else {

                                szachownica_pokoj[7][4][1] = ' ';
                                szachownica_pokoj[7][7][1] = ' ';
                                szachownica_pokoj[7][6][1] = 'k';
                                szachownica_pokoj[7][5][1] = 'r';

                            }
                            kingrochC = false;
                        }
                        stop = BUTTON.getName();
                        polestart = false;
                        koniecanimacji = true;
                        if (ruchB == false) {
                            movenr = movenr + 1;
                        }
                        czysc_rame();
                        ruchB = ruchB != true;
                        cursor = null;

                    } else {
                        boolean dozwolony = Ruch_pokoj.ruch(lokalS, lokalK, symbol, szachownica_pokoj, ruchB,
                                przelotcan, kol, ruchB ? symbole[1] : symbole[0]);
                        System.out.println("Accept " + dozwolony);
                        System.out.println(lokalK[0] + ":" + lokalK[1]);
                        if (dozwolony == true) {
                            if (symbole[ruchB ? 1 : 0] != ' ') {
                                liczba_usciskow = 0;
                                stop = BUTTON.getName();
                                koniecanimacji = true;
                                zmien = false;
                                BUTTON.setIcon(cursor);
                                polestart = false;
                                wyk = false;
                            } else {
                                if (symbol == 'R' || symbol == 'r') {
                                    if (start.equals("A1")) {
                                        wleft = false;
                                    }
                                    if (start.equals("A8")) {
                                        bleft = false;
                                    }
                                    if (start.equals("H1")) {
                                        wright = false;
                                    }
                                    if (start.equals("H8")) {
                                        bright = false;
                                    }
                                    if (!bright && !bleft) {
                                        kingrochC = false;
                                    }
                                    if (!wright && !wleft) {
                                        kingrochB = false;
                                    }
                                }
                                if (symbol == 'K' || symbol == 'k') {
                                    if (start.equals("E1")) {
                                        kingrochB = false;
                                    }
                                    if (start.equals("E8")) {
                                        kingrochC = false;
                                    }
                                }
                                if ((symbol == 'P' && lokalS[0] == lokalK[0] && lokalS[1] - lokalK[1] == -2)
                                        || (symbol == 'p' && lokalS[0] == lokalK[0] && lokalS[1] - lokalK[1] == 2)) {
                                    przelotcan = true;
                                    kol = lokalS[0];
                                } else {
                                    if (przelotcan == true && (symbol == 'p' || symbol == 'P') && Math.abs(lokalS[1] - lokalK[1]) == 1
                                            && ((ruchB && lokalS[1] == 5) || (ruchB == false && lokalS[1] == 4))) {

                                    } else {
                                        kol = 0;
                                    }
                                }
                                if (symbol == 'P' || symbol == 'p') {
                                    if ((przelotcan == true && ((lokalK[0] == kol && symbol == 'P' && lokalS[1] - lokalK[1] == -1 && lokalS[0] != lokalK[0] && lokalS[1] == 5)
                                            || (lokalK[0] == kol && symbol == 'p' && lokalS[1] - lokalK[1] == 1 && lokalS[0] != lokalK[0] && lokalS[1] == 4)))) {

                                        kon = true;
                                        przelot = false;
                                        dokonanoEP = true;
                                        szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1] = symbol;
                                        szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 1 : 0] = symbol == 'P'
                                                ? 'p' : 'P';
                                        if ((ruchB && szachownica_pokoj[4][lokalK[0] - 1][0] == ' ')
                                                || (ruchB == false && szachownica_pokoj[3][lokalK[0] - 1][1] == ' ')) {
                                            liczba_usciskow = 0;
                                        } else {
                                            liczba_usciskow = liczba_usciskow + 1;
                                        }
                                        switch (lokalK[0]) {
                                            case 1:
                                                if (ruchB) {
                                                    szachownica_pokoj[4][0][1] = ' ';
                                                    szachownica_pokoj[4][0][0] = ' ';
                                                    A5.setIcon(null);
                                                } else {
                                                    szachownica_pokoj[3][0][1] = ' ';
                                                    szachownica_pokoj[3][0][0] = ' ';
                                                    A4.setIcon(null);
                                                }
                                                break;
                                            case 2:
                                                if (ruchB) {
                                                    szachownica_pokoj[4][1][1] = ' ';
                                                    szachownica_pokoj[4][1][0] = ' ';
                                                    B5.setIcon(null);
                                                } else {
                                                    szachownica_pokoj[3][1][1] = ' ';
                                                    szachownica_pokoj[3][1][0] = ' ';
                                                    B4.setIcon(null);
                                                }
                                                break;
                                            case 3:
                                                if (ruchB) {
                                                    szachownica_pokoj[4][2][1] = ' ';
                                                    szachownica_pokoj[4][2][0] = ' ';
                                                    C5.setIcon(null);
                                                } else {
                                                    szachownica_pokoj[3][2][1] = ' ';
                                                    szachownica_pokoj[3][2][0] = ' ';
                                                    C4.setIcon(null);
                                                }
                                                break;
                                            case 4:
                                                if (ruchB) {
                                                    szachownica_pokoj[4][3][1] = ' ';
                                                    szachownica_pokoj[4][3][0] = ' ';
                                                    D5.setIcon(null);
                                                } else {
                                                    szachownica_pokoj[3][3][1] = ' ';
                                                    szachownica_pokoj[3][3][0] = ' ';
                                                    D4.setIcon(null);
                                                }
                                                break;
                                            case 5:
                                                if (ruchB) {
                                                    szachownica_pokoj[4][4][1] = ' ';
                                                    szachownica_pokoj[4][4][0] = ' ';
                                                    E5.setIcon(null);
                                                } else {
                                                    szachownica_pokoj[3][4][1] = ' ';
                                                    szachownica_pokoj[3][4][0] = ' ';
                                                    E4.setIcon(null);
                                                }
                                                break;
                                            case 6:
                                                if (ruchB) {
                                                    szachownica_pokoj[4][5][1] = ' ';
                                                    szachownica_pokoj[4][5][0] = ' ';
                                                    F5.setIcon(null);
                                                } else {
                                                    szachownica_pokoj[3][5][1] = ' ';
                                                    szachownica_pokoj[3][5][0] = ' ';
                                                    F4.setIcon(null);
                                                }
                                                break;
                                            case 7:
                                                if (ruchB) {
                                                    szachownica_pokoj[4][6][1] = ' ';
                                                    szachownica_pokoj[4][6][0] = ' ';
                                                    G5.setIcon(null);
                                                } else {
                                                    szachownica_pokoj[3][6][1] = ' ';
                                                    szachownica_pokoj[3][6][0] = ' ';
                                                    G4.setIcon(null);
                                                }
                                                break;
                                            case 8:
                                                if (ruchB) {
                                                    szachownica_pokoj[4][7][1] = ' ';
                                                    szachownica_pokoj[4][7][0] = ' ';
                                                    H5.setIcon(null);
                                                } else {
                                                    szachownica_pokoj[3][7][1] = ' ';
                                                    szachownica_pokoj[3][7][0] = ' ';
                                                    H4.setIcon(null);
                                                }
                                                break;
                                        }
                                        przelotcan = false;
                                        symbole[ruchB ? 1 : 0] = ruchB ? 'p' : 'P';
                                        wyk = true;
                                        prze = true;
                                        bicie = true;
                                        if (liczba_usciskow == 0) {
                                            stop = BUTTON.getName();
                                            polestart = false;
                                            koniecanimacji = true;
                                            if (ruchB == false) {
                                                movenr = movenr + 1;
                                            }
                                            cursor = null;
                                            szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][ruchB ? 0 : 1] = ' ';
                                            szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1]
                                                    = ruchB ? symbole[0] : symbole[1];
                                            styl_tulenie(1, 1, kolor_plansza);

                                        } else {
                                            stop = BUTTON.getName();
                                            polestart = true;
                                            koniecanimacji = false;
                                            hug_list.add(symbol + "" + start + "*" + stop);
                                            szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][ruchB ? 0 : 1] = ' ';
                                            szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1]
                                                    = ruchB ? symbole[0] : symbole[1];
                                            styl_tulenie(1, 1, kolor_plansza);
                                        }
                                    }
                                } else {
                                    przelotcan = false;
                                }
                            }
                            stop = BUTTON.getName();
                            polestart = false;
                            koniecanimacji = true;
                            if (ruchB == false) {
                                movenr = movenr + 1;
                            }
                            czysc_rame();
                            cursor = null;
                            szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][ruchB ? 0 : 1] = ' ';
                            szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][ruchB ? 1 : 0] = ' ';
                            szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1] = ruchB ? symbole[0]
                                    : symbole[1];
                            szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 1 : 0] = symbole[ruchB ? 1
                                    : 0] == ' ' ? ' ' : symbole[ruchB ? 1 : 0];
                            styl_tulenie(1, 1, kolor_plansza);
                            if (liczba_usciskow == 0) {
                                ruchB = ruchB != true;
                            }
                        } else {
                            Toolkit.getDefaultToolkit().beep();
                        }
                    }
                    /* for (int i = 7; i > -1; i--) {
                        for (int j = 0; j < 8; j++) {
                            System.out.print("[" + (szachownica_pokoj[i][j][0] != ' ' ? szachownica_pokoj[i][j][0] : ' ') + "|" + (szachownica_pokoj[i][j][1] != ' ' ? szachownica_pokoj[i][j][1] : ' ') + "]");
                        }
                        System.out.println();
                    }*/
                }
            } else {
                if (lokalK[0] == lokalS[0] && lokalK[1] == lokalS[1]) {
                    if (liczba_usciskow == 0) {
                        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        dobierz_kursor_na_przycisku(' ', null);
                        zmien = false;
                        promo = ' ';
                        koniecanimacji = true;
                        BUTTON.setIcon(cursor);
                        polestart = false;
                        wyk = false;
                        BUTTON.setBorder(null);
                        szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][0] = symbole[0];
                        szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][1] = symbole[1];
                        szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1] = symbol;
                        /* for (int i = 0; i < 8; i++) {
                            for (int j = 7; j >= 0; j--) {
                                System.out.print("[" + (szachownica_pokoj[i][j][0] != ' ' ? szachownica_pokoj[i][j][0] : ' ') + "|" + (szachownica_pokoj[i][j][1] != ' ' ? szachownica_pokoj[i][j][1] : ' ') + "]");
                            }
                            System.out.println();
                        }*/
                    } else {

                        start = stop;
                        stop = "";
                        switch (hug_list.get(hug_list.size() - 1).charAt(0)) {
                            case 'p':
                                cursor = (new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                break;
                            case 'n':
                                cursor = (new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                break;
                            case 'b':
                                cursor = (new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                break;
                            case 'r':
                                cursor = (new ImageIcon(this.getClass().getResource("Brook001.png")));
                                break;
                            case 'q':
                                cursor = (new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                break;
                            case 'k':
                                cursor = (new ImageIcon(this.getClass().getResource("Bking001.png")));
                                break;
                            case 'P':
                                cursor = (new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                break;
                            case 'N':
                                cursor = (new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                break;
                            case 'B':
                                cursor = (new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                break;
                            case 'R':
                                cursor = (new ImageIcon(this.getClass().getResource("Brook001.png")));
                                break;
                            case 'Q':
                                cursor = (new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                break;
                            case 'K':
                                cursor = (new ImageIcon(this.getClass().getResource("Bking001.png")));
                                break;
                        }
                        jLabel12.setIcon(cursor);
                        dobierzprzycisk(start, false).setBorder(null);
                        char temp = szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][ruchB ? 0 : 1];
                        szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][ruchB ? 0 : 1] = symbol;
                        symbol = temp;
                        dobierz_kursor(symbol);
                        polestart = true;
                        start = hug_list.get(hug_list.size() - 1).substring(1, 3);
                        liczba_usciskow = liczba_usciskow - 1;
                        hug_list.remove(hug_list.size() - 1);
                        switch (start.charAt(0)) {
                            case 'A':
                                pomx = 1;
                                break;
                            case 'B':
                                pomx = 2;
                                break;
                            case 'C':
                                pomx = 3;
                                break;
                            case 'D':
                                pomx = 4;
                                break;
                            case 'E':
                                pomx = 5;
                                break;
                            case 'F':
                                pomx = 6;
                                break;
                            case 'G':
                                pomx = 7;
                                break;
                            case 'H':
                                pomx = 8;
                                break;
                        }
                        switch (start.charAt(1)) {
                            case '1':
                                pomy = 1;
                                break;
                            case '2':
                                pomy = 2;
                                break;
                            case '3':
                                pomy = 3;
                                break;
                            case '4':
                                pomy = 4;
                                break;
                            case '5':
                                pomy = 5;
                                break;
                            case '6':
                                pomy = 6;
                                break;
                            case '7':
                                pomy = 7;
                                break;
                            case '8':
                                pomy = 8;
                                break;
                        }
                        lokalS[0] = (byte) pomx;
                        lokalS[1] = (byte) pomy;

                    }
                } else {
                    boolean dozwolony = Ruch_pokoj.ruch(lokalS, lokalK, symbol, szachownica_pokoj, ruchB, przelotcan,
                            kol, ruchB ? symbole[1] : symbole[0]);
                    System.out.println("Accept hug" + dozwolony + " " + symbol);
                    if (dozwolony == true) {
                        czysc_rame();
                        if (szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1] == ' ') {
                            stop = BUTTON.getName();
                            hug_list.clear();
                            koniecanimacji = true;
                            zmien = false;
                            polestart = false;
                            wyk = false;
                            stop = BUTTON.getName();
                            polestart = false;
                            if (ruchB == false) {
                                movenr = movenr + 1;
                            }
                            if (liczba_usciskow == 0) {
                                szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][ruchB ? 0 : 1] = ' ';
                            }
                            szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1] = symbol;
                            czysc_rame();
                            styl_tulenie(1, 1, kolor_plansza);
                            liczba_usciskow = 0;
                            cursor = null;
                            ruchB = ruchB != true;
                            if (szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1] == (ruchB ? 'K'
                                    : 'k')) {
                                JOptionPane.showMessageDialog(rootPane, "KRÓL ZOSTAŁ PRZYTULONY");
                                kapitulacja();
                            }

                        } else {

                            stop = BUTTON.getName();
                            koniecanimacji = true;
                            hug_list.add(symbol + "" + start + "*" + stop);
                            polestart = true;
                            if (liczba_usciskow < 1) {
                                szachownica_pokoj[lokalS[1] - 1][lokalS[0] - 1][ruchB ? 0 : 1] = ' ';
                            }

                            liczba_usciskow++;
                            char temp = symbol;
                            symbol = szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1];
                            szachownica_pokoj[lokalK[1] - 1][lokalK[0] - 1][ruchB ? 0 : 1] = temp;
                            styl_tulenie(1, 1, kolor_plansza);
                            lokalS[0] = lokalK[0];
                            lokalS[1] = lokalK[1];
                            lokalK[0] = 0;
                            lokalK[1] = 0;
                            czysc_rame();
                            cursor = BUTTON.getIcon();
                            dobierz_kursor(symbol);
                            switch (symbol) {
                                case 'K':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wking001.png")));
                                    break;
                                case 'Q':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wqueen01.png")));
                                    break;
                                case 'R':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wrook001.png")));
                                    break;
                                case 'B':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wbishop1.png")));
                                    break;
                                case 'N':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wknight1.png")));
                                    break;
                                case 'P':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Wpawn001.png")));
                                    break;
                                case 'k':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Bking001.png")));
                                    break;
                                case 'q':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Bqueen01.png")));
                                    break;
                                case 'r':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Brook001.png")));
                                    break;
                                case 'b':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Bbishop1.png")));
                                    break;
                                case 'n':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Bknight1.png")));
                                    break;
                                case 'p':
                                    jLabel12.setIcon(new ImageIcon(this.getClass().getResource("Bpawn001.png")));
                                    break;
                                default:
                                    jLabel12.setIcon(null);
                                    break;
                            }
                            jLabel12.setText("tulacy" + stop);
                            koniecanimacji = false;
                            System.out.println(symbol);
                        }
                    } else {
                        Toolkit.getDefaultToolkit().beep();
                    }
                }
            }
            for (int i = 7; i > -1; i--) {
                for (int j = 0; j < 8; j++) {
                    System.out.print("[" + (szachownica_pokoj[i][j][0] != ' ' ? szachownica_pokoj[i][j][0] : ' ') + "|" + (szachownica_pokoj[i][j][1] != ' ' ? szachownica_pokoj[i][j][1] : ' ') + "]");
                }
                System.out.println();
            }
            System.out.println();
            System.out.println();
            System.out.println();
        }
        styl_tulenie(1, 1, kolor_plansza);
    }

    /**
     * Metoda ta obsługuje działanie przycisków planszy
     *
     * @param pole Przyjmuje za argument wciśnięty przycisk planszy
     */
    void Button_Clicked(Object pole) {
        JButton BUTTON = (JButton) pole;
        System.out.println(BUTTON.getName());
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
        System.out.println(BUTTON.getName() + "START");
        byte pomocx = 0, pomocy = 0;
        char pomoc2, pomoc3;
        if (gra) {
            System.out.println(oczekiwanie);
            if (siec == false || (siec == true && oczekiwanie == false) || wzor == true) {
                if (przelot) {
                } else {
                    prze = false;
                    if (roch) {
                    } else {
                        if (BUTTON.getIcon() != null || polestart) {
                            if (polestart == false) {
                                pomocs = BUTTON.getName();
                                pomoc2 = pomocs.charAt(0);
                                pomoc3 = pomocs.charAt(1);
                                if (odwrot == false) {
                                    switch (pomoc2) {
                                        case 'A':
                                            pomocx = 1;
                                            break;
                                        case 'B':
                                            pomocx = 2;
                                            break;
                                        case 'C':
                                            pomocx = 3;
                                            break;
                                        case 'D':
                                            pomocx = 4;
                                            break;
                                        case 'E':
                                            pomocx = 5;
                                            break;
                                        case 'F':
                                            pomocx = 6;
                                            break;
                                        case 'G':
                                            pomocx = 7;
                                            break;
                                        case 'H':
                                            pomocx = 8;
                                            break;
                                    }
                                    switch (pomoc3) {
                                        case '1':
                                            pomocy = 1;
                                            break;
                                        case '2':
                                            pomocy = 2;
                                            break;
                                        case '3':
                                            pomocy = 3;
                                            break;
                                        case '4':
                                            pomocy = 4;
                                            break;
                                        case '5':
                                            pomocy = 5;
                                            break;
                                        case '6':
                                            pomocy = 6;
                                            break;
                                        case '7':
                                            pomocy = 7;
                                            break;
                                        case '8':
                                            pomocy = 8;
                                            break;
                                    }
                                } else {
                                    switch (pomoc2) {
                                        case 'A':
                                            pomocx = 8;
                                            break;
                                        case 'B':
                                            pomocx = 7;
                                            break;
                                        case 'C':
                                            pomocx = 6;
                                            break;
                                        case 'D':
                                            pomocx = 5;
                                            break;
                                        case 'E':
                                            pomocx = 4;
                                            break;
                                        case 'F':
                                            pomocx = 3;
                                            break;
                                        case 'G':
                                            pomocx = 2;
                                            break;
                                        case 'H':
                                            pomocx = 1;
                                            break;
                                    }
                                    switch (pomoc3) {
                                        case '1':
                                            pomocy = 8;
                                            break;
                                        case '2':
                                            pomocy = 7;
                                            break;
                                        case '3':
                                            pomocy = 6;
                                            break;
                                        case '4':
                                            pomocy = 5;
                                            break;
                                        case '5':
                                            pomocy = 4;
                                            break;
                                        case '6':
                                            pomocy = 3;
                                            break;
                                        case '7':
                                            pomocy = 2;
                                            break;
                                        case '8':
                                            pomocy = 1;
                                            break;
                                    }
                                }
                                lokalS[0] = pomocx;
                                lokalS[1] = pomocy;

                                symbol = ust[pomocy - 1][pomocx - 1];
                                if (symbol == 'K' || symbol == 'Q' || symbol == 'R' || symbol == 'B' || symbol == 'N' || symbol == 'P' || symbol == 'A') {
                                    pomoci1 = 'W';
                                } else {
                                    pomoci1 = 'B';
                                }
                                if ((pomoci1 == 'W' && ruchB) || (pomoci1 == 'B' && ruchB == false)) {
                                    zmien = false;
                                    nazwapola = BUTTON.getName();
                                    pomoc5 = BUTTON.getIcon();
                                    cursor = BUTTON.getIcon();
                                    pomoc2 = pomocs.charAt(0);
                                    start = pomocs;
                                    BUTTON.setIcon(null);
                                    pomoc3 = pomocs.charAt(1);
                                    if (odwrot == false) {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 1;
                                                break;
                                            case 'B':
                                                pomocx = 2;
                                                break;
                                            case 'C':
                                                pomocx = 3;
                                                break;
                                            case 'D':
                                                pomocx = 4;
                                                break;
                                            case 'E':
                                                pomocx = 5;
                                                break;
                                            case 'F':
                                                pomocx = 6;
                                                break;
                                            case 'G':
                                                pomocx = 7;
                                                break;
                                            case 'H':
                                                pomocx = 8;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 1;
                                                break;
                                            case '2':
                                                pomocy = 2;
                                                break;
                                            case '3':
                                                pomocy = 3;
                                                break;
                                            case '4':
                                                pomocy = 4;
                                                break;
                                            case '5':
                                                pomocy = 5;
                                                break;
                                            case '6':
                                                pomocy = 6;
                                                break;
                                            case '7':
                                                pomocy = 7;
                                                break;
                                            case '8':
                                                pomocy = 8;
                                                break;
                                        }
                                    } else {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 8;
                                                break;
                                            case 'B':
                                                pomocx = 7;
                                                break;
                                            case 'C':
                                                pomocx = 6;
                                                break;
                                            case 'D':
                                                pomocx = 5;
                                                break;
                                            case 'E':
                                                pomocx = 4;
                                                break;
                                            case 'F':
                                                pomocx = 3;
                                                break;
                                            case 'G':
                                                pomocx = 2;
                                                break;
                                            case 'H':
                                                pomocx = 1;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 8;
                                                break;
                                            case '2':
                                                pomocy = 7;
                                                break;
                                            case '3':
                                                pomocy = 6;
                                                break;
                                            case '4':
                                                pomocy = 5;
                                                break;
                                            case '5':
                                                pomocy = 4;
                                                break;
                                            case '6':
                                                pomocy = 3;
                                                break;
                                            case '7':
                                                pomocy = 2;
                                                break;
                                            case '8':
                                                pomocy = 1;
                                                break;
                                        }
                                    }
                                    lokalS[0] = pomocx;
                                    lokalS[1] = pomocy;
                                    symbol = ust[pomocy - 1][pomocx - 1];
                                    if ((symbol == 'P' && lokalS[1] == 7) || (symbol == 'p' && lokalS[1] == 2)) {
                                        promo = ' ';
                                    }
                                    dobierz_kursor(symbol);
                                    ust[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                    polestart = true;
                                    koniecanimacji = false;
                                    if (wzor == false) {
                                        animacja anim1 = new animacja(2, polestart, zmien, BUTTON, pomocs);
                                    }
                                    char[][] temp1 = new char[8][8];
                                    for (int i = 0; i < 8; i++) {
                                        System.arraycopy(ust[i], 0, temp1[i], 0, 8);
                                    }
                                    temp1[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                                    int[] temp2 = new int[2];
                                    temp2[0] = lokalS[1] - 1;
                                    temp2[1] = lokalS[0] - 1;
                                    if (opcje_pomoc == 1 || opcje_pomoc == 2) {
                                        System.out.println("opcja" + tryb);
                                        if (tryb != 4) {
                                            for (Ruch move : Generator.generuj_posuniecia((temp1), ruchB, przelotcan,
                                                    bleft, bright, wleft, wright, kingrochB, kingrochC, kol, true, symbol, temp2, false, false)) {
                                                if (!move.toString().startsWith("O-O")) {
                                                    JButton cel = dobierzprzycisk(move.toString().substring(4, 6), odwrot);
                                                    cel.setBorder(new LineBorder(pomoc_ruch, 4));
                                                } else {
                                                    if (ruchB) {
                                                        if (!move.toString().contains("O-O-O")) {
                                                            dobierzprzycisk("G1", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                                        } else {
                                                            dobierzprzycisk("C1", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                                        }
                                                    } else {
                                                        if (!move.toString().contains("O-O-O")) {
                                                            dobierzprzycisk("G8", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                                        } else {
                                                            dobierzprzycisk("C8", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            for (RuchA moveA : Generator.generuj_posunieciaA(konwertA(temp1), ruchB, przelotcan,
                                                    bleft, bright, wleft, wright, kingrochB, kingrochC, kol, true, symbol, temp2, false)) {
                                                if (!moveA.toString().startsWith("O-O")) {
                                                    JButton cel = dobierzprzycisk(moveA.toString().substring(4, 6), odwrot);
                                                    cel.setBorder(new LineBorder(pomoc_ruch, 4));
                                                } else {
                                                    if (ruchB) {
                                                        if (!moveA.toString().contains("O-O-O")) {
                                                            dobierzprzycisk("G1", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                                        } else {
                                                            dobierzprzycisk("C1", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                                        }
                                                    } else {
                                                        if (!moveA.toString().contains("O-O-O")) {
                                                            dobierzprzycisk("G8", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                                        } else {
                                                            dobierzprzycisk("C8", odwrot).setBorder(new LineBorder(pomoc_ruch, 4));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (siec == false && symulacja == false) {
                                        if (czasgry == -1 && siec == false && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                                            if (ruchB) {
                                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! AKTUALNY RUCH MAJĄ BIAŁE", "bład koloru",
                                                        JOptionPane.WARNING_MESSAGE);
                                            } else {
                                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! AKTUALNY RUCH MAJĄ CZARNE", "błąd koloru",
                                                        JOptionPane.WARNING_MESSAGE);
                                            }
                                        } else {
                                            Toolkit.getDefaultToolkit().beep();
                                        }
                                        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);

                                    }
                                }
                            } else {
                                if (BUTTON.getIcon() == null) {
                                    pomoce = BUTTON.getName();
                                    stop = pomoce;
                                    pomoc3 = pomoce.charAt(1);
                                    pomoc2 = pomoce.charAt(0);
                                    if (odwrot == false) {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 1;
                                                break;
                                            case 'B':
                                                pomocx = 2;
                                                break;
                                            case 'C':
                                                pomocx = 3;
                                                break;
                                            case 'D':
                                                pomocx = 4;
                                                break;
                                            case 'E':
                                                pomocx = 5;
                                                break;
                                            case 'F':
                                                pomocx = 6;
                                                break;
                                            case 'G':
                                                pomocx = 7;
                                                break;
                                            case 'H':
                                                pomocx = 8;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 1;
                                                break;
                                            case '2':
                                                pomocy = 2;
                                                break;
                                            case '3':
                                                pomocy = 3;
                                                break;
                                            case '4':
                                                pomocy = 4;
                                                break;
                                            case '5':
                                                pomocy = 5;
                                                break;
                                            case '6':
                                                pomocy = 6;
                                                break;
                                            case '7':
                                                pomocy = 7;
                                                break;
                                            case '8':
                                                pomocy = 8;
                                                break;
                                        }
                                    } else {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 8;
                                                break;
                                            case 'B':
                                                pomocx = 7;
                                                break;
                                            case 'C':
                                                pomocx = 6;
                                                break;
                                            case 'D':
                                                pomocx = 5;
                                                break;
                                            case 'E':
                                                pomocx = 4;
                                                break;
                                            case 'F':
                                                pomocx = 3;
                                                break;
                                            case 'G':
                                                pomocx = 2;
                                                break;
                                            case 'H':
                                                pomocx = 1;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 8;
                                                break;
                                            case '2':
                                                pomocy = 7;
                                                break;
                                            case '3':
                                                pomocy = 6;
                                                break;
                                            case '4':
                                                pomocy = 5;
                                                break;
                                            case '5':
                                                pomocy = 4;
                                                break;
                                            case '6':
                                                pomocy = 3;
                                                break;
                                            case '7':
                                                pomocy = 2;
                                                break;
                                            case '8':
                                                pomocy = 1;
                                                break;
                                        }
                                    }
                                    lokalK[0] = pomocx;
                                    lokalK[1] = pomocy;
                                    if ((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) {
                                        if (symbol == 'R' || symbol == 'r') {
                                            switch (symbol) {
                                                case 'R':
                                                    if (lokalS[0] == 8 && lokalS[1] == 1
                                                            && RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, bicie, przelotcan, kol, false)) {
                                                        wright = false;
                                                        if (!wright && !wleft) {
                                                            kingrochB = false;
                                                        }
                                                    } else {
                                                        if (lokalS[0] == 1 && lokalS[1] == 1
                                                                && RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, bicie, przelotcan, kol, false)) {
                                                            wleft = false;
                                                            if (!wright && !wleft) {
                                                                kingrochB = false;
                                                            }
                                                        }
                                                    }
                                                    break;
                                                case 'r':
                                                    if (lokalS[0] == 8 && lokalS[1] == 8
                                                            && RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, bicie, przelotcan, kol, false)) {
                                                        bright = false;

                                                    } else {
                                                        if (lokalS[0] == 1 && lokalS[1] == 8
                                                                && RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, bicie, przelotcan, kol, false)) {
                                                            bleft = false;

                                                        }
                                                    }
                                                    break;
                                            }
                                            if (!bright && !bleft) {
                                                kingrochC = false;
                                            }
                                            if (!wright && !wleft) {
                                                kingrochB = false;
                                            }
                                        }
                                        //System.out.println(wright + " " + wleft);
                                        // System.out.println(bright + " " + bleft);
                                        atak = krolS;
                                        if ((symbol == 'K' || symbol == 'k') && atak == false && ((ruchB && kingrochB
                                                && (((lokalS[0] - lokalK[0]) == -2 && ust[0][5] == ' ' && ust[0][6] == ' ' && wright)
                                                || (lokalS[0] - lokalK[0] == 2 && ust[0][3] == ' ' && ust[0][2] == ' ' && ust[0][1] == ' ' && wleft)))
                                                || (!ruchB && kingrochC && (((lokalS[0] - lokalK[0]) == -2 && ust[7][5] == ' ' && ust[7][6] == ' ' && bright) || (lokalS[0] - lokalK[0] == 2 && ust[7][3] == ' ' && ust[7][2] == ' ' && ust[7][1] == ' ' && bleft))))) {
                                            for (int i = 0; i < 8; i++) {
                                                for (int j = 0; j < 8; j++) {
                                                    kontrolka[i][j] = ust[i][j];
                                                }
                                            }
                                            if (ruchB) {
                                                symbol = 'K';
                                                if ((lokalS[0] - lokalK[0]) == -2) {
                                                    kontrolka[0][6] = 'K';
                                                    kontrolka[0][4] = ' ';
                                                    checka = RuchZagrozenie_kontrola.szach(kontrolka, true);
                                                    kontrolka[0][6] = ' ';
                                                    kontrolka[0][5] = 'K';
                                                    checkp = RuchZagrozenie_kontrola.szach(kontrolka, true);
                                                    kontrolka[0][5] = ' ';
                                                    kontrolka[0][4] = 'K';
                                                } else {
                                                    if ((lokalS[0] - lokalK[0]) == 2) {
                                                        kontrolka[0][2] = 'K';
                                                        kontrolka[0][4] = ' ';
                                                        checka = RuchZagrozenie_kontrola.szach(kontrolka, true);
                                                        kontrolka[0][2] = ' ';
                                                        kontrolka[0][3] = 'K';
                                                        checkp = RuchZagrozenie_kontrola.szach(kontrolka, true);
                                                        kontrolka[0][3] = ' ';
                                                        kontrolka[0][4] = 'K';
                                                    }
                                                }
                                                System.out.println(checka + " " + checkp);
                                            } else {
                                                symbol = 'k';
                                                if ((lokalS[0] - lokalK[0]) == -2) {
                                                    kontrolka[7][6] = 'k';
                                                    kontrolka[7][4] = ' ';
                                                    checka = RuchZagrozenie_kontrola.szach(kontrolka, false);
                                                    kontrolka[7][6] = ' ';
                                                    kontrolka[7][5] = 'k';
                                                    checkp = RuchZagrozenie_kontrola.szach(kontrolka, false);
                                                    kontrolka[7][5] = ' ';
                                                    kontrolka[7][4] = 'k';
                                                } else {
                                                    if ((lokalS[0] - lokalK[0]) == 2) {
                                                        kontrolka[7][2] = 'k';
                                                        kontrolka[7][4] = ' ';
                                                        checka = RuchZagrozenie_kontrola.szach(kontrolka, false);
                                                        kontrolka[7][2] = ' ';
                                                        kontrolka[7][3] = 'k';
                                                        checkp = RuchZagrozenie_kontrola.szach(kontrolka, false);
                                                        kontrolka[7][3] = ' ';
                                                        kontrolka[7][4] = 'k';
                                                    }
                                                }
                                            }
                                            if (checka == false && checkp == false) {
                                                wyk = true;
                                                zmien = true;
                                                ust[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                if (ruchB) {
                                                    ust[lokalK[1] - 1][lokalK[0] - 1] = 'K';
                                                } else {
                                                    ust[lokalK[1] - 1][lokalK[0] - 1] = 'k';
                                                }
                                                roch = true;
                                                if (ruchB) {
                                                    kingrochB = false;
                                                } else {
                                                    kingrochC = false;
                                                }
                                                polestart = false;
                                                wyk = false;
                                                zmien = true;
                                                BUTTON.setIcon(cursor);
                                                if (ruchB) {
                                                    kon = true;
                                                    ust[0][4] = ' ';
                                                    if (lokalS[0] - lokalK[0] == -2) {
                                                        ust[0][5] = 'R';
                                                        ust[0][7] = ' ';
                                                        if (odwrot == false) {
                                                            cursor = H1.getIcon();
                                                            H1.setIcon(null);
                                                            F1.setIcon(cursor);
                                                        } else {
                                                            cursor = A8.getIcon();
                                                            A8.setIcon(null);
                                                            C8.setIcon(cursor);
                                                        }
                                                        ust[0][6] = 'K';
                                                    } else {
                                                        ust[0][3] = 'R';
                                                        ust[0][0] = ' ';
                                                        if (odwrot == false) {
                                                            cursor = A1.getIcon();
                                                            A1.setIcon(null);
                                                            D1.setIcon(cursor);
                                                        } else {
                                                            cursor = H8.getIcon();
                                                            H8.setIcon(null);
                                                            F8.setIcon(cursor);
                                                        }
                                                        ust[0][2] = 'K';
                                                    }
                                                    kingrochB = false;
                                                    polestart = false;
                                                    roch = true;
                                                    dokonano_RB = true;
                                                    ruchB = ruchB != true;
                                                    kontrolamat = ust;
                                                    krolS = RuchZagrozenie_kontrola.szach(kontrolamat, ruchB);
                                                } else {
                                                    kon = true;
                                                    ust[7][4] = ' ';
                                                    if (lokalS[0] - lokalK[0] == -2) {
                                                        ust[7][5] = 'r';
                                                        ust[7][7] = ' ';
                                                        if (odwrot == false) {
                                                            cursor = H8.getIcon();
                                                            H8.setIcon(null);
                                                            F8.setIcon(cursor);
                                                        } else {
                                                            cursor = A1.getIcon();
                                                            A1.setIcon(null);
                                                            C1.setIcon(cursor);
                                                        }
                                                        ust[7][6] = 'k';
                                                    } else {
                                                        ust[7][3] = 'r';
                                                        ust[7][0] = ' ';
                                                        if (odwrot == false) {
                                                            cursor = A8.getIcon();
                                                            A8.setIcon(null);
                                                            C8.setIcon(cursor);
                                                        } else {
                                                            cursor = H1.getIcon();
                                                            H1.setIcon(null);
                                                            F1.setIcon(cursor);
                                                        }
                                                        ust[7][2] = 'k';
                                                    }
                                                    polestart = false;
                                                    kingrochC = false;
                                                    dokonano_RC = true;
                                                    ruchB = ruchB != true;
                                                    krolS = RuchZagrozenie_kontrola.szach(ust, ruchB);
                                                    kontrolamat = ust;
                                                }
                                                char[][] USTAWIENIE1 = ust;
                                                for (int i = 0; i < 8; i++) {
                                                    System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                                }
                                                for (int i = 0; i < 8; i++) {
                                                    for (int j = 0; j < 8; j++) {
                                                        odwrotna[i][j] = ust[7 - i][7 - j];
                                                    }
                                                }
                                                /* for (int i = 0; i < 8; i++) {
                                                    for (int j = 0; j < 8; j++) {
                                                        System.out.print("{" + ust[i][j] + "}");
                                                    }
                                                    System.out.println();
                                                }*/
                                                for (int i = 0; i < 8; i++) {
                                                    System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                                }
                                                czysc_rame();
                                                ustawrame();
                                                if (krolS) {
                                                    if (siec == false && symulacja == false) {
                                                        JOptionPane.showMessageDialog(rootPane, "SZACH! KROL JEST ATAKOWANY", "Ostrzeżenie",
                                                                JOptionPane.WARNING_MESSAGE);
                                                    }
                                                    Toolkit.getDefaultToolkit().beep();
                                                    kontrolamat = ust;
                                                    for (int i = 0; i < 8; i++) {
                                                        for (int j = 0; j < 8; j++) {
                                                            if ((ruchB && kontrolamat[i][j] == 'K') || (ruchB == false && kontrolamat[i][j] == 'k')) {
                                                                poza_krolewska[0] = i;
                                                                poza_krolewska[1] = j;
                                                            }
                                                        }
                                                    }
                                                    klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);
                                                    System.out.println("klopoty X:" + klopoty[0] + "Y:" + klopoty[1]);
                                                    System.out.println(ust[klopoty[0]][klopoty[1]]);
                                                    hodu = SzachMatPatKontrola.uciekaj(kontrolamat, ruchB, poza_krolewska);
                                                    if (hodu == false) {
                                                        char[][] backupzapas = ust;
                                                        hitme = SzachMatPatKontrola.znajdzodsiecz(backupzapas.clone(), ruchB, Wspomagacz.znajdzklopot(kontrolamat, ruchB), kol, przelotcan);
                                                        if (hitme == false) {
                                                            protectme = SzachMatPatKontrola.zastaw(backupzapas.clone(), ruchB, Wspomagacz.znajdzklopot(kontrolamat, ruchB), poza_krolewska, przelotcan);
                                                            if (tryb == 8) {
                                                                protectme = (ruchB ? (rezerwyBG + rezerwyBH + ((Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1] == poza_krolewska[1] && (poza_krolewska[1] == 7 || poza_krolewska[1] == 0)) ? rezerwyBP : 0) + rezerwyBS + rezerwyBW > 0)
                                                                        : (rezerwyCG + rezerwyCH + ((Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1] == poza_krolewska[1] && (poza_krolewska[1] == 7 || poza_krolewska[1] == 0)) ? rezerwyBP : 0) + rezerwyCS + rezerwyCW > 0))
                                                                        && (Math.abs(poza_krolewska[0] - (Wspomagacz.znajdzklopot(kontrolamat, ruchB)[0])) > 1 || Math.abs(poza_krolewska[1] - (Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1])) > 1) && ust[klopoty[0]][klopoty[1]] != 'n' && ust[klopoty[0]][klopoty[1]] != 'N';
                                                            }
                                                        }
                                                    }
                                                    // System.out.println("ust");
                                                    for (int i = 0; i < 8; i++) {
                                                        System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8); //  System.out.print("[" + ust[i][j] + "]");
                                                        //System.out.println();
                                                    }

                                                } else {
                                                    krolS = false;
                                                    move = false;
                                                    for (int i = 0; i < 8; i++) {
                                                        for (int j = 0; j < 8; j++) {
                                                            System.out.print("(" + ust[i][j] + ")");
                                                        }
                                                        System.out.println();
                                                    }
                                                    for (int i = 0; i < 8; i++) {
                                                        for (int j = 0; j < 8; j++) {
                                                            if (ust[i][j] != ' ') {
                                                                pole_baza[0] = j;
                                                                pole_baza[1] = i;
                                                                if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                                                    if ((ruchB && ust[i][j] == 'K') || (ruchB == false && ust[i][j] == 'k')) {
                                                                        pole_baza[0] = i;
                                                                        pole_baza[1] = j;
                                                                        hodu = SzachMatPatKontrola.uciekaj(ust, ruchB, pole_baza);
                                                                    }
                                                                } else {
                                                                    move = SzachMatPatKontrola.znajdz_ruch(ust, ruchB, ust[i][j], pole_baza, przelotcan);
                                                                    if (move) {
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (move) {
                                                            break;
                                                        }
                                                    }
                                                    if (tryb == 8) {
                                                        move = ((ruchB && rezerwyBG + rezerwyBH + rezerwyBP + rezerwyBS + rezerwyBW == 0) || (!ruchB && rezerwyCG + rezerwyCH + rezerwyCP + rezerwyCS + rezerwyCW == 0));
                                                    }
                                                }
                                                roch = true;
                                            } else {
                                                if (czasgry == -1 && siec == false && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEDOZWOLONY.\n"
                                                            + "KRÓL PRZESZEDŁBY PRZEZ POLE ZAGROŻONE, \n"
                                                            + "LUB NA NIE BY WSZEDŁ", "Błąd roszady",
                                                            JOptionPane.INFORMATION_MESSAGE);
                                                } else {
                                                    Toolkit.getDefaultToolkit().beep();
                                                }
                                            }
                                        } else {
                                            if (lokalK[0] == lokalS[0] && lokalS[1] == lokalK[1]) {
                                                koniecanimacji = true;
                                                BUTTON.setIcon(cursor);
                                                zmien = false;
                                                promo = ' ';
                                                polestart = false;
                                                wyk = false;
                                                ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                czysc_rame();
                                                ustawrame();
                                            } else {
                                                if (symbol == 'K' || symbol == 'k') {
                                                    if (((kingrochB == false || (((lokalS[0] - lokalK[0]) != -2) && (lokalS[0] - lokalK[0] != 2)))
                                                            || (kingrochC == false || (((lokalS[0] - lokalK[0]) != -2) && (lokalS[0] - lokalK[0] != 2))))) {
                                                        polestart = true;
                                                        wyk = true;
                                                        kontrolka = ust;
                                                        kontrolka[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                        kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                        checka = RuchZagrozenie_kontrola.szach(kontrolka, ruchB);
                                                        kontrolka[lokalK[1] - 1][lokalK[0] - 1] = ' ';
                                                        kontrolka[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                                                        kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, kontrolka, ruchB, przelotcan, kol, false);
                                                        if (kon && checka != true) {
                                                            zmien = true;
                                                            polestart = false;
                                                            krolS = false;
                                                            if (ruchB) {
                                                                kingrochB = false;
                                                            } else {
                                                                kingrochC = false;
                                                            }
                                                            BUTTON.setIcon(cursor);
                                                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                            wyk = true;
                                                            pomoc5 = null;
                                                        } else {
                                                            wyk = false;
                                                            polestart = true;
                                                            if (czasgry == -1 && siec == false) {
                                                                if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                                    if (checka == false && kon == false) {
                                                                        JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                                                JOptionPane.INFORMATION_MESSAGE);
                                                                    } else {
                                                                        JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                                                JOptionPane.INFORMATION_MESSAGE);
                                                                    }

                                                                    switch (symbol) {
                                                                        case 'K':
                                                                        case 'k':
                                                                            JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                            break;
                                                                        case 'Q':
                                                                        case 'q':
                                                                            JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                            break;
                                                                        case 'R':
                                                                        case 'r':
                                                                            JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                            break;
                                                                        case 'B':
                                                                        case 'b':
                                                                            JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                            break;
                                                                        case 'N':
                                                                        case 'n':
                                                                            JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                                    + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                            break;
                                                                        case 'P':
                                                                        case 'p':
                                                                            JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                                    + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                            JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                                    + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                                    + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                            break;
                                                                    }
                                                                }
                                                            } else {
                                                                Toolkit.getDefaultToolkit().beep();
                                                            }
                                                            styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                                        }
                                                        if (wyk) {
                                                            char[][] USTAWIENIE1 = new char[8][8];
                                                            polestart = false;
                                                            ruchB = ruchB != true;
                                                            for (int i = 0; i < 8; i++) {
                                                                System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8);
                                                            }
                                                            krolS = RuchZagrozenie_kontrola.szach(ust, ruchB);
                                                            for (int i = 0; i < 8; i++) {
                                                                System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                                            }
                                                            for (int i = 0; i < 8; i++) {
                                                                for (int j = 0; j < 8; j++) {
                                                                    odwrotna[i][j] = ust[7 - i][7 - j];
                                                                }
                                                            }
                                                            /*for (int i = 0; i < 8; i++) {
                                                                for (int j = 0; j < 8; j++) {
                                                                    System.out.print("{" + ust[i][j] + "}");
                                                                }
                                                                System.out.println();
                                                            }*/
                                                            for (int i = 0; i < 8; i++) {
                                                                System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                                            }
                                                            czysc_rame();
                                                            ustawrame();
                                                            if (krolS) {
                                                                if (siec == false && symulacja == false) {
                                                                    JOptionPane.showMessageDialog(rootPane, "SZACH! KROL JEST ATAKOWANY", "Ostrzeżenie",
                                                                            JOptionPane.WARNING_MESSAGE);
                                                                }
                                                                Toolkit.getDefaultToolkit().beep();
                                                                kontrolamat = ust;
                                                                for (int i = 0; i < 8; i++) {
                                                                    for (int j = 0; j < 8; j++) {
                                                                        USTAWIENIE1[i][j] = ust[i][j];
                                                                        if ((ruchB && kontrolamat[i][j] == 'K') || (ruchB == false && kontrolamat[i][j] == 'k')) {
                                                                            poza_krolewska[0] = i;
                                                                            poza_krolewska[1] = j;
                                                                        }
                                                                    }
                                                                }
                                                                klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);
                                                                System.out.println("klopoty X:" + klopoty[0] + "Y:" + klopoty[1]);
                                                                System.out.println(ust[klopoty[0]][klopoty[1]]);
                                                                hodu = SzachMatPatKontrola.uciekaj(kontrolamat, ruchB, poza_krolewska);
                                                                if (hodu == false) {
                                                                    char[][] backupzapas = ust;
                                                                    hitme = SzachMatPatKontrola.znajdzodsiecz(backupzapas.clone(), ruchB, Wspomagacz.znajdzklopot(kontrolamat, ruchB), kol, przelotcan);
                                                                    if (hitme == false) {
                                                                        protectme = SzachMatPatKontrola.zastaw(backupzapas.clone(), ruchB, Wspomagacz.znajdzklopot(kontrolamat, ruchB), poza_krolewska, przelotcan);
                                                                        if (tryb == 8) {
                                                                            protectme = (ruchB ? (rezerwyBG + rezerwyBH + ((Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1] == poza_krolewska[1] && (poza_krolewska[1] == 7 || poza_krolewska[1] == 0)) ? rezerwyBP : 0) + rezerwyBS + rezerwyBW > 0)
                                                                                    : (rezerwyCG + rezerwyCH + ((Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1] == poza_krolewska[1] && (poza_krolewska[1] == 7 || poza_krolewska[1] == 0)) ? rezerwyBP : 0) + rezerwyCS + rezerwyCW > 0))
                                                                                    && (Math.abs(poza_krolewska[0] - (Wspomagacz.znajdzklopot(kontrolamat, ruchB)[0])) > 1 || Math.abs(poza_krolewska[1] - (Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1])) > 1) && ust[klopoty[0]][klopoty[1]] != 'n' && ust[klopoty[0]][klopoty[1]] != 'N';
                                                                        }
                                                                    }
                                                                }
                                                                System.out.println("ust");
                                                                for (int i = 0; i < 8; i++) {
                                                                    System.arraycopy(USTAWIENIE1[i], 0, ust[i], 0, 8);
                                                                    System.out.println();
                                                                }

                                                            } else {
                                                                krolS = false;
                                                                move = false;
                                                                USTAWIENIE1 = ust;
                                                                for (int i = 0; i < 8; i++) {
                                                                    for (int j = 0; j < 8; j++) {
                                                                        if (ust[i][j] != ' ') {
                                                                            pole_baza[0] = j;
                                                                            pole_baza[1] = i;
                                                                            if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                                                                if ((ruchB && ust[i][j] == 'K') || (ruchB == false && ust[i][j] == 'k')) {
                                                                                    pole_baza[0] = i;
                                                                                    pole_baza[1] = j;
                                                                                    hodu = SzachMatPatKontrola.uciekaj(ust, ruchB, pole_baza);
                                                                                }
                                                                            } else {
                                                                                move = SzachMatPatKontrola.znajdz_ruch(ust, ruchB, ust[i][j], pole_baza, przelotcan);
                                                                                if (move) {
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    if (move) {
                                                                        break;
                                                                    }
                                                                }
                                                                if (tryb == 8) {
                                                                    move = ((ruchB && rezerwyBG + rezerwyBH + rezerwyBP + rezerwyBS + rezerwyBW == 0) || (!ruchB && rezerwyCG + rezerwyCH + rezerwyCP + rezerwyCS + rezerwyCW == 0));
                                                                }
                                                            }
                                                            for (int i = 0; i < 8; i++) {
                                                                System.arraycopy(USTAWIENIE1[i], 0, ust[i], 0, 8);
                                                            }
                                                        }
                                                    } else {
                                                        if (czasgry == -1 && siec == false && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                                                            JOptionPane.showMessageDialog(rootPane, "BŁĄD ROSZADY!", "Ostrzeżenie",
                                                                    JOptionPane.WARNING_MESSAGE);
                                                        } else {
                                                            Toolkit.getDefaultToolkit().beep();
                                                        }
                                                    }
                                                } else {
                                                    kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust, ruchB, przelotcan, kol, false);

                                                    if (kon) {
                                                        kontrolka = ust.clone();
                                                        kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                        kontrolka[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                        pakc = RuchZagrozenie_kontrola.szach(kontrolka, ruchB);
                                                        zmien = true;
                                                    } else {
                                                        pakc = true;
                                                    }
                                                    if (pakc == false && kon) {
                                                        if ((symbol == 'P' && lokalS[0] == lokalK[0] && lokalS[1] - lokalK[1] == -2)
                                                                || (symbol == 'p' && lokalS[0] == lokalK[0] && lokalS[1] - lokalK[1] == 2)) {
                                                            przelotcan = true;
                                                            kol = lokalS[0];
                                                        } else {
                                                            if (przelotcan && (symbol == 'p' || symbol == 'P') && Math.abs(lokalS[1] - lokalK[1]) == 1
                                                                    && ((ruchB && lokalS[1] == 5) || (ruchB == false && lokalS[1] == 4))) {
                                                            } else {
                                                                kol = 0;
                                                            }
                                                        }
                                                        if (symbol == 'P' || symbol == 'p') {
                                                            if ((przelotcan && ((lokalK[0] == kol && symbol == 'P' && lokalS[1] - lokalK[1] == -1 && lokalS[0] != lokalK[0] && lokalS[1] == 5)
                                                                    || (lokalK[0] == kol && symbol == 'p' && lokalS[1] - lokalK[1] == 1 && lokalS[0] != lokalK[0] && lokalS[1] == 4)))) {
                                                                kontrolka = ust;
                                                                kontrolka[lokalS[1] - 1][lokalK[0] - 1] = ' ';
                                                                kontrolka[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                                kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                                pakc = RuchZagrozenie_kontrola.szach(kontrolka, ruchB);
                                                                kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, kontrolka, ruchB, przelotcan, kol, false);
                                                                if (pakc != true) {
                                                                    kon = true;
                                                                    przelot = false;
                                                                    dokonanoEP = true;
                                                                    BUTTON.setIcon(cursor);
                                                                    ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                                    if (ruchB == false) {
                                                                        pionB = (byte) (pionB - 1);
                                                                    } else {
                                                                        pionC = (byte) (pionC - 1);
                                                                    }
                                                                    switch (lokalK[0]) {
                                                                        case 1:
                                                                            if (ruchB) {
                                                                                ust[4][0] = ' ';
                                                                                A5.setIcon(null);
                                                                            } else {
                                                                                ust[3][0] = ' ';
                                                                                A4.setIcon(null);
                                                                            }
                                                                            break;
                                                                        case 2:
                                                                            if (ruchB) {
                                                                                ust[4][1] = ' ';
                                                                                B5.setIcon(null);
                                                                            } else {
                                                                                ust[3][1] = ' ';
                                                                                B4.setIcon(null);
                                                                            }
                                                                            break;
                                                                        case 3:
                                                                            if (ruchB) {
                                                                                ust[4][2] = ' ';
                                                                                C5.setIcon(null);
                                                                            } else {
                                                                                ust[3][2] = ' ';
                                                                                C4.setIcon(null);
                                                                            }
                                                                            break;
                                                                        case 4:
                                                                            if (ruchB) {
                                                                                ust[4][3] = ' ';
                                                                                D5.setIcon(null);
                                                                            } else {
                                                                                ust[3][3] = ' ';
                                                                                D4.setIcon(null);
                                                                            }
                                                                            break;
                                                                        case 5:
                                                                            if (ruchB) {
                                                                                ust[4][4] = ' ';
                                                                                E5.setIcon(null);
                                                                            } else {
                                                                                ust[3][4] = ' ';
                                                                                E4.setIcon(null);
                                                                            }
                                                                            break;
                                                                        case 6:
                                                                            if (ruchB) {
                                                                                ust[4][5] = ' ';
                                                                                F5.setIcon(null);
                                                                            } else {
                                                                                ust[3][5] = ' ';
                                                                                F4.setIcon(null);
                                                                            }
                                                                            break;
                                                                        case 7:
                                                                            if (ruchB) {
                                                                                ust[4][6] = ' ';
                                                                                G5.setIcon(null);
                                                                            } else {
                                                                                ust[3][6] = ' ';
                                                                                G4.setIcon(null);
                                                                            }
                                                                            break;
                                                                        case 8:
                                                                            if (ruchB) {
                                                                                ust[4][7] = ' ';
                                                                                H5.setIcon(null);
                                                                            } else {
                                                                                ust[3][7] = ' ';
                                                                                H4.setIcon(null);
                                                                            }
                                                                            break;
                                                                    }
                                                                    wyk = true;
                                                                    prze = true;
                                                                    bicie = true;
                                                                    if (tryb == 8) {
                                                                        if (ruchB) {
                                                                            rezerwyCP++;
                                                                        } else {
                                                                            rezerwyBP++;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if (symbol == 'P') {
                                                                        kontrolka[lokalS[1] - 1][kol - 1] = 'p';
                                                                        kontrolka[lokalK[1] - 1][kol - 1] = ' ';
                                                                        kontrolka[lokalS[1] - 1][lokalS[0] - 1] = 'P';
                                                                    } else {
                                                                        kontrolka[lokalS[1] - 1][kol - 1] = 'P';
                                                                        kontrolka[lokalK[1] - 1][kol - 1] = ' ';
                                                                        kontrolka[lokalS[1] - 1][lokalS[0] - 1] = 'p';
                                                                    }
                                                                    polestart = true;
                                                                    wyk = false;
                                                                    przelot = false;
                                                                    if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                                        if (pakc == false && kon == false) {
                                                                            JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                                                    JOptionPane.INFORMATION_MESSAGE);
                                                                        } else {
                                                                            JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                                                    JOptionPane.INFORMATION_MESSAGE);
                                                                        }

                                                                        switch (symbol) {
                                                                            case 'K':
                                                                            case 'k':
                                                                                JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                                break;
                                                                            case 'Q':
                                                                            case 'q':
                                                                                JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                                break;
                                                                            case 'R':
                                                                            case 'r':
                                                                                JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                                break;
                                                                            case 'B':
                                                                            case 'b':
                                                                                JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                                break;
                                                                            case 'N':
                                                                            case 'n':
                                                                                JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                                        + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                                break;
                                                                            case 'P':
                                                                            case 'p':
                                                                                JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                                        + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                                JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                                        + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                                        + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                                break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            przelotcan = false;
                                                        }
                                                        pakc = RuchZagrozenie_kontrola.szach(ust, ruchB);
                                                        if (pakc != true) {
                                                            polestart = false;
                                                            wyk = true;
                                                        } else {
                                                            polestart = true;
                                                            wyk = false;
                                                            if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                                if (pakc == false) {
                                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                                            JOptionPane.INFORMATION_MESSAGE);
                                                                } else {
                                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                                            JOptionPane.INFORMATION_MESSAGE);
                                                                }

                                                                switch (symbol) {
                                                                    case 'K':
                                                                    case 'k':
                                                                        JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                    case 'Q':
                                                                    case 'q':
                                                                        JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                    case 'R':
                                                                    case 'r':
                                                                        JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                    case 'B':
                                                                    case 'b':
                                                                        JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                    case 'N':
                                                                    case 'n':
                                                                        JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                                + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                    case 'P':
                                                                    case 'p':
                                                                        JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                                + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                                + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                                + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                    } else {

                                                        if (czasgry == -1 && siec == false) {
                                                            kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, ust.clone(), ruchB, przelotcan, kol, false);

                                                            if (kon) {
                                                                kontrolka = ust.clone();
                                                                kontrolka[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                                                kontrolka[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                                pakc = RuchZagrozenie_kontrola.szach(kontrolka, ruchB);
                                                                zmien = true;
                                                            } else {
                                                                pakc = true;
                                                            }
                                                            if ((!(pakc && kon == false)) && (opcje_pomoc == 0 || opcje_pomoc == 2)) {
                                                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                                        JOptionPane.INFORMATION_MESSAGE);
                                                            } else {
                                                                JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                                        JOptionPane.INFORMATION_MESSAGE);
                                                            }
                                                            if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                                switch (symbol) {
                                                                    case 'K':
                                                                    case 'k':
                                                                        JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                    case 'Q':
                                                                    case 'q':
                                                                        JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                    case 'R':
                                                                    case 'r':
                                                                        JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                    case 'B':
                                                                    case 'b':
                                                                        JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                    case 'N':
                                                                    case 'n':
                                                                        JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                                + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                    case 'P':
                                                                    case 'p':
                                                                        JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                                + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                                + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                                + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                                JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                        break;
                                                                }
                                                            }
                                                        } else {
                                                            Toolkit.getDefaultToolkit().beep();
                                                        }
                                                        kontrolka[lokalS[1] - 1][lokalS[0] - 1] = symbol;
                                                        kontrolka[lokalK[1] - 1][lokalK[0] - 1] = ' ';
                                                        polestart = true;
                                                        wyk = false;
                                                        przelot = false;
                                                        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                                    }
                                                    if (wyk) {
                                                        if ((symbol == 'P' && lokalK[1] == 8) || (symbol == 'p' && lokalK[1] == 1)) {
                                                            promocja = true;
                                                            Object[] opcjeB = {b1, b2, b3, b4};
                                                            Object[] opcjeC = {c1, c2, c3, c4};
                                                            promowane_piony.add((ruchB ? "P" : "p") + stop);
                                                            if (ruchB) {
                                                                pionB = (byte) (pionB - 1);
                                                                if (znak_promocji == ' ') {
                                                                    wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                                            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeB, null);
                                                                    switch (wybor) {
                                                                        case 1:
                                                                            symbol = 'R';
                                                                            ciezkieB = (byte) (ciezkieB + 1);
                                                                            cursor = b2;
                                                                            break;
                                                                        case 2:
                                                                            symbol = 'B';
                                                                            lekkieB = (byte) (lekkieB + 1);
                                                                            cursor = b3;
                                                                            break;
                                                                        case 3:
                                                                            symbol = 'N';
                                                                            lekkieB = (byte) (lekkieB + 1);
                                                                            cursor = b4;
                                                                            break;
                                                                        case 0:
                                                                        default:
                                                                            symbol = 'Q';
                                                                            ciezkieB = (byte) (ciezkieB + 1);
                                                                            cursor = b1;
                                                                            break;
                                                                    }
                                                                } else {
                                                                    symbol = znak_promocji;
                                                                    switch (symbol) {
                                                                        case 'Q':
                                                                        case 'R':
                                                                            ciezkieB = (byte) (ciezkieB + 1);
                                                                            break;
                                                                        case 'B':
                                                                        case 'N':
                                                                            lekkieB = (byte) (lekkieB + 1);
                                                                            break;
                                                                    }
                                                                }
                                                            } else {
                                                                pionC = (byte) (pionC - 1);
                                                                if (znak_promocji == ' ') {
                                                                    wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                                            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeC, null);
                                                                    switch (wybor) {
                                                                        case 1:
                                                                            symbol = 'r';
                                                                            ciezkieC = (byte) (ciezkieC + 1);
                                                                            cursor = c2;
                                                                            break;
                                                                        case 2:
                                                                            symbol = 'b';
                                                                            lekkieC = (byte) (lekkieC + 1);
                                                                            cursor = c3;
                                                                            break;
                                                                        case 3:
                                                                            symbol = 'n';
                                                                            lekkieC = (byte) (lekkieC + 1);
                                                                            cursor = c4;
                                                                            break;
                                                                        case 0:
                                                                        default:
                                                                            symbol = 'q';
                                                                            ciezkieC = (byte) (ciezkieC + 1);
                                                                            cursor = c1;
                                                                            break;
                                                                    }
                                                                } else {
                                                                    symbol = znak_promocji;
                                                                    switch (symbol) {
                                                                        case 'q':
                                                                        case 'r':
                                                                            ciezkieC = (byte) (ciezkieC + 1);
                                                                            break;
                                                                        case 'b':
                                                                        case 'n':
                                                                            lekkieC = (byte) (lekkieC + 1);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            promo = symbol;
                                                        }
                                                        if (znak_promocji == ' ') {
                                                            BUTTON.setIcon(cursor);
                                                        } else {
                                                            switch (znak_promocji) {
                                                                case 'Q':
                                                                    BUTTON.setIcon(b1);
                                                                    break;
                                                                case 'R':
                                                                    BUTTON.setIcon(b2);
                                                                    break;
                                                                case 'B':
                                                                    BUTTON.setIcon(b3);
                                                                    break;
                                                                case 'N':
                                                                    BUTTON.setIcon(b4);
                                                                    break;
                                                                case 'q':
                                                                    BUTTON.setIcon(c1);
                                                                    break;
                                                                case 'r':
                                                                    BUTTON.setIcon(c2);
                                                                    break;
                                                                case 'b':
                                                                    BUTTON.setIcon(c3);
                                                                    break;
                                                                case 'n':
                                                                    BUTTON.setIcon(c4);
                                                                    break;
                                                            }
                                                        }
                                                        ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                        pomoc5 = null;
                                                        char[][] USTAWIENIE1 = new char[8][8];
                                                        polestart = false;
                                                        ruchB = ruchB != true;
                                                        for (int i = 0; i < 8; i++) {
                                                            System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8);
                                                        }
                                                        krolS = RuchZagrozenie_kontrola.szach(ust, ruchB);
                                                        for (int i = 0; i < 8; i++) {
                                                            System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                                        }
                                                        for (int i = 0; i < 8; i++) {
                                                            for (int j = 0; j < 8; j++) {
                                                                odwrotna[i][j] = ust[7 - i][7 - j];
                                                            }
                                                        }

                                                        for (int i = 0; i < 8; i++) {
                                                            System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                                        }
                                                        czysc_rame();
                                                        ustawrame();
                                                        for (int i = 7; i > -1; i--) {
                                                            for (int j = 0; j < 8; j++) {
                                                                System.out.print("[" + ust[i][j] + "]");
                                                            }
                                                            System.out.println();
                                                        }
                                                        System.out.println("xxxxxxxx");
                                                        if (krolS) {
                                                            if (siec == false && symulacja == false) {
                                                                JOptionPane.showMessageDialog(rootPane, "SZACH! KROL JEST ATAKOWANY", "Ostrzeżenie",
                                                                        JOptionPane.WARNING_MESSAGE);
                                                            }
                                                            Toolkit.getDefaultToolkit().beep();
                                                            kontrolamat = ust;
                                                            for (int i = 0; i < 8; i++) {
                                                                for (int j = 0; j < 8; j++) {
                                                                    USTAWIENIE1[i][j] = ust[i][j];
                                                                    if ((ruchB && kontrolamat[i][j] == 'K') || (ruchB == false && kontrolamat[i][j] == 'k')) {
                                                                        poza_krolewska[0] = i;
                                                                        poza_krolewska[1] = j;
                                                                    }
                                                                }
                                                            }
                                                            klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);
                                                            System.out.println("klopoty X:" + klopoty[0] + "Y:" + klopoty[1] + "zagrożenie");
                                                            System.out.println(ust[klopoty[0]][klopoty[1]]);
                                                            hodu = SzachMatPatKontrola.uciekaj(kontrolamat, ruchB, poza_krolewska);
                                                            if (hodu == false) {
                                                                char[][] backupzapas = new char[8][8];
                                                                for (int i = 0; i < 8; i++) {
                                                                    System.arraycopy(USTAWIENIE1[i], 0, backupzapas[i], 0, 8);
                                                                }
                                                                hitme = SzachMatPatKontrola.znajdzodsiecz(backupzapas.clone(), ruchB, Wspomagacz.znajdzklopot(kontrolamat, ruchB), kol, przelotcan);
                                                                if (hitme == false) {
                                                                    for (int i = 0; i < 8; i++) {
                                                                        System.arraycopy(USTAWIENIE1[i], 0, backupzapas[i], 0, 8);
                                                                    }
                                                                    protectme = SzachMatPatKontrola.zastaw(backupzapas.clone(), ruchB, Wspomagacz.znajdzklopot(kontrolamat, ruchB), poza_krolewska, przelotcan);
                                                                    if (tryb == 8) {
                                                                        protectme = (ruchB ? (rezerwyBG + rezerwyBH + ((Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1] == poza_krolewska[1] && (poza_krolewska[1] == 7 || poza_krolewska[1] == 0)) ? rezerwyBP : 0) + rezerwyBS + rezerwyBW > 0)
                                                                                : (rezerwyCG + rezerwyCH + ((Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1] == poza_krolewska[1] && (poza_krolewska[1] == 7 || poza_krolewska[1] == 0)) ? rezerwyBP : 0) + rezerwyCS + rezerwyCW > 0))
                                                                                && (Math.abs(poza_krolewska[0] - (Wspomagacz.znajdzklopot(kontrolamat, ruchB)[0])) > 1 || Math.abs(poza_krolewska[1] - (Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1])) > 1) && ust[klopoty[0]][klopoty[1]] != 'n' && ust[klopoty[0]][klopoty[1]] != 'N';
                                                                    }
                                                                }
                                                            }
                                                            // System.out.println("ust2");
                                                            for (int i = 0; i < 8; i++) {
                                                                System.arraycopy(USTAWIENIE1[i], 0, ust[i], 0, 8);
                                                                //  System.out.println();
                                                            }

                                                        } else {
                                                            krolS = false;
                                                            move = false;

                                                            for (int i = 0; i < 8; i++) {
                                                                for (int j = 0; j < 8; j++) {
                                                                    if (ust[i][j] != ' ') {
                                                                        pole_baza[0] = j;
                                                                        pole_baza[1] = i;
                                                                        if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                                                            if ((ruchB && ust[i][j] == 'K') || (ruchB == false && ust[i][j] == 'k')) {
                                                                                pole_baza[0] = i;
                                                                                pole_baza[1] = j;
                                                                                hodu = SzachMatPatKontrola.uciekaj(USTAWIENIE1, ruchB, pole_baza);
                                                                            }
                                                                        } else {
                                                                            move = SzachMatPatKontrola.znajdz_ruch(USTAWIENIE1, ruchB, USTAWIENIE1[i][j], pole_baza, przelotcan);
                                                                            if (move) {
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                if (move) {
                                                                    break;
                                                                }
                                                            }
                                                            if (tryb == 8) {
                                                                move = ((ruchB && rezerwyBG + rezerwyBH + rezerwyBP + rezerwyBS + rezerwyBW == 0) || (!ruchB && rezerwyCG + rezerwyCH + rezerwyCP + rezerwyCS + rezerwyCW == 0));
                                                            }
                                                        }
                                                        bicie = prze;
                                                        prze = false;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        czysc_rame();
                                        ustawrame();
                                        zmien = false;
                                        promo = ' ';
                                        koniecanimacji = true;
                                        BUTTON.setIcon(cursor);
                                        polestart = false;
                                        wyk = false;
                                        ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                    }
                                } else {
                                    pomoce = BUTTON.getName();
                                    pomoc2 = pomoce.charAt(0);
                                    pomoc3 = pomoce.charAt(1);
                                    stop = pomoce;
                                    if (odwrot == false) {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 1;
                                                break;
                                            case 'B':
                                                pomocx = 2;
                                                break;
                                            case 'C':
                                                pomocx = 3;
                                                break;
                                            case 'D':
                                                pomocx = 4;
                                                break;
                                            case 'E':
                                                pomocx = 5;
                                                break;
                                            case 'F':
                                                pomocx = 6;
                                                break;
                                            case 'G':
                                                pomocx = 7;
                                                break;
                                            case 'H':
                                                pomocx = 8;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 1;
                                                break;
                                            case '2':
                                                pomocy = 2;
                                                break;
                                            case '3':
                                                pomocy = 3;
                                                break;
                                            case '4':
                                                pomocy = 4;
                                                break;
                                            case '5':
                                                pomocy = 5;
                                                break;
                                            case '6':
                                                pomocy = 6;
                                                break;
                                            case '7':
                                                pomocy = 7;
                                                break;
                                            case '8':
                                                pomocy = 8;
                                                break;
                                        }
                                    } else {
                                        switch (pomoc2) {
                                            case 'A':
                                                pomocx = 8;
                                                break;
                                            case 'B':
                                                pomocx = 7;
                                                break;
                                            case 'C':
                                                pomocx = 6;
                                                break;
                                            case 'D':
                                                pomocx = 5;
                                                break;
                                            case 'E':
                                                pomocx = 4;
                                                break;
                                            case 'F':
                                                pomocx = 3;
                                                break;
                                            case 'G':
                                                pomocx = 2;
                                                break;
                                            case 'H':
                                                pomocx = 1;
                                                break;
                                        }
                                        switch (pomoc3) {
                                            case '1':
                                                pomocy = 8;
                                                break;
                                            case '2':
                                                pomocy = 7;
                                                break;
                                            case '3':
                                                pomocy = 6;
                                                break;
                                            case '4':
                                                pomocy = 5;
                                                break;
                                            case '5':
                                                pomocy = 4;
                                                break;
                                            case '6':
                                                pomocy = 3;
                                                break;
                                            case '7':
                                                pomocy = 2;
                                                break;
                                            case '8':
                                                pomocy = 1;
                                                break;
                                        }
                                    }
                                    lokalK[0] = pomocx;
                                    lokalK[1] = pomocy;
                                    schodzi = ust[lokalK[1] - 1][lokalK[0] - 1];
                                    if (schodzi == 'K' || schodzi == 'Q' || schodzi == 'R' || schodzi == 'B' || schodzi == 'N' || schodzi == 'P') {
                                        pomoci2 = 'W';
                                    } else {
                                        pomoci2 = 'B';
                                    }
                                    if (pomoci1 != pomoci2) {
                                        if (lokalK[0] == lokalS[0] && lokalS[1] == lokalK[1]) {
                                            koniecanimacji = true;
                                            zmien = false;
                                            promo = ' ';
                                            BUTTON.setIcon(cursor);
                                            polestart = false;
                                            wyk = false;
                                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                            czysc_rame();
                                            ustawrame();
                                        } else {
                                            char[][] tymczas = new char[8][8];
                                            for (int i = 0; i < 8; i++) {
                                                System.arraycopy(ust[i], 0, tymczas[i], 0, 8);
                                            }
                                            kon = RuchZagrozenie_kontrola.ruch(lokalS, lokalK, symbol, tymczas, ruchB, przelotcan, kol, false);
                                            tymczas[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                            tymczas[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                            pakc = RuchZagrozenie_kontrola.szach(tymczas, ruchB);
                                            if (kon && !pakc) {
                                                krolS = false;
                                                bicie = true;
                                                switch (schodzi) {
                                                    case 'P':
                                                        pionB = (byte) (pionB - 1);
                                                        break;
                                                    case 'p':
                                                        pionC = (byte) (pionC - 1);
                                                        break;
                                                    case 'N':
                                                    case 'B':
                                                        lekkieB = (byte) (lekkieB - 1);
                                                        break;
                                                    case 'n':
                                                    case 'b':
                                                        lekkieC = (byte) (lekkieC - 1);
                                                        break;
                                                    case 'R':
                                                    case 'Q':
                                                        ciezkieB = (byte) (ciezkieB - 1);
                                                        break;
                                                    case 'r':
                                                    case 'q':
                                                        ciezkieC = (byte) (ciezkieC - 1);
                                                        break;
                                                }
                                                zmien = true;
                                                if ((symbol == 'P' && lokalK[1] == 8) || (symbol == 'p' && lokalK[1] == 1)) {
                                                    promocja = true;
                                                    Object[] opcjeB = {b1, b2, b3, b4};
                                                    Object[] opcjeC = {c1, c2, c3, c4};
                                                    if (ruchB) {
                                                        pionB = (byte) (pionB - 1);
                                                        if (znak_promocji == ' ') {
                                                            wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeB, null);
                                                            switch (wybor) {
                                                                case 1:
                                                                    symbol = 'R';
                                                                    ciezkieB = (byte) (ciezkieB + 1);
                                                                    cursor = b2;
                                                                    break;
                                                                case 2:
                                                                    symbol = 'B';
                                                                    lekkieB = (byte) (lekkieB + 1);
                                                                    cursor = b3;
                                                                    break;
                                                                case 3:
                                                                    symbol = 'N';
                                                                    lekkieB = (byte) (lekkieB + 1);
                                                                    cursor = b4;
                                                                    break;
                                                                case 0:
                                                                default:
                                                                    symbol = 'Q';
                                                                    ciezkieB = (byte) (ciezkieB + 1);
                                                                    cursor = b1;
                                                                    break;
                                                            }
                                                        } else {
                                                            symbol = znak_promocji;
                                                            switch (symbol) {
                                                                case 'Q':
                                                                case 'R':
                                                                    ciezkieB = (byte) (ciezkieB + 1);
                                                                    break;
                                                                case 'B':
                                                                case 'N':
                                                                    lekkieB = (byte) (lekkieB + 1);
                                                                    break;
                                                            }
                                                        }
                                                    } else {
                                                        pionC = (byte) (pionC - 1);
                                                        if (znak_promocji == ' ') {
                                                            wybor = JOptionPane.showOptionDialog(null, "PROMOCJA WYBIERZ FIGURĘ", "PROMOCJA",
                                                                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcjeC, null);
                                                            switch (wybor) {
                                                                case 1:
                                                                    symbol = 'r';
                                                                    ciezkieC = (byte) (ciezkieC + 1);
                                                                    cursor = c2;
                                                                    break;
                                                                case 2:
                                                                    symbol = 'b';
                                                                    lekkieC = (byte) (lekkieC + 1);
                                                                    cursor = c3;
                                                                    break;
                                                                case 3:
                                                                    symbol = 'n';
                                                                    lekkieC = (byte) (lekkieC + 1);
                                                                    cursor = c4;
                                                                    break;
                                                                default:
                                                                    symbol = 'q';
                                                                    ciezkieC = (byte) (ciezkieC + 1);
                                                                    cursor = c1;
                                                                    break;
                                                            }
                                                        } else {
                                                            symbol = znak_promocji;
                                                            switch (symbol) {
                                                                case 'q':
                                                                case 'r':
                                                                    ciezkieC = (byte) (ciezkieC + 1);
                                                                    break;
                                                                case 'b':
                                                                case 'n':
                                                                    lekkieC = (byte) (lekkieC + 1);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    promo = symbol;
                                                }
                                                if (znak_promocji == ' ') {
                                                    BUTTON.setIcon(cursor);
                                                } else {
                                                    switch (znak_promocji) {
                                                        case 'Q':
                                                            BUTTON.setIcon(b1);
                                                            break;
                                                        case 'R':
                                                            BUTTON.setIcon(b2);
                                                            break;
                                                        case 'B':
                                                            BUTTON.setIcon(b3);
                                                            break;
                                                        case 'N':
                                                            BUTTON.setIcon(b4);
                                                            break;
                                                        case 'q':
                                                            BUTTON.setIcon(c1);
                                                            break;
                                                        case 'r':
                                                            BUTTON.setIcon(c2);
                                                            break;
                                                        case 'b':
                                                            BUTTON.setIcon(c3);
                                                            break;
                                                        case 'n':
                                                            BUTTON.setIcon(c4);
                                                            break;
                                                    }
                                                }
                                                ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                                pomoc5 = null;
                                                polestart = false;
                                                wyk = true;
                                            } else {
                                                for (int i = 0; i < 8; i++) {
                                                    for (int j = 0; j < 8; j++) {
                                                        ust[i][j] = odwrotna[7 - i][7 - j];
                                                    }
                                                }
                                                wyk = false;
                                                polestart = true;
                                                if (czasgry == -1 && siec == false) {
                                                    if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                        if (pakc) {
                                                            JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                                    JOptionPane.INFORMATION_MESSAGE);
                                                        } else {
                                                            JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                                    JOptionPane.INFORMATION_MESSAGE);
                                                        }

                                                        switch (symbol) {
                                                            case 'K':
                                                            case 'k':
                                                                JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'Q':
                                                            case 'q':
                                                                JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'R':
                                                            case 'r':
                                                                JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'B':
                                                            case 'b':
                                                                JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'N':
                                                            case 'n':
                                                                JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                        + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                            case 'P':
                                                            case 'p':
                                                                JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                        + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                        + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                        + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                        JOptionPane.INFORMATION_MESSAGE, cursor);
                                                                break;
                                                        }
                                                    }
                                                } else {
                                                    Toolkit.getDefaultToolkit().beep();
                                                }
                                                //styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                            }
                                            if (wyk) {
                                                wyk = false;
                                                char[][] USTAWIENIE1 = new char[8][8];
                                                ruchB = ruchB != true;
                                                if ((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) {
                                                    krolS = RuchZagrozenie_kontrola.szach(ust, ruchB);
                                                    for (int i = 0; i < 8; i++) {
                                                        System.arraycopy(ust[i], 0, USTAWIENIE1[i], 0, 8);
                                                    }
                                                    for (int i = 0; i < 8; i++) {
                                                        for (int j = 0; j < 8; j++) {
                                                            odwrotna[i][j] = ust[7 - i][7 - j];
                                                        }
                                                    }

                                                    /* for (int i = 0; i < 8; i++) {
                                                        for (int j = 0; j < 8; j++) {
                                                            System.out.print("{" + ust[i][j] + "}");
                                                        }
                                                        System.out.println();
                                                    }*/
                                                    for (int i = 0; i < 8; i++) {
                                                        System.arraycopy(ust[i], 0, kontrolka[i], 0, 8);
                                                    }
                                                    czysc_rame();
                                                    ustawrame();
                                                    if (krolS) {
                                                        char[][] backup;
                                                        if (siec == false && symulacja == false) {
                                                            JOptionPane.showMessageDialog(rootPane, "SZACH! KROL JEST ATAKOWANY", "Ostrzeżenie",
                                                                    JOptionPane.WARNING_MESSAGE);
                                                        }
                                                        Toolkit.getDefaultToolkit().beep();
                                                        kontrolamat = ust;
                                                        for (int i = 0; i < 8; i++) {
                                                            for (int j = 0; j < 8; j++) {
                                                                USTAWIENIE1[i][j] = ust[i][j];
                                                                if ((ruchB && kontrolamat[i][j] == 'K') || (ruchB == false && kontrolamat[i][j] == 'k')) {
                                                                    poza_krolewska[0] = i;
                                                                    poza_krolewska[1] = j;
                                                                }
                                                            }
                                                        }
                                                        klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);
                                                        System.out.println("klopoty X:" + klopoty[0] + "Y:" + klopoty[1]);
                                                        System.out.println(ust[klopoty[0]][klopoty[1]]);
                                                        hodu = SzachMatPatKontrola.uciekaj(kontrolamat, ruchB, poza_krolewska);
                                                        if (hodu == false) {
                                                            backup = ust;
                                                            klopoty = Wspomagacz.znajdzklopot(kontrolamat, ruchB);
                                                            hitme = SzachMatPatKontrola.znajdzodsiecz(backup.clone(), ruchB, Wspomagacz.znajdzklopot(kontrolamat, ruchB), kol, przelotcan);
                                                            if (hitme == false) {
                                                                backup = ust;
                                                                protectme = SzachMatPatKontrola.zastaw(backup.clone(), ruchB, Wspomagacz.znajdzklopot(kontrolamat, ruchB), poza_krolewska, przelotcan);
                                                                if (tryb == 8) {
                                                                    protectme = (ruchB ? (rezerwyBG + rezerwyBH + ((Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1] == poza_krolewska[1] && (poza_krolewska[1] == 7 || poza_krolewska[1] == 0)) ? rezerwyBP : 0) + rezerwyBS + rezerwyBW > 0)
                                                                            : (rezerwyCG + rezerwyCH + ((Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1] == poza_krolewska[1] && (poza_krolewska[1] == 7 || poza_krolewska[1] == 0)) ? rezerwyBP : 0) + rezerwyCS + rezerwyCW > 0))
                                                                            && (Math.abs(poza_krolewska[0] - (Wspomagacz.znajdzklopot(kontrolamat, ruchB)[0])) > 1 || Math.abs(poza_krolewska[1] - (Wspomagacz.znajdzklopot(kontrolamat, ruchB)[1])) > 1) && ust[klopoty[0]][klopoty[1]] != 'n' && ust[klopoty[0]][klopoty[1]] != 'N';
                                                                }
                                                            }
                                                        }
                                                        // System.out.println("ust3");
                                                        for (int i = 0; i < 8; i++) {
                                                            System.arraycopy(USTAWIENIE1[i], 0, ust[i], 0, 8);
                                                            //    System.out.println();
                                                        }
                                                        //   System.out.println("U" + hodu + " Z" + protectme + " B" + hitme);

                                                    } else {
                                                        krolS = false;
                                                        move = false;
                                                        char[][] temp = new char[8][8];
                                                        // System.out.println("wy");
                                                        for (int i = 0; i < 8; i++) {
                                                            System.arraycopy(ust[i], 0, temp[i], 0, 8);
                                                        }
                                                        for (int i = 0; i < 8; i++) {
                                                            for (int j = 0; j < 8; j++) {
                                                                if (ust[i][j] != ' ') {
                                                                    pole_baza[0] = j;
                                                                    pole_baza[1] = i;
                                                                    if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                                                        if ((ruchB && ust[i][j] == 'K') || (ruchB == false && ust[i][j] == 'k')) {
                                                                            pole_baza[0] = i;
                                                                            pole_baza[1] = j;
                                                                            hodu = SzachMatPatKontrola.uciekaj(temp, ruchB, pole_baza);
                                                                        }
                                                                    } else {
                                                                        move = SzachMatPatKontrola.znajdz_ruch(temp, ruchB, temp[i][j], pole_baza, przelotcan);
                                                                        if (move) {
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            if (move) {
                                                                break;
                                                            }
                                                        }
                                                        if (tryb == 8) {
                                                            move = ((ruchB && rezerwyBG + rezerwyBH + rezerwyBP + rezerwyBS + rezerwyBW == 0) || (!ruchB && rezerwyCG + rezerwyCH + rezerwyCP + rezerwyCS + rezerwyCW == 0));
                                                        }
                                                    }
                                                } else {
                                                    koniecanimacji = true;
                                                    BUTTON.setIcon(cursor);
                                                }
                                            }
                                        }
                                    } else {
                                        if (lokalS[0] == lokalK[0] && lokalS[1] == lokalK[1]) {
                                            czysc_rame();
                                            ustawrame();
                                            koniecanimacji = true;
                                            zmien = false;
                                            promo = ' ';
                                            BUTTON.setIcon(cursor);
                                            polestart = false;
                                            wyk = false;
                                            ust[lokalK[1] - 1][lokalK[0] - 1] = symbol;
                                        } else {
                                            polestart = true;
                                            if (czasgry == -1 && siec == false) {
                                                if (opcje_pomoc == 0 || opcje_pomoc == 2) {
                                                    JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH NIEZGODNY Z ZASADAMI", "Ostrzeżenie",
                                                            JOptionPane.INFORMATION_MESSAGE);

                                                    // JOptionPane.showMessageDialog(rootPane, "BŁĄD! RUCH WYSTAWIA KRÓLA NA ZAGROŻENIE, \n LUB POZOSTAWIA KRÓLA W ZAGROŻENIU", "Ostrzeżenie",
                                                    //       JOptionPane.INFORMATION_MESSAGE);
                                                    switch (symbol) {
                                                        case 'K':
                                                        case 'k':
                                                            JOptionPane.showMessageDialog(rootPane, "Król może na dowolne nie zagrożone biciem sąsiadujące z każdej strony pole", "szachowe prawidła król",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'Q':
                                                        case 'q':
                                                            JOptionPane.showMessageDialog(rootPane, "Hetman może po każdej przekątnej i każdej prostej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła hetman",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'R':
                                                        case 'r':
                                                            JOptionPane.showMessageDialog(rootPane, "Wieża może poruszać się tylko po prostej o ile chce chyba że coś stoi na drodze", "szachowe prawidła wieża",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'B':
                                                        case 'b':
                                                            JOptionPane.showMessageDialog(rootPane, "Goniec może poruszać się tylko po przekątnej o ile chce, chyba że coś stoi na drodze", "szachowe prawidła goniec",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'N':
                                                        case 'n':
                                                            JOptionPane.showMessageDialog(rootPane, "Skoczek może jako jedyny przeskakiwać figury. Tylko docelowe pole nie może być zajęte przez sprzymierzoną figurę.\n"
                                                                    + " Konie skaczą o 2 pola po prostej i 1 w bok .Przypomina to literę ’L’", "szachowe prawidła skoczek",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                        case 'P':
                                                        case 'p':
                                                            JOptionPane.showMessageDialog(rootPane, "Piony mogą się poruszać się tylko po prostej na przód o 1 pole i nigdy nie idą inaczej. Bije tylko 1 pole po przekątnej do przodu. \n"
                                                                    + "Jeśli wciąż stoi na swojej linii (białe 2 linia czarne 7 linia) to ma prawo ruszyć się o 2 pola na przód.)", "szachowe prawidła: pionek",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            JOptionPane.showMessageDialog(rootPane, "Jeśli pion przeciwny ruszył o 2 pola i stanie obok twego piona, twój pion może go bić w przelocie.\n"
                                                                    + " Czyli rusza się za piona co ruszył o 2 pola na przód i bije go.\n"
                                                                    + " Można go wykonać tylko bezpośrednio po tym ruchu i tylko pion piona tak może. Jeśli nie bijesz w przelocie, nie będziesz mógł go bić w przelocie później", "szachowe prawidła, bicie w przelocie",
                                                                    JOptionPane.INFORMATION_MESSAGE, cursor);
                                                            break;
                                                    }
                                                }
                                            } else {
                                                Toolkit.getDefaultToolkit().beep();
                                            }
                                        }
                                    }
                                }
                                if (polestart == false) {
                                    if (((lokalS[0] != lokalK[0]) || (lokalK[1] != lokalS[1])) && kon) {
                                        if ((SI_ON == false && siec == false) && obrotowy.getText().equals("Obrót WŁ")) {
                                            odwrot = !odwrot;
                                            System.out.println("zmiana");
                                        }
                                        System.out.println("odwrot " + odwrot);
                                        if (tryb == 2) {
                                            if (odwrot == false) {
                                                if (ruchB == false) {
                                                    czasB.s = sekbaza;
                                                    czasB.m = seksyg;
                                                    czasB.warn = false;
                                                    zegarbiale.setBackground(Color.BLACK);
                                                    zegarbiale.setForeground(Color.BLACK);
                                                    zegarbiale.setText(String.valueOf(czasB.s));
                                                } else {
                                                    czasC.s = sekbaza;
                                                    czasC.m = seksyg;
                                                    czasC.warn = false;
                                                    zegarczarne.setBackground(Color.BLACK);
                                                    zegarczarne.setForeground(Color.BLACK);
                                                    zegarczarne.setText(String.valueOf(czasC.s));
                                                }
                                            } else {
                                                if (ruchB == false) {
                                                    czasC.s = sekbaza;
                                                    czasC.m = seksyg;
                                                    czasC.warn = false;
                                                    zegarczarne.setBackground(Color.BLACK);
                                                    zegarczarne.setForeground(Color.BLACK);
                                                    zegarczarne.setText(String.valueOf(czasC.s));
                                                } else {
                                                    czasB.s = sekbaza;
                                                    czasB.m = seksyg;
                                                    czasB.warn = false;
                                                    zegarbiale.setBackground(Color.BLACK);
                                                    zegarbiale.setForeground(Color.BLACK);
                                                    zegarbiale.setText(String.valueOf(czasB.s));
                                                }
                                            }
                                        }
                                        if (tryb == 1) {
                                            switch (czasgry) {
                                                case 2:
                                                case 4:
                                                case 6:
                                                case 8:
                                                case 10:
                                                    if (ruchB == false) {
                                                        czasB.s = czasB.s + bonuss;
                                                        if (czasB.s >= 60) {
                                                            czasB.s = czasB.s - 60;
                                                            czasB.m = czasB.m + 1;
                                                        }
                                                        if (czasB.s < 10) {
                                                            zegarbiale.setText(czasB.m + ":0" + czasB.s);
                                                        } else {
                                                            zegarbiale.setText(czasB.m + ":" + czasB.s);
                                                        }
                                                    } else {
                                                        czasC.s = czasC.s + bonuss;
                                                        if (czasC.s >= 60) {
                                                            czasC.s = czasC.s - 60;
                                                            czasC.m = czasC.m + 1;
                                                        }

                                                        if (czasB.s < 10) {
                                                            zegarczarne.setText(czasB.m + ":0" + czasB.s);
                                                        } else {
                                                            zegarczarne.setText(czasB.m + ":" + czasB.s);
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        //  System.out.println(zawrot);
                                        if ((obrotowy.getText().equals("Obrót WŁ") && odwrot == false)
                                                || (odwrot == true && (SI_ON == true || siec == true))) {
                                            System.out.println("zamiana");
                                            switch (start.charAt(0)) {
                                                case 'A':
                                                    start = start.replace('A', 'H');
                                                    break;
                                                case 'B':
                                                    start = start.replace('B', 'G');
                                                    break;
                                                case 'C':
                                                    start = start.replace('C', 'F');
                                                    break;
                                                case 'D':
                                                    start = start.replace('D', 'E');
                                                    break;
                                                case 'E':
                                                    start = start.replace('E', 'D');
                                                    break;
                                                case 'F':
                                                    start = start.replace('F', 'C');
                                                    break;
                                                case 'G':
                                                    start = start.replace('G', 'B');
                                                    break;
                                                case 'H':
                                                    start = start.replace('H', 'A');
                                                    break;
                                            }
                                            switch (start.charAt(1)) {
                                                case '1':
                                                    start = start.replace('1', '8');
                                                    break;
                                                case '2':
                                                    start = start.replace('2', '7');
                                                    break;
                                                case '3':
                                                    start = start.replace('3', '6');
                                                    break;
                                                case '4':
                                                    start = start.replace('4', '5');
                                                    break;
                                                case '5':
                                                    start = start.replace('5', '4');
                                                    break;
                                                case '6':
                                                    start = start.replace('6', '3');
                                                    break;
                                                case '7':
                                                    start = start.replace('7', '2');
                                                    break;
                                                case '8':
                                                    start = start.replace('8', '1');
                                                    break;
                                            }
                                            switch (stop.charAt(0)) {
                                                case 'A':
                                                    stop = stop.replace('A', 'H');
                                                    break;
                                                case 'B':
                                                    stop = stop.replace('B', 'G');
                                                    break;
                                                case 'C':
                                                    stop = stop.replace('C', 'F');
                                                    break;
                                                case 'D':
                                                    stop = stop.replace('D', 'E');
                                                    break;
                                                case 'E':
                                                    stop = stop.replace('E', 'D');
                                                    break;
                                                case 'F':
                                                    stop = stop.replace('F', 'C');
                                                    break;
                                                case 'G':
                                                    stop = stop.replace('G', 'B');
                                                    break;
                                                case 'H':
                                                    stop = stop.replace('H', 'A');
                                                    break;
                                            }
                                            switch (stop.charAt(1)) {
                                                case '1':
                                                    stop = stop.replace('1', '8');
                                                    break;
                                                case '2':
                                                    stop = stop.replace('2', '7');
                                                    break;
                                                case '3':
                                                    stop = stop.replace('3', '6');
                                                    break;
                                                case '4':
                                                    stop = stop.replace('4', '5');
                                                    break;
                                                case '5':
                                                    stop = stop.replace('5', '4');
                                                    break;
                                                case '6':
                                                    stop = stop.replace('6', '3');
                                                    break;
                                                case '7':
                                                    stop = stop.replace('7', '2');
                                                    break;
                                                case '8':
                                                    stop = stop.replace('8', '1');
                                                    break;
                                            }
                                        }
                                        if (tryb == 8) {
                                            boolean kontrola = false;
                                            for (String s : promowane_piony) {
                                                if (s.substring(1).equals(stop)) {
                                                    if (ruchB) {
                                                        rezerwyCP++;
                                                    } else {
                                                        rezerwyBP++;
                                                    }
                                                    kontrola = true;
                                                    break;
                                                }
                                            }
                                            if (!kontrola) {
                                                switch (schodzi) {
                                                    case 'P':
                                                        rezerwyCP++;
                                                        break;
                                                    case 'p':
                                                        rezerwyBP++;
                                                        break;
                                                    case 'N':
                                                        rezerwyCS++;
                                                        break;
                                                    case 'n':
                                                        rezerwyBS++;
                                                        break;
                                                    case 'B':
                                                        rezerwyCG++;
                                                        break;
                                                    case 'b':
                                                        rezerwyBG++;
                                                        break;
                                                    case 'R':
                                                        rezerwyCW++;
                                                        break;
                                                    case 'r':
                                                        rezerwyBW++;
                                                        break;
                                                    case 'Q':
                                                        rezerwyCH++;
                                                        break;
                                                    case 'q':
                                                        rezerwyBH++;
                                                        break;
                                                }
                                            }
                                            hetmanRW.setText(String.valueOf(rezerwyBH));
                                            hetmanRB.setText(String.valueOf(rezerwyCH));
                                            wiezaRW.setText(String.valueOf(rezerwyBW));
                                            wiezaRB.setText(String.valueOf(rezerwyCW));
                                            goniecRW.setText(String.valueOf(rezerwyBG));
                                            goniecRB.setText(String.valueOf(rezerwyCG));
                                            skoczekRW.setText(String.valueOf(rezerwyBS));
                                            skoczekRB.setText(String.valueOf(rezerwyCS));
                                            pionRW.setText(String.valueOf(rezerwyBP));
                                            pionRB.setText(String.valueOf(rezerwyCP));
                                            hetmanRW.setEnabled((rezerwyBH > 0));
                                            hetmanRB.setEnabled((rezerwyCH > 0));
                                            wiezaRW.setEnabled((rezerwyBW > 0));
                                            wiezaRB.setEnabled((rezerwyCW > 0));
                                            goniecRW.setEnabled((rezerwyBG > 0));
                                            goniecRB.setEnabled((rezerwyCG > 0));
                                            skoczekRW.setEnabled((rezerwyBS > 0));
                                            skoczekRB.setEnabled((rezerwyCS > 0));
                                            pionRW.setEnabled((rezerwyBP > 0));
                                            pionRB.setEnabled((rezerwyCP > 0));
                                        }
                                        ostatni_start = start;
                                        ostatni_stop = stop;
                                        String ruchS = "";
                                        ust[lokalS[1] - 1][lokalS[0] - 1] = ' ';
                                        if (((symbol == 'K' || (symbol == 'k')) && (lokalS[0] - lokalK[0] == -2 || lokalS[0] - lokalK[0] == 2))) {
                                            if (ruchB == false) {
                                                if (lokalS[0] - lokalK[0] == -2) {
                                                    jTextArea3.append(movenr + ".  O-O");
                                                    ruch = "O-O";
                                                    ruchS = ruch;
                                                    if (krolS) {
                                                        if (hodu == false && hitme == false && protectme == false) {
                                                            jTextArea3.append("#     ");
                                                            ruch += ("#");
                                                            ruchS += ("#");
                                                        } else {
                                                            jTextArea3.append("+     ");
                                                            ruch += ("+");
                                                            ruchS += ("+");
                                                        }
                                                    } else {
                                                        jTextArea3.append("      ");
                                                    }
                                                } else {
                                                    if (lokalS[0] - lokalK[0] == 2) {
                                                        jTextArea3.append(movenr + ".  O-O-O");
                                                        ruch = "O-O-O";
                                                        ruchS = ruch;
                                                        if (krolS) {
                                                            if (hodu == false && hitme == false && protectme == false) {
                                                                jTextArea3.append("#   ");
                                                                ruch += ("#");
                                                                ruchS += ("#");
                                                            } else {
                                                                jTextArea3.append("+   ");
                                                                ruch += ("+");
                                                                ruchS += ("+");
                                                            }
                                                            ostatni_start = "E1";
                                                            ostatni_stop = "C1";
                                                        } else {
                                                            jTextArea3.append("    ");
                                                        }
                                                    }
                                                }
                                            } else {
                                                if (lokalS[0] - lokalK[0] == -2) {
                                                    jTextArea3.append("     O-O");
                                                    ruch = "O-O";
                                                    ruchS = ruch;
                                                    if (krolS) {
                                                        if (hodu == false && hitme == false && protectme == false) {
                                                            jTextArea3.append("#");
                                                            ruch += ("#");
                                                            ruch = ruchS.concat("#");
                                                        } else {
                                                            jTextArea3.append("+");
                                                            ruch += ("+");
                                                            ruchS = ruchS.concat("+");
                                                        }
                                                        ruchS = ruch;
                                                        ostatni_start = "E8";
                                                        ostatni_stop = "G8";
                                                    }
                                                } else {
                                                    if (lokalS[0] - lokalK[0] == 2) {
                                                        jTextArea3.append("     O-O-O");
                                                        ruch = "O-O-O";
                                                        ruchS = ruch;
                                                        if (krolS) {
                                                            if (hodu == false && hitme == false && protectme == false) {
                                                                jTextArea3.append("#");
                                                                ruch += ("#");
                                                                ruchS += ("#");
                                                            } else {
                                                                jTextArea3.append("+");
                                                                ruch += ("+");
                                                                ruchS += ("+");
                                                            }
                                                            ruchS = ruch;
                                                            ostatni_start = "E8";
                                                            ostatni_stop = "C8";
                                                        }
                                                    }
                                                }
                                                movenr = movenr + 1;
                                            }

                                        } else {
                                            char promoSymbol = ' ';
                                            switch (promo) {
                                                case 'Q':
                                                    promoSymbol = "\u2655".charAt(0);
                                                    break;
                                                case 'R':
                                                    promoSymbol = "\u2656".charAt(0);
                                                    break;
                                                case 'B':
                                                    promoSymbol = "\u2657".charAt(0);
                                                    break;
                                                case 'N':
                                                    promoSymbol = "\u2658".charAt(0);
                                                    break;
                                                case 'q':
                                                    promoSymbol = "\u265B".charAt(0);
                                                    break;
                                                case 'r':
                                                    promoSymbol = "\u265C".charAt(0);
                                                    break;
                                                case 'b':
                                                    promoSymbol = "\u265D".charAt(0);
                                                    break;
                                                case 'n':
                                                    promoSymbol = "\u265E".charAt(0);
                                                    break;
                                            }
                                            char figurka = ' ';
                                            switch (symbol) {
                                                case 'K':
                                                    figurka = "\u2654".charAt(0);
                                                    break;
                                                case 'Q':
                                                    figurka = "\u2655".charAt(0);
                                                    break;
                                                case 'R':
                                                    figurka = "\u2656".charAt(0);
                                                    break;
                                                case 'B':
                                                    figurka = "\u2657".charAt(0);
                                                    break;
                                                case 'N':
                                                    figurka = "\u2658".charAt(0);
                                                    break;
                                                case 'P':
                                                    figurka = "\u2659".charAt(0);
                                                    break;
                                                case 'k':
                                                    figurka = "\u265A".charAt(0);
                                                    break;
                                                case 'q':
                                                    figurka = "\u265B".charAt(0);
                                                    break;
                                                case 'r':
                                                    figurka = "\u265C".charAt(0);
                                                    break;
                                                case 'b':
                                                    figurka = "\u265D".charAt(0);
                                                    break;
                                                case 'n':
                                                    figurka = "\u265E".charAt(0);
                                                    break;
                                                case 'p':
                                                    figurka = "\u265F".charAt(0);
                                                    break;
                                            }
                                            if (prze == false) {
                                                if (ruchB == false) {
                                                    if ((stop.charAt(1) == '8') && (promo != ' ') && (promocja)) {
                                                        if (bicie == false) {
                                                            jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ". P" + start + "-" + stop + "=" + promo) : (movenr + ".  \u2659" + start + "-" + stop + "=" + promoSymbol));
                                                            ruch = "P" + start + "-" + stop + "=" + promo;
                                                            ruchS = "\u2659" + start + "-" + stop + "=" + promoSymbol;
                                                        } else {
                                                            jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ". P" + start + "x" + stop + "=" + promo) : (movenr + ".  \u2659" + start + "x" + stop + "=" + promoSymbol));
                                                            ruch = "P" + start + "x" + stop + "=" + promo;
                                                            ruchS = "\u2659" + start + "x" + stop + "=" + promoSymbol;
                                                        }
                                                    } else {
                                                        if (bicie == false) {
                                                            jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ".  " + symbol + start + "-" + stop) : (movenr + ".  " + figurka + start + "-" + stop));

                                                            ruch = symbol + start + "-" + stop;
                                                            ruchS = figurka + start + "-" + stop;
                                                        } else {
                                                            if (dokonanoEP) {
                                                                jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ".  " + symbol + start + "x" + stop + "EP") : (movenr + ".  " + figurka + start + "x" + stop + "EP"));
                                                            } else {
                                                                jTextArea3.append(!jCheckBox1.isSelected() ? (movenr + ".  " + symbol + start + "x" + stop) : (movenr + ".  " + figurka + start + "x" + stop));
                                                            }
                                                            ruch = symbol + start + "x" + stop;
                                                            ruchS = figurka + start + "x" + stop;
                                                        }
                                                    }
                                                    if (krolS) {
                                                        if (hodu == false && hitme == false && protectme == false) {
                                                            jTextArea3.append("#");
                                                            ruch += ("#");
                                                            ruchS += ("#");
                                                        } else {
                                                            jTextArea3.append("+");
                                                            ruch += ("+");
                                                            ruchS += ("+");
                                                        }
                                                    } else {
                                                        if (promocja || dokonanoEP) {
                                                            jTextArea3.append(" ");
                                                        } else {
                                                            jTextArea3.append("   ");
                                                        }
                                                    }
                                                } else {
                                                    if ((stop.charAt(1) == '1') && (promo != ' ') && (promocja)) {
                                                        if (bicie == false) {
                                                            jTextArea3.append(!jCheckBox1.isSelected() ? ("     p" + start + "-" + stop + "=" + promo) : ("    \u265F" + start + "-" + stop + "=" + promoSymbol));
                                                            ruch = "p" + start + "-" + stop + "=" + promo;
                                                        } else {
                                                            jTextArea3.append(!jCheckBox1.isSelected() ? ("     p" + start + "x" + stop + "=" + promo) : ("    \u265F" + start + "x" + stop + "=" + promoSymbol));
                                                            ruch = "p" + start + "x" + stop + "=" + promo;
                                                        }
                                                        ruchS = "\u265F" + start + "x" + stop + "=" + promoSymbol;
                                                    } else {
                                                        if (bicie == false) {
                                                            jTextArea3.append(!jCheckBox1.isSelected() ? ("     " + symbol + start + "-" + stop) : ("    " + figurka + start + "-" + stop));
                                                            ruch = symbol + start + "-" + stop;
                                                            ruchS = figurka + start + "-" + stop;
                                                        } else {
                                                            if (dokonanoEP) {
                                                                jTextArea3.append(!jCheckBox1.isSelected() ? ("     " + symbol + start + "x" + stop + "EP") : ("  " + figurka + start + "x" + stop + "EP"));

                                                            } else {
                                                                jTextArea3.append(!jCheckBox1.isSelected() ? ("     " + symbol + start + "x" + stop) : ("  " + figurka + start + "x" + stop));
                                                            }
                                                            ruch = symbol + start + "x" + stop + ((dokonanoEP) ? "EP" : "");
                                                            ruchS = figurka + start + "x" + stop + ((dokonanoEP) ? "EP" : "");

                                                        }
                                                    }
                                                    if (krolS) {
                                                        if (hodu == false && hitme == false && protectme == false) {
                                                            jTextArea3.append("#");
                                                            ruch += ("#");
                                                            ruchS += ("#");
                                                        } else {
                                                            jTextArea3.append("+");
                                                            ruch += ("+");
                                                            ruchS += ("+");
                                                        }

                                                    } else {
                                                        if (promocja || dokonanoEP) {
                                                            jTextArea3.append(" ");
                                                        } else {
                                                            jTextArea3.append("   ");
                                                        }
                                                    }
                                                    movenr = movenr + 1;
                                                }
                                            }
                                            if (symbol == 'K') {
                                                kingrochB = false;
                                                dokonano_RB = Math.abs(lokalS[0] - lokalS[1]) == 2;
                                            }
                                            if (symbol == 'k') {
                                                kingrochC = false;
                                                dokonano_RC = Math.abs(lokalS[0] - lokalS[1]) == 2;
                                            }
                                            if (bicie) {
                                                switch (stop) {
                                                    case "A1":
                                                        wleft = false;
                                                        if (!wright && !wleft) {
                                                            kingrochB = false;
                                                        }
                                                        break;
                                                    case "A8":
                                                        bleft = false;
                                                        if (!bright && !bleft) {
                                                            kingrochC = false;
                                                        }
                                                        break;
                                                    case "H1":
                                                        wright = false;
                                                        if (!wright && !wleft) {
                                                            kingrochB = false;
                                                        }
                                                        break;
                                                    case "H8":
                                                        bright = false;
                                                        if (!bright && !bleft) {
                                                            kingrochC = false;
                                                        }
                                                        break;
                                                }
                                            }
                                            if (symbol == 'r' || symbol == 'R') {
                                                switch (start) {
                                                    case "A1":
                                                        wleft = false;
                                                        if (!wright && !wleft) {
                                                            kingrochB = false;
                                                        }
                                                        break;
                                                    case "A8":
                                                        bleft = false;
                                                        if (!bright && !bleft) {
                                                            kingrochC = false;
                                                        }
                                                        break;
                                                    case "H1":
                                                        wright = false;
                                                        if (!wright && !wleft) {
                                                            kingrochB = false;
                                                        }
                                                        break;
                                                    case "H8":
                                                        bright = false;
                                                        if (!bright && !bleft) {
                                                            kingrochC = false;
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        ustawrame();
                                        if (ruchB) {
                                            jTextArea3.append("\n");
                                        }
                                        ruchy_literowe.add(ruch);
                                        ruchy_syboliczne.add(ruchS);
                                        System.out.println(ruchS);
                                        jTextArea3.setCaretPosition(jTextArea3.getDocument().getLength());
                                        if (siec) {
                                            try {
                                                msgwy = ruch;
                                                out.writeUTF(msgwy + ((!oczekiwanie) ? " Przeciwnik" : ""));
                                                oczekiwanie = true;
                                            } catch (IOException ex) {
                                                Logger.getLogger(SzachowaArena.class
                                                        .getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }
                                        if (bicie || (promocja || (symbol == 'P' || symbol == 'p'))) {
                                            dolicz = false;
                                            zasada50 = 0;
                                            bicie = false;
                                        } else {
                                            if (dolicz) {
                                                zasada50 = (byte) (zasada50 + 1);
                                                dolicz = false;
                                            } else {
                                                dolicz = true;
                                            }
                                        }
                                        if (lokalK[0] != lokalS[0] || lokalK[1] != lokalS[1]) {
                                            String tmp3;
                                            int powtorki = 0;
                                            tmp3 = "";
                                            for (int x = 0; x < 8; x++) {
                                                for (int y = 0; y < 8; y++) {
                                                    tmp3 = tmp3.concat(String.valueOf(ust[x][y]));
                                                }
                                            }
                                            tmp3 = tmp3.concat(" " + ruchB + " " + przelotcan + " " + wleft + " " + wright + " " + bleft + " " + bright);
                                            historia.add(tmp3);
                                            Collections.sort(historia);
                                            if (historia.size() > 2) {
                                                for (int i = 1; i < historia.size(); i++) {
                                                    if (historia.get(i).equals(historia.get(i - 1))) {
                                                        powtorki = powtorki + 1;
                                                        if (powtorki == 2) {
                                                            if (czasgry != -1) {
                                                                whitetime.interrupt();
                                                                blacktime.interrupt();
                                                            }
                                                            JOptionPane.showMessageDialog(rootPane, "3-krotne powtórzenie pozycji. \nREMIS!", "Zasada", JOptionPane.WARNING_MESSAGE);
                                                            symulacja = false;
                                                            losowanko.setEnabled(false);
                                                            remis();
                                                            gra = false;
                                                            SI_ON = false;
                                                            partia_odlozona.setEnabled(false);
                                                        }
                                                    } else {
                                                        powtorki = 0;
                                                    }
                                                }
                                            }
                                            if (!RuchZagrozenie_kontrola.szach(ust, ruchB)) {
                                                krolS = false;
                                                move = false;
                                                char[][] temp = new char[8][8];
                                                // System.out.println("wy");
                                                for (int i = 0; i < 8; i++) {
                                                    System.arraycopy(ust[i], 0, temp[i], 0, 8);
                                                }

                                                for (int i = 0; i < 8; i++) {
                                                    for (int j = 0; j < 8; j++) {
                                                        if (ust[i][j] != ' ') {
                                                            pole_baza[0] = j;
                                                            pole_baza[1] = i;
                                                            if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                                                if ((ruchB && ust[i][j] == 'K') || (ruchB == false && ust[i][j] == 'k')) {
                                                                    pole_baza[0] = i;
                                                                    pole_baza[1] = j;
                                                                    hodu = SzachMatPatKontrola.uciekaj(temp, ruchB, pole_baza);
                                                                }
                                                            } else {
                                                                move = SzachMatPatKontrola.znajdz_ruch(temp, ruchB, temp[i][j], pole_baza, przelotcan);
                                                                if (move) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (move) {
                                                        break;
                                                    }
                                                }
                                                if (hodu == false && move == false) {
                                                    if (czasgry != -1) {
                                                        whitetime.interrupt();
                                                        blacktime.interrupt();
                                                    }
                                                    JOptionPane.showMessageDialog(rootPane, "PAT! REMIS", "Remis",
                                                            JOptionPane.WARNING_MESSAGE);
                                                    losowanko.setEnabled(false);
                                                    symulacja = false;
                                                    remis();
                                                    gra = false;
                                                    SI_ON = false;
                                                    partia_odlozona.setEnabled(false);
                                                }
                                            }
                                        }
                                    }
                                }
                                promo = ' ';
                                znak_promocji = ' ';
                                promocja = false;
                                roch = false;
                                dokonanoEP = false;
                                dobierz_kursor_na_przycisku(' ', null);
                                setCursor(Cursor.getDefaultCursor());
                                dobierz_kursor_na_przycisku(' ', null);

                            }
                        }
                    }
                }
                if (gra) {
                    if (hodu == false && hitme == false && protectme == false) {
                        if (czasgry != -1) {
                            whitetime.interrupt();
                            blacktime.interrupt();
                        }
                        JOptionPane.showMessageDialog(rootPane, "SZACH MAT!", "Ostrzeżenie",
                                JOptionPane.WARNING_MESSAGE);
                        symulacja = false;
                        losowanko.setEnabled(false);
                        kapitulacja();
                        gra = false;
                        partia_odlozona.setEnabled(false);
                        SI_ON = false;
                    }
                    if ((pionB < 1 && pionC < 1 && lekkieB < 2 && lekkieC < 2 && ciezkieB < 1 && ciezkieC < 1)) {
                        if (czasgry != -1) {
                            whitetime.interrupt();
                            blacktime.interrupt();
                        }
                        JOptionPane.showMessageDialog(rootPane, "Remis na wskutek niewystarczajacego materiału do mata.", "Remis", JOptionPane.WARNING_MESSAGE);

                        symulacja = false;
                        losowanko.setEnabled(false);
                        remis();
                        gra = false;
                        partia_odlozona.setEnabled(false);
                        SI_ON = false;
                    }
                    if (zasada50 == 50 && krolS == false && (hodu || protectme || hitme)) {
                        if (czasgry != -1) {
                            whitetime.interrupt();
                            blacktime.interrupt();
                        }

                        JOptionPane.showMessageDialog(rootPane, "zasada 50 ruchów.(50 ruchów po obu stronach bez bicia lub ruchu pionem). \nREMIS!", "Zasada", JOptionPane.WARNING_MESSAGE);

                        symulacja = false;
                        losowanko.setEnabled(false);
                        remis();
                        gra = false;
                        partia_odlozona.setEnabled(false);
                        SI_ON = false;
                    }
                    for (int i = 0; i < 8; i++) {
                        for (int j = 0; j < 8; j++) {
                            odwrotna[i][j] = ust[7 - i][7 - j];
                        }
                    }
                    if (SI_wyk == false && SI_ON && tura_rywala == ruchB && (move || hodu || hitme || protectme)) {
                        char[][] backup1 = new char[8][8];
                        for (int i = 0; i < 8; i++) {
                            System.arraycopy(ust[i], 0, backup1[i], 0, 8);
                        }
                        SI_ma_ruch();
                    }
                }
            }
            pomoc_ruch = ruchB ? Color.blue : Color.red;
        } else if (ustawka) {
            BUTTON.setIcon(cursor);
            pomocs = BUTTON.getName();
            pomoc2 = pomocs.charAt(0);
            switch (pomoc2) {
                case 'A':
                    pomocx = 0;
                    break;
                case 'B':
                    pomocx = 1;
                    break;
                case 'C':
                    pomocx = 2;
                    break;
                case 'D':
                    pomocx = 3;
                    break;
                case 'E':
                    pomocx = 4;
                    break;
                case 'F':
                    pomocx = 5;
                    break;
                case 'G':
                    pomocx = 6;
                    break;
                case 'H':
                    pomocx = 7;
                    break;
            }
            pomoc3 = pomocs.charAt(1);
            switch (pomoc3) {
                case '1':
                    pomocy = 0;
                    break;
                case '2':
                    pomocy = 1;
                    break;
                case '3':
                    pomocy = 2;
                    break;
                case '4':
                    pomocy = 3;
                    break;
                case '5':
                    pomocy = 4;
                    break;
                case '6':
                    pomocy = 5;
                    break;
                case '7':
                    pomocy = 6;
                    break;
                case '8':
                    pomocy = 7;
                    break;
            }
            switch (ust[pomocy][pomocx]) {
                case 'P':
                    pionB--;
                    break;
                case 'p':
                    pionC--;
                    break;
                case 'N':
                case 'B':
                    lekkieB--;
                    break;
                case 'n':
                case 'b':
                    lekkieC--;
                    break;
                case 'R':
                case 'Q':
                    ciezkieB--;
                    break;
                case 'r':
                case 'q':
                    ciezkieC--;
                    break;
            }
            if (ust[pomocy][pomocx] == 'K') {
                krole_biale--;
            }
            if (ust[pomocy][pomocx] == 'k') {
                krole_czarne--;
            }
            ust[pomocy][pomocx] = ' ';
            ust[pomocy][pomocx] = symbol;
            // System.out.println("["+ust[pomocy][pomocx]+"]");
            //System.out.println(pomocy+"|"+pomocx);
            if (ust[pomocy][pomocx] == 'K') {
                krole_biale++;
            }
            if (ust[pomocy][pomocx] == 'k') {
                krole_czarne++;
            }
            switch (symbol) {
                case 'P':
                    if (pomocy != 7) {
                        pionB++;
                    } else {
                        ust[pomocy][pomocx] = ' ';
                        BUTTON.setIcon(null);
                    }
                    break;
                case 'p':
                    if (pomocy != 0) {
                        pionC++;
                    } else {
                        ust[pomocy][pomocx] = ' ';
                        BUTTON.setIcon(null);
                    }
                    break;
                case 'N':
                case 'B':
                    lekkieB++;
                    break;
                case 'n':
                case 'b':
                    lekkieC++;
                    break;
                case 'R':
                case 'Q':
                    ciezkieB++;
                    break;
                case 'r':
                case 'q':
                    ciezkieC++;
                    break;
            }
        }
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);

    }

    public class Los_postep extends SwingWorker<Object, Object> {

        @Override
        protected Object doInBackground() {
            try {
                odwrot = false;
                String wejscie = JOptionPane.showInputDialog(("Ile ruchów ma minąć od tej pozycji?\n"
                        + "Ruchy białych i czarnych są liczone osobno"));
                int los = Integer.parseInt(wejscie);
                if (los > 0 && los <= 400) {
                    char[][] losowa = new char[8][8];
                    boolean ruch;
                    boolean ready = true;
                    ArrayList<String> powtorki = historia;
                    boolean doliczanie;
                    int pionkiB, skoczkiGonceB, wiezehetmanyB, pionkiC, skoczkiGonceC, wiezehetmanyC, piedziesiat;
                    int kolumna;
                    boolean rochleftB, rochrightB, rochleftC, rochrightC, rochC, rochB, enpasant;
                    jProgressBar1.setMaximum(los);
                    jProgressBar1.setMinimum(0);
                    jProgressBar1.setValue(1);
                    jProgressBar1.setString("Generowanie pozycji");
                    int powtorzenia = 0;
                    for (int i = 0; i < 8; i++) {
                        System.arraycopy(ust[i], 0, losowa[i], 0, 8);
                    }
                    odwrot = false;
                    int index = 1;
                    ArrayList<String> lista = new ArrayList<>();
                    do {
                        doliczanie = dolicz;
                        kolumna = kol;
                        piedziesiat = zasada50;
                        index = 1;
                        ready = true;
                        ruch = ruchB;
                        powtorki.removeAll(powtorki);
                        powtorki = historia;
                        pionkiB = pionB;
                        pionkiC = pionC;
                        skoczkiGonceB = lekkieB;
                        skoczkiGonceC = lekkieC;
                        wiezehetmanyB = ciezkieB;
                        wiezehetmanyC = ciezkieC;
                        piedziesiat = zasada50;
                        rochleftB = wleft;
                        rochrightB = wright;
                        rochleftC = bleft;
                        rochrightC = bright;
                        rochC = kingrochC;
                        rochB = kingrochB;
                        enpasant = przelotcan;
                        for (int i = 0; i < 8; i++) {
                            for (int j = 0; j < 8; j++) {
                                losowa[i][j] = ust[i][j];
                            }
                        }
                        lista.removeAll(lista);
                        for (int l = 0; l < los; l++) {
                            ArrayList<Ruch> temp = (ArrayList<Ruch>) Generator.generuj_posuniecia(losowa, ruch, enpasant,
                                    rochleftC, rochrightC, rochleftB, rochrightB, rochB, rochC, kolumna, false);
                            if (!temp.isEmpty()) {
                                index++;
                                Random losowanie = new Random();
                                lista.add((temp.get(losowanie.nextInt(temp.size())).toString()));
                                System.out.println(lista.get(l) + " " + l);
                                if (!lista.get(l).startsWith("O")) {
                                    String start, stop;
                                    start = lista.get(l).substring(1, 3);
                                    stop = lista.get(l).substring(4, 6);
                                    int[] kord_start = dobierz_wspolrzedne(start);
                                    int[] kord_stop = dobierz_wspolrzedne(stop);
                                    if ((Math.abs(kord_stop[0] - kord_start[0])) == 2
                                            && (lista.get(l).charAt(0) == 'p' || lista.get(l).charAt(0) == 'P')) {
                                        kolumna = kord_start[1] + 1;
                                        enpasant = true;
                                    } else {
                                        enpasant = false;
                                    }
                                    if (losowa[kord_stop[0]][kord_stop[1]] != ' ') {
                                        switch (losowa[kord_stop[0]][kord_stop[1]]) {
                                            case 'q':
                                            case 'r':
                                                wiezehetmanyC = wiezehetmanyC - 1;
                                                break;
                                            case 'Q':
                                            case 'R':
                                                wiezehetmanyB = wiezehetmanyB - 1;
                                                break;
                                            case 'b':
                                            case 'n':
                                                skoczkiGonceC = skoczkiGonceC - 1;
                                                break;
                                            case 'N':
                                            case 'B':
                                                skoczkiGonceB = skoczkiGonceB - 1;
                                                break;
                                            case 'p':
                                                pionkiC = pionkiC - 1;
                                                break;
                                            case 'P':
                                                pionkiB = pionkiB - 1;
                                                break;
                                        }
                                    }
                                    losowa[kord_stop[0]][kord_stop[1]] = losowa[kord_start[0]][kord_start[1]];
                                    if (lista.get(l).charAt(6) == '=') {
                                        losowa[kord_stop[0]][kord_stop[1]] = lista.get(l).charAt(7);
                                        switch (losowa[kord_stop[0]][kord_stop[1]]) {
                                            case 'q':
                                            case 'r':
                                                wiezehetmanyC = wiezehetmanyC + 1;
                                                break;
                                            case 'Q':
                                            case 'R':
                                                wiezehetmanyB = wiezehetmanyB + 1;
                                                break;
                                            case 'b':
                                            case 'n':
                                                skoczkiGonceC = skoczkiGonceC + 1;
                                                break;
                                            case 'N':
                                            case 'B':
                                                skoczkiGonceB = skoczkiGonceB + 1;
                                                break;
                                        }
                                        if (ruch) {
                                            pionkiB = pionkiB - 1;
                                        } else {
                                            pionkiC = pionkiC - 1;
                                        }
                                    }
                                    losowa[kord_start[0]][kord_start[1]] = ' ';
                                    if (lista.get(l).substring(6, 8).equals("EP")) {
                                        enpasant = false;
                                        switch (kolumna) {
                                            case 1:
                                                if (ruch) {
                                                    losowa[4][0] = ' ';
                                                } else {
                                                    losowa[3][0] = ' ';
                                                }
                                                break;
                                            case 2:
                                                if (ruch) {
                                                    losowa[4][1] = ' ';
                                                } else {
                                                    losowa[3][1] = ' ';
                                                }
                                                break;
                                            case 3:
                                                if (ruch) {
                                                    losowa[4][2] = ' ';
                                                } else {
                                                    losowa[3][2] = ' ';
                                                }
                                                break;
                                            case 4:
                                                if (ruch) {
                                                    losowa[4][3] = ' ';
                                                } else {
                                                    losowa[3][3] = ' ';
                                                }
                                                break;
                                            case 5:
                                                if (ruch) {
                                                    losowa[4][4] = ' ';
                                                } else {
                                                    losowa[3][4] = ' ';
                                                }
                                                break;
                                            case 6:
                                                if (ruch) {
                                                    losowa[4][5] = ' ';
                                                } else {
                                                    losowa[3][5] = ' ';
                                                }
                                                break;
                                            case 7:
                                                if (ruch) {
                                                    losowa[4][6] = ' ';
                                                } else {
                                                    losowa[3][6] = ' ';
                                                }
                                                break;
                                            case 8:
                                                if (ruch) {
                                                    losowa[4][7] = ' ';
                                                } else {
                                                    losowa[3][7] = ' ';
                                                }
                                                break;
                                        }
                                        if (ruch) {
                                            pionkiC = pionkiC - 1;
                                        } else {
                                            pionkiB = pionkiB - 1;
                                        }
                                    }
                                } else {
                                    if (lista.get(l).equals("O-O") || lista.get(l).equals("O-O+")) {
                                        if (ruch) {
                                            losowa[0][5] = 'R';
                                            losowa[0][7] = ' ';
                                            losowa[0][6] = 'K';
                                            losowa[0][4] = ' ';
                                            rochB = false;
                                        } else {
                                            losowa[7][5] = 'r';
                                            losowa[7][7] = ' ';
                                            losowa[7][6] = 'k';
                                            losowa[7][4] = ' ';
                                            rochC = false;
                                        }
                                    }
                                    if (lista.get(l).equals("O-O-O") || lista.get(l).equals("O-O-O+")) {
                                        if (ruch) {
                                            losowa[0][3] = 'R';
                                            losowa[0][0] = ' ';
                                            losowa[0][2] = 'K';
                                            losowa[0][4] = ' ';
                                            rochB = false;
                                        } else {
                                            losowa[7][3] = 'r';
                                            losowa[7][0] = ' ';
                                            losowa[7][2] = 'k';
                                            losowa[7][4] = ' ';
                                            rochC = false;
                                        }
                                    }
                                }
                                ruch = !ruch;

                                if (lista.get(lista.size() - 1).charAt(0) == 'P' || lista.get(lista.size() - 1).charAt(0) == 'p'
                                        || lista.get(lista.size() - 1).charAt(3) == 'x') {
                                    piedziesiat = 0;
                                    doliczanie = false;
                                } else {
                                    if (doliczanie) {
                                        doliczanie = false;
                                        piedziesiat = piedziesiat + 1;
                                    } else {
                                        doliczanie = true;
                                    }
                                }
                                String tmp3;
                                tmp3 = "";
                                for (int x = 0; x < 8; x++) {
                                    for (int y = 0; y < 8; y++) {
                                        tmp3 = tmp3.concat(String.valueOf(losowa[x][y]));
                                    }
                                }
                                tmp3 = tmp3.concat(" " + ruch + " " + enpasant + " " + rochB + " " + rochC + " " + rochleftB + " " + rochrightB + " " + rochleftC + " " + rochrightC);
                                powtorki.add(tmp3);
                                Collections.sort(powtorki);
                                for (int i = 1; i < powtorki.size(); i++) {
                                    if (powtorki.get(i - 1).equals(powtorki.get(i))) {
                                        powtorzenia = powtorzenia + 1;
                                        if (powtorzenia == 2) {
                                            break;
                                        }
                                    } else {
                                        powtorzenia = 0;
                                    }
                                }
                                boolean war1 = (pionkiB < 1 && pionkiC < 1 && skoczkiGonceC < 2
                                        && skoczkiGonceB < 2 && wiezehetmanyB < 1 && wiezehetmanyC < 1);
                                boolean war2 = piedziesiat == 50;
                                boolean war3 = powtorzenia == 2;
                                if (war1 || war2 || war3) {
                                    ready = false;
                                    break;
                                }
                                jProgressBar1.setValue(lista.size());
                                if (ready == false) {
                                    break;
                                }
                            } else {
                                ready = false;
                                break;
                            }
                        }

                    } while (ready == false);
                    symulacja = true;
                    jProgressBar1.setValue(0);
                    int indexo = 0;
                    for (String s : lista) {
                        System.out.println("odtwarzam " + s + " " + indexo);
                        indexo++;
                        jProgressBar1.setString("Tworzenie pozycji");
                        jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                        if (!s.startsWith("O")) {
                            String start, stop;
                            start = (s).substring(1, 3);
                            stop = (s).substring(4, 6);
                            if (s.charAt(6) == '=') {
                                znak_promocji = s.charAt(7);
                            } else {
                                znak_promocji = ' ';
                            }
                            aktywuj(odwrot, start);
                            aktywuj(odwrot, stop);
                            ostatni_start = start;
                            ostatni_stop = stop;
                        } else {
                            if (s.equals("O-O-") || s.equals("O-O+")) {
                                if (ruch) {
                                    aktywuj(odwrot, "E1");
                                    aktywuj(odwrot, "G1");
                                    ostatni_start = "E1";
                                    ostatni_stop = "G1";
                                } else {
                                    aktywuj(odwrot, "E8");
                                    aktywuj(odwrot, "G8");
                                    ostatni_start = "E8";
                                    ostatni_stop = "G8";
                                }
                            }
                            if (s.equals("O-O-O-") || s.equals("O-O-O+")) {
                                if (ruch) {
                                    aktywuj(odwrot, "E1");
                                    aktywuj(odwrot, "C1");
                                    ostatni_start = "E1";
                                    ostatni_stop = "C1";
                                } else {
                                    aktywuj(odwrot, "E8");
                                    aktywuj(odwrot, "C8");
                                    ostatni_start = "E8";
                                    ostatni_stop = "C8";
                                }
                            }
                        }
                    }
                    symulacja = false;
                    styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                    if (!ruchB) {
                        obrotowyActionPerformed(null);
                        obrotowyActionPerformed(null);
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Wartość musi być liczbą naturalną większą od 0\n"
                            + "i jednocześnie mniejszą lub równą 400");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Wartość nie jest liczbą,\nlub anulowałeś zadanie");
            } catch (HeadlessException e1) {
            }

            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        kroj = new javax.swing.JMenu();
        alfastyl = new javax.swing.JRadioButtonMenuItem();
        klasykstyl = new javax.swing.JRadioButtonMenuItem();
        oldschool = new javax.swing.JRadioButtonMenuItem();
        kolor = new javax.swing.JMenu();
        whiteandblackfigury = new javax.swing.JRadioButtonMenuItem();
        blueandredfigury = new javax.swing.JRadioButtonMenuItem();
        plansza = new javax.swing.JMenu();
        whiteandblackboard = new javax.swing.JRadioButtonMenuItem();
        blueandredboard = new javax.swing.JRadioButtonMenuItem();
        brownboard1 = new javax.swing.JRadioButtonMenuItem();
        Wlasne_kolor_jasne = new javax.swing.JMenuItem();
        Wlasne_kolor_ciemne = new javax.swing.JMenuItem();
        Ramowka = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        A8 = new javax.swing.JButton();
        B8 = new javax.swing.JButton();
        D8 = new javax.swing.JButton();
        C8 = new javax.swing.JButton();
        E8 = new javax.swing.JButton();
        E7 = new javax.swing.JButton();
        D7 = new javax.swing.JButton();
        C7 = new javax.swing.JButton();
        B7 = new javax.swing.JButton();
        A7 = new javax.swing.JButton();
        H8 = new javax.swing.JButton();
        G8 = new javax.swing.JButton();
        F8 = new javax.swing.JButton();
        F7 = new javax.swing.JButton();
        G7 = new javax.swing.JButton();
        H7 = new javax.swing.JButton();
        H6 = new javax.swing.JButton();
        G6 = new javax.swing.JButton();
        F6 = new javax.swing.JButton();
        E6 = new javax.swing.JButton();
        D6 = new javax.swing.JButton();
        C6 = new javax.swing.JButton();
        B6 = new javax.swing.JButton();
        A6 = new javax.swing.JButton();
        A5 = new javax.swing.JButton();
        B5 = new javax.swing.JButton();
        C5 = new javax.swing.JButton();
        D5 = new javax.swing.JButton();
        E5 = new javax.swing.JButton();
        F5 = new javax.swing.JButton();
        G5 = new javax.swing.JButton();
        H5 = new javax.swing.JButton();
        H4 = new javax.swing.JButton();
        G4 = new javax.swing.JButton();
        F4 = new javax.swing.JButton();
        E4 = new javax.swing.JButton();
        D4 = new javax.swing.JButton();
        C4 = new javax.swing.JButton();
        B4 = new javax.swing.JButton();
        A4 = new javax.swing.JButton();
        A3 = new javax.swing.JButton();
        B3 = new javax.swing.JButton();
        C3 = new javax.swing.JButton();
        D3 = new javax.swing.JButton();
        E3 = new javax.swing.JButton();
        F3 = new javax.swing.JButton();
        G3 = new javax.swing.JButton();
        H3 = new javax.swing.JButton();
        H2 = new javax.swing.JButton();
        G2 = new javax.swing.JButton();
        F2 = new javax.swing.JButton();
        E2 = new javax.swing.JButton();
        D2 = new javax.swing.JButton();
        C2 = new javax.swing.JButton();
        B2 = new javax.swing.JButton();
        A2 = new javax.swing.JButton();
        A1 = new javax.swing.JButton();
        B1 = new javax.swing.JButton();
        C1 = new javax.swing.JButton();
        D1 = new javax.swing.JButton();
        E1 = new javax.swing.JButton();
        F1 = new javax.swing.JButton();
        G1 = new javax.swing.JButton();
        H1 = new javax.swing.JButton();
        poddanie = new javax.swing.JButton();
        remis_prop = new javax.swing.JButton();
        remis_zgoda = new javax.swing.JButton();
        remis_odrzut = new javax.swing.JButton();
        czarneRuch = new javax.swing.JRadioButton();
        bialeRuch = new javax.swing.JRadioButton();
        ustawWP = new javax.swing.JRadioButton();
        ustawBP = new javax.swing.JRadioButton();
        ustawWN = new javax.swing.JRadioButton();
        ustawBN = new javax.swing.JRadioButton();
        ustawWB = new javax.swing.JRadioButton();
        ustawBB = new javax.swing.JRadioButton();
        ustawWR = new javax.swing.JRadioButton();
        ustawBR = new javax.swing.JRadioButton();
        ustawWQ = new javax.swing.JRadioButton();
        ustawBQ = new javax.swing.JRadioButton();
        jButton72 = new javax.swing.JButton();
        ustawWK = new javax.swing.JRadioButton();
        ustawBK = new javax.swing.JRadioButton();
        jRadioButton11 = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton81 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        zegarbiale = new javax.swing.JLabel();
        zegarczarne = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel13 = new javax.swing.JLabel();
        obrotowy = new javax.swing.JButton();
        SIOnOff = new javax.swing.JButton();
        resetgame = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        Przycisk_help = new javax.swing.JButton();
        partia_odlozona = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        Whitekingside = new javax.swing.JCheckBox();
        Blackkingside = new javax.swing.JCheckBox();
        Blackqueenside = new javax.swing.JCheckBox();
        Whitequeenside = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        przelotowe = new javax.swing.JComboBox<>();
        pionRB = new javax.swing.JButton();
        skoczekRB = new javax.swing.JButton();
        goniecRB = new javax.swing.JButton();
        wiezaRB = new javax.swing.JButton();
        hetmanRB = new javax.swing.JButton();
        pionRW = new javax.swing.JButton();
        skoczekRW = new javax.swing.JButton();
        goniecRW = new javax.swing.JButton();
        hetmanRW = new javax.swing.JButton();
        wiezaRW = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Menu_gry_glowne = new javax.swing.JMenu();
        menu_gry = new javax.swing.JMenu();
        menu_newgame_notime = new javax.swing.JMenuItem();
        menu_gameSIW = new javax.swing.JMenuItem();
        menu_SIB = new javax.swing.JMenuItem();
        Menu_new_game_time = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        TSzachMaty = new javax.swing.JMenuItem();
        menu_odmian = new javax.swing.JMenu();
        OPakoSako = new javax.swing.JMenuItem();
        OAmazonka = new javax.swing.JMenuItem();
        OGrabiez = new javax.swing.JMenuItem();
        OAntyszachy = new javax.swing.JMenuItem();
        OMgla = new javax.swing.JMenuItem();
        ODom_Szalenstwa = new javax.swing.JMenuItem();
        menu_online = new javax.swing.JMenu();
        Menu_onlineC = new javax.swing.JMenuItem();
        menu_onlineJ = new javax.swing.JMenuItem();
        menu_set = new javax.swing.JMenuItem();
        menu_load = new javax.swing.JMenuItem();
        Design = new javax.swing.JMenu();
        plansza1 = new javax.swing.JMenu();
        whiteandblackboard1 = new javax.swing.JRadioButtonMenuItem();
        blueandredboard1 = new javax.swing.JRadioButtonMenuItem();
        brownboard = new javax.swing.JRadioButtonMenuItem();
        Wlasne_kolor_jasne1 = new javax.swing.JMenuItem();
        Wlasne_kolor_ciemne1 = new javax.swing.JMenuItem();
        kolor1 = new javax.swing.JMenu();
        whiteandblackfigury1 = new javax.swing.JRadioButtonMenuItem();
        blueandredfigury1 = new javax.swing.JRadioButtonMenuItem();
        kroj1 = new javax.swing.JMenu();
        alfastyl1 = new javax.swing.JRadioButtonMenuItem();
        klasykstyl1 = new javax.swing.JRadioButtonMenuItem();
        oldschool1 = new javax.swing.JRadioButtonMenuItem();
        Ramowka1 = new javax.swing.JMenuItem();
        Wydruk = new javax.swing.JMenu();
        druk_odpis = new javax.swing.JMenuItem();
        druk_pozycja = new javax.swing.JMenuItem();
        druk_obrocony = new javax.swing.JCheckBoxMenuItem();
        mazyna_losujaca = new javax.swing.JMenu();
        losowanko = new javax.swing.JMenuItem();
        kombinacja = new javax.swing.JMenu();
        kombwe = new javax.swing.JMenuItem();
        kombwy = new javax.swing.JMenuItem();
        kombstart = new javax.swing.JMenuItem();
        Nauka = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        kroj.setText("zmien styl figur");

        buttonGroup1.add(alfastyl);
        alfastyl.setText("Alfa");
        alfastyl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alfastylActionPerformed(evt);
            }
        });
        kroj.add(alfastyl);

        buttonGroup1.add(klasykstyl);
        klasykstyl.setText("Klasyk");
        klasykstyl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                klasykstylActionPerformed(evt);
            }
        });
        kroj.add(klasykstyl);

        buttonGroup1.add(oldschool);
        oldschool.setText("Stara szkoła");
        oldschool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oldschoolActionPerformed(evt);
            }
        });
        kroj.add(oldschool);

        jPopupMenu1.add(kroj);

        kolor.setText("zmień kolor figur");

        buttonGroup4.add(whiteandblackfigury);
        whiteandblackfigury.setText("Biało czarni");
        whiteandblackfigury.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteandblackfiguryActionPerformed(evt);
            }
        });
        kolor.add(whiteandblackfigury);

        buttonGroup4.add(blueandredfigury);
        blueandredfigury.setText("niebiescy czerwoni");
        blueandredfigury.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueandredfiguryActionPerformed(evt);
            }
        });
        kolor.add(blueandredfigury);

        jPopupMenu1.add(kolor);

        plansza.setText("zmie styl szachownicy");

        buttonGroup5.add(whiteandblackboard);
        whiteandblackboard.setText("biało czarny");
        whiteandblackboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteandblackboardActionPerformed(evt);
            }
        });
        plansza.add(whiteandblackboard);

        buttonGroup5.add(blueandredboard);
        blueandredboard.setText("niebiesko czerwony");
        blueandredboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueandredboardActionPerformed(evt);
            }
        });
        plansza.add(blueandredboard);

        buttonGroup5.add(brownboard1);
        brownboard1.setText("jasny/ciemny brąz");
        brownboard1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brownboard1ActionPerformed(evt);
            }
        });
        plansza.add(brownboard1);

        Wlasne_kolor_jasne.setText("Własny kolor jasnych pól");
        Wlasne_kolor_jasne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Wlasne_kolor_jasneActionPerformed(evt);
            }
        });
        plansza.add(Wlasne_kolor_jasne);

        Wlasne_kolor_ciemne.setText("Własny kolor ciemnych pól");
        Wlasne_kolor_ciemne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Wlasne_kolor_ciemneActionPerformed(evt);
            }
        });
        plansza.add(Wlasne_kolor_ciemne);

        jPopupMenu1.add(plansza);

        Ramowka.setText("Zmiana obramowania pól");
        Ramowka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RamowkaActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Ramowka);

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Szachy Magister");
        setAutoRequestFocus(false);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        A8.setBackground(new java.awt.Color(255, 255, 255));
        A8.setForeground(new java.awt.Color(255, 255, 255));
        A8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Brook001.png"))); // NOI18N
        A8.setBorder(null);
        A8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        A8.setEnabled(false);
        A8.setMaximumSize(new java.awt.Dimension(75, 75));
        A8.setMinimumSize(new java.awt.Dimension(75, 75));
        A8.setName("A8"); // NOI18N
        A8.setPreferredSize(new java.awt.Dimension(75, 75));
        A8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A8ActionPerformed(evt);
            }
        });

        B8.setBackground(new java.awt.Color(102, 102, 102));
        B8.setForeground(new java.awt.Color(102, 102, 102));
        B8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bknight1.png"))); // NOI18N
        B8.setBorder(null);
        B8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        B8.setEnabled(false);
        B8.setMaximumSize(new java.awt.Dimension(75, 75));
        B8.setMinimumSize(new java.awt.Dimension(75, 75));
        B8.setName("B8"); // NOI18N
        B8.setPreferredSize(new java.awt.Dimension(75, 75));
        B8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B8ActionPerformed(evt);
            }
        });

        D8.setBackground(new java.awt.Color(102, 102, 102));
        D8.setForeground(new java.awt.Color(102, 102, 102));
        D8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bqueen01.png"))); // NOI18N
        D8.setBorder(null);
        D8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        D8.setEnabled(false);
        D8.setMaximumSize(new java.awt.Dimension(75, 75));
        D8.setMinimumSize(new java.awt.Dimension(75, 75));
        D8.setName("D8"); // NOI18N
        D8.setPreferredSize(new java.awt.Dimension(75, 75));
        D8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D8ActionPerformed(evt);
            }
        });

        C8.setBackground(new java.awt.Color(255, 255, 255));
        C8.setForeground(new java.awt.Color(255, 255, 255));
        C8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bbishop1.png"))); // NOI18N
        C8.setBorder(null);
        C8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        C8.setEnabled(false);
        C8.setMaximumSize(new java.awt.Dimension(75, 75));
        C8.setMinimumSize(new java.awt.Dimension(75, 75));
        C8.setName("C8"); // NOI18N
        C8.setPreferredSize(new java.awt.Dimension(75, 75));
        C8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C8ActionPerformed(evt);
            }
        });

        E8.setBackground(new java.awt.Color(255, 255, 255));
        E8.setForeground(new java.awt.Color(255, 255, 255));
        E8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bking001.png"))); // NOI18N
        E8.setBorder(null);
        E8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        E8.setEnabled(false);
        E8.setMaximumSize(new java.awt.Dimension(75, 75));
        E8.setMinimumSize(new java.awt.Dimension(75, 75));
        E8.setName("E8"); // NOI18N
        E8.setPreferredSize(new java.awt.Dimension(75, 75));
        E8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E8ActionPerformed(evt);
            }
        });

        E7.setBackground(new java.awt.Color(102, 102, 102));
        E7.setForeground(new java.awt.Color(102, 102, 102));
        E7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bpawn001.png"))); // NOI18N
        E7.setBorder(null);
        E7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        E7.setEnabled(false);
        E7.setMaximumSize(new java.awt.Dimension(75, 75));
        E7.setMinimumSize(new java.awt.Dimension(75, 75));
        E7.setName("E7"); // NOI18N
        E7.setPreferredSize(new java.awt.Dimension(75, 75));
        E7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E7ActionPerformed(evt);
            }
        });

        D7.setBackground(new java.awt.Color(255, 255, 255));
        D7.setForeground(new java.awt.Color(255, 255, 255));
        D7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bpawn001.png"))); // NOI18N
        D7.setBorder(null);
        D7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        D7.setEnabled(false);
        D7.setMaximumSize(new java.awt.Dimension(75, 75));
        D7.setMinimumSize(new java.awt.Dimension(75, 75));
        D7.setName("D7"); // NOI18N
        D7.setPreferredSize(new java.awt.Dimension(75, 75));
        D7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D7ActionPerformed(evt);
            }
        });

        C7.setBackground(new java.awt.Color(102, 102, 102));
        C7.setForeground(new java.awt.Color(102, 102, 102));
        C7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bpawn001.png"))); // NOI18N
        C7.setBorder(null);
        C7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        C7.setEnabled(false);
        C7.setMaximumSize(new java.awt.Dimension(75, 75));
        C7.setMinimumSize(new java.awt.Dimension(75, 75));
        C7.setName("C7"); // NOI18N
        C7.setPreferredSize(new java.awt.Dimension(75, 75));
        C7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C7ActionPerformed(evt);
            }
        });

        B7.setBackground(new java.awt.Color(255, 255, 255));
        B7.setForeground(new java.awt.Color(255, 255, 255));
        B7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bpawn001.png"))); // NOI18N
        B7.setBorder(null);
        B7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        B7.setEnabled(false);
        B7.setMaximumSize(new java.awt.Dimension(75, 75));
        B7.setMinimumSize(new java.awt.Dimension(75, 75));
        B7.setName("B7"); // NOI18N
        B7.setPreferredSize(new java.awt.Dimension(75, 75));
        B7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B7ActionPerformed(evt);
            }
        });

        A7.setBackground(new java.awt.Color(102, 102, 102));
        A7.setForeground(new java.awt.Color(102, 102, 102));
        A7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bpawn001.png"))); // NOI18N
        A7.setBorder(null);
        A7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        A7.setEnabled(false);
        A7.setMaximumSize(new java.awt.Dimension(75, 75));
        A7.setMinimumSize(new java.awt.Dimension(75, 75));
        A7.setName("A7"); // NOI18N
        A7.setPreferredSize(new java.awt.Dimension(75, 75));
        A7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A7ActionPerformed(evt);
            }
        });

        H8.setBackground(new java.awt.Color(102, 102, 102));
        H8.setForeground(new java.awt.Color(102, 102, 102));
        H8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Brook001.png"))); // NOI18N
        H8.setBorder(null);
        H8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        H8.setEnabled(false);
        H8.setMaximumSize(new java.awt.Dimension(75, 75));
        H8.setMinimumSize(new java.awt.Dimension(75, 75));
        H8.setName("H8"); // NOI18N
        H8.setPreferredSize(new java.awt.Dimension(75, 75));
        H8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                H8ActionPerformed(evt);
            }
        });

        G8.setBackground(new java.awt.Color(255, 255, 255));
        G8.setForeground(new java.awt.Color(255, 255, 255));
        G8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bknight1.png"))); // NOI18N
        G8.setBorder(null);
        G8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        G8.setEnabled(false);
        G8.setMaximumSize(new java.awt.Dimension(75, 75));
        G8.setMinimumSize(new java.awt.Dimension(75, 75));
        G8.setName("G8"); // NOI18N
        G8.setPreferredSize(new java.awt.Dimension(75, 75));
        G8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G8ActionPerformed(evt);
            }
        });

        F8.setBackground(new java.awt.Color(102, 102, 102));
        F8.setForeground(new java.awt.Color(102, 102, 102));
        F8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bbishop1.png"))); // NOI18N
        F8.setBorder(null);
        F8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        F8.setEnabled(false);
        F8.setMaximumSize(new java.awt.Dimension(75, 75));
        F8.setMinimumSize(new java.awt.Dimension(75, 75));
        F8.setName("F8"); // NOI18N
        F8.setPreferredSize(new java.awt.Dimension(75, 75));
        F8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F8ActionPerformed(evt);
            }
        });

        F7.setBackground(new java.awt.Color(255, 255, 255));
        F7.setForeground(new java.awt.Color(255, 255, 255));
        F7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bpawn001.png"))); // NOI18N
        F7.setBorder(null);
        F7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        F7.setEnabled(false);
        F7.setMaximumSize(new java.awt.Dimension(75, 75));
        F7.setMinimumSize(new java.awt.Dimension(75, 75));
        F7.setName("F7"); // NOI18N
        F7.setPreferredSize(new java.awt.Dimension(75, 75));
        F7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F7ActionPerformed(evt);
            }
        });

        G7.setBackground(new java.awt.Color(102, 102, 102));
        G7.setForeground(new java.awt.Color(102, 102, 102));
        G7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bpawn001.png"))); // NOI18N
        G7.setBorder(null);
        G7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        G7.setEnabled(false);
        G7.setMaximumSize(new java.awt.Dimension(75, 75));
        G7.setMinimumSize(new java.awt.Dimension(75, 75));
        G7.setName("G7"); // NOI18N
        G7.setPreferredSize(new java.awt.Dimension(75, 75));
        G7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G7ActionPerformed(evt);
            }
        });

        H7.setBackground(new java.awt.Color(255, 255, 255));
        H7.setForeground(new java.awt.Color(255, 255, 255));
        H7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bpawn001.png"))); // NOI18N
        H7.setBorder(null);
        H7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        H7.setEnabled(false);
        H7.setMaximumSize(new java.awt.Dimension(75, 75));
        H7.setMinimumSize(new java.awt.Dimension(75, 75));
        H7.setName("H7"); // NOI18N
        H7.setPreferredSize(new java.awt.Dimension(75, 75));
        H7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                H7ActionPerformed(evt);
            }
        });

        H6.setBackground(new java.awt.Color(102, 102, 102));
        H6.setForeground(new java.awt.Color(102, 102, 102));
        H6.setBorder(null);
        H6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        H6.setEnabled(false);
        H6.setMaximumSize(new java.awt.Dimension(75, 75));
        H6.setMinimumSize(new java.awt.Dimension(75, 75));
        H6.setName("H6"); // NOI18N
        H6.setPreferredSize(new java.awt.Dimension(75, 75));
        H6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                H6ActionPerformed(evt);
            }
        });

        G6.setBackground(new java.awt.Color(255, 255, 255));
        G6.setForeground(new java.awt.Color(255, 255, 255));
        G6.setBorder(null);
        G6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        G6.setEnabled(false);
        G6.setMaximumSize(new java.awt.Dimension(75, 75));
        G6.setMinimumSize(new java.awt.Dimension(75, 75));
        G6.setName("G6"); // NOI18N
        G6.setPreferredSize(new java.awt.Dimension(75, 75));
        G6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G6ActionPerformed(evt);
            }
        });

        F6.setBackground(new java.awt.Color(102, 102, 102));
        F6.setForeground(new java.awt.Color(102, 102, 102));
        F6.setBorder(null);
        F6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        F6.setEnabled(false);
        F6.setMaximumSize(new java.awt.Dimension(75, 75));
        F6.setMinimumSize(new java.awt.Dimension(75, 75));
        F6.setName("F6"); // NOI18N
        F6.setPreferredSize(new java.awt.Dimension(75, 75));
        F6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F6ActionPerformed(evt);
            }
        });

        E6.setBackground(new java.awt.Color(255, 255, 255));
        E6.setForeground(new java.awt.Color(255, 255, 255));
        E6.setBorder(null);
        E6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        E6.setEnabled(false);
        E6.setMaximumSize(new java.awt.Dimension(75, 75));
        E6.setMinimumSize(new java.awt.Dimension(75, 75));
        E6.setName("E6"); // NOI18N
        E6.setPreferredSize(new java.awt.Dimension(75, 75));
        E6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E6ActionPerformed(evt);
            }
        });

        D6.setBackground(new java.awt.Color(102, 102, 102));
        D6.setForeground(new java.awt.Color(102, 102, 102));
        D6.setBorder(null);
        D6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        D6.setEnabled(false);
        D6.setMaximumSize(new java.awt.Dimension(75, 75));
        D6.setMinimumSize(new java.awt.Dimension(75, 75));
        D6.setName("D6"); // NOI18N
        D6.setPreferredSize(new java.awt.Dimension(75, 75));
        D6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D6ActionPerformed(evt);
            }
        });

        C6.setBackground(new java.awt.Color(255, 255, 255));
        C6.setForeground(new java.awt.Color(255, 255, 255));
        C6.setBorder(null);
        C6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        C6.setEnabled(false);
        C6.setMaximumSize(new java.awt.Dimension(75, 75));
        C6.setMinimumSize(new java.awt.Dimension(75, 75));
        C6.setName("C6"); // NOI18N
        C6.setPreferredSize(new java.awt.Dimension(75, 75));
        C6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C6ActionPerformed(evt);
            }
        });

        B6.setBackground(new java.awt.Color(102, 102, 102));
        B6.setForeground(new java.awt.Color(102, 102, 102));
        B6.setBorder(null);
        B6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        B6.setEnabled(false);
        B6.setMaximumSize(new java.awt.Dimension(75, 75));
        B6.setMinimumSize(new java.awt.Dimension(75, 75));
        B6.setName("B6"); // NOI18N
        B6.setPreferredSize(new java.awt.Dimension(75, 75));
        B6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B6ActionPerformed(evt);
            }
        });

        A6.setBackground(new java.awt.Color(255, 255, 255));
        A6.setForeground(new java.awt.Color(255, 255, 255));
        A6.setBorder(null);
        A6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        A6.setEnabled(false);
        A6.setMaximumSize(new java.awt.Dimension(75, 75));
        A6.setMinimumSize(new java.awt.Dimension(75, 75));
        A6.setName("A6"); // NOI18N
        A6.setPreferredSize(new java.awt.Dimension(75, 75));
        A6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A6ActionPerformed(evt);
            }
        });

        A5.setBackground(new java.awt.Color(102, 102, 102));
        A5.setForeground(new java.awt.Color(102, 102, 102));
        A5.setBorder(null);
        A5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        A5.setEnabled(false);
        A5.setMaximumSize(new java.awt.Dimension(75, 75));
        A5.setMinimumSize(new java.awt.Dimension(75, 75));
        A5.setName("A5"); // NOI18N
        A5.setPreferredSize(new java.awt.Dimension(75, 75));
        A5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A5ActionPerformed(evt);
            }
        });

        B5.setBackground(new java.awt.Color(255, 255, 255));
        B5.setForeground(new java.awt.Color(255, 255, 255));
        B5.setBorder(null);
        B5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        B5.setEnabled(false);
        B5.setMaximumSize(new java.awt.Dimension(75, 75));
        B5.setMinimumSize(new java.awt.Dimension(75, 75));
        B5.setName("B5"); // NOI18N
        B5.setPreferredSize(new java.awt.Dimension(75, 75));
        B5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B5ActionPerformed(evt);
            }
        });

        C5.setBackground(new java.awt.Color(102, 102, 102));
        C5.setForeground(new java.awt.Color(102, 102, 102));
        C5.setBorder(null);
        C5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        C5.setEnabled(false);
        C5.setMaximumSize(new java.awt.Dimension(75, 75));
        C5.setMinimumSize(new java.awt.Dimension(75, 75));
        C5.setName("C5"); // NOI18N
        C5.setPreferredSize(new java.awt.Dimension(75, 75));
        C5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C5ActionPerformed(evt);
            }
        });

        D5.setBackground(new java.awt.Color(255, 255, 255));
        D5.setForeground(new java.awt.Color(255, 255, 255));
        D5.setBorder(null);
        D5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        D5.setEnabled(false);
        D5.setMaximumSize(new java.awt.Dimension(75, 75));
        D5.setMinimumSize(new java.awt.Dimension(75, 75));
        D5.setName("D5"); // NOI18N
        D5.setPreferredSize(new java.awt.Dimension(75, 75));
        D5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D5ActionPerformed(evt);
            }
        });

        E5.setBackground(new java.awt.Color(102, 102, 102));
        E5.setForeground(new java.awt.Color(102, 102, 102));
        E5.setBorder(null);
        E5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        E5.setEnabled(false);
        E5.setMaximumSize(new java.awt.Dimension(75, 75));
        E5.setMinimumSize(new java.awt.Dimension(75, 75));
        E5.setName("E5"); // NOI18N
        E5.setPreferredSize(new java.awt.Dimension(75, 75));
        E5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E5ActionPerformed(evt);
            }
        });

        F5.setBackground(new java.awt.Color(255, 255, 255));
        F5.setForeground(new java.awt.Color(255, 255, 255));
        F5.setBorder(null);
        F5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        F5.setEnabled(false);
        F5.setMaximumSize(new java.awt.Dimension(75, 75));
        F5.setMinimumSize(new java.awt.Dimension(75, 75));
        F5.setName("F5"); // NOI18N
        F5.setPreferredSize(new java.awt.Dimension(75, 75));
        F5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F5ActionPerformed(evt);
            }
        });

        G5.setBackground(new java.awt.Color(102, 102, 102));
        G5.setForeground(new java.awt.Color(102, 102, 102));
        G5.setBorder(null);
        G5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        G5.setEnabled(false);
        G5.setMaximumSize(new java.awt.Dimension(75, 75));
        G5.setMinimumSize(new java.awt.Dimension(75, 75));
        G5.setName("G5"); // NOI18N
        G5.setPreferredSize(new java.awt.Dimension(75, 75));
        G5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G5ActionPerformed(evt);
            }
        });

        H5.setBackground(new java.awt.Color(255, 255, 255));
        H5.setForeground(new java.awt.Color(255, 255, 255));
        H5.setBorder(null);
        H5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        H5.setEnabled(false);
        H5.setMaximumSize(new java.awt.Dimension(75, 75));
        H5.setMinimumSize(new java.awt.Dimension(75, 75));
        H5.setName("H5"); // NOI18N
        H5.setPreferredSize(new java.awt.Dimension(75, 75));
        H5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                H5ActionPerformed(evt);
            }
        });

        H4.setBackground(new java.awt.Color(102, 102, 102));
        H4.setForeground(new java.awt.Color(102, 102, 102));
        H4.setBorder(null);
        H4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        H4.setEnabled(false);
        H4.setMaximumSize(new java.awt.Dimension(75, 75));
        H4.setMinimumSize(new java.awt.Dimension(75, 75));
        H4.setName("H4"); // NOI18N
        H4.setPreferredSize(new java.awt.Dimension(75, 75));
        H4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                H4ActionPerformed(evt);
            }
        });

        G4.setBackground(new java.awt.Color(255, 255, 255));
        G4.setForeground(new java.awt.Color(255, 255, 255));
        G4.setBorder(null);
        G4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        G4.setEnabled(false);
        G4.setMaximumSize(new java.awt.Dimension(75, 75));
        G4.setMinimumSize(new java.awt.Dimension(75, 75));
        G4.setName("G4"); // NOI18N
        G4.setPreferredSize(new java.awt.Dimension(75, 75));
        G4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G4ActionPerformed(evt);
            }
        });

        F4.setBackground(new java.awt.Color(102, 102, 102));
        F4.setForeground(new java.awt.Color(102, 102, 102));
        F4.setBorder(null);
        F4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        F4.setEnabled(false);
        F4.setMaximumSize(new java.awt.Dimension(75, 75));
        F4.setMinimumSize(new java.awt.Dimension(75, 75));
        F4.setName("F4"); // NOI18N
        F4.setPreferredSize(new java.awt.Dimension(75, 75));
        F4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F4ActionPerformed(evt);
            }
        });

        E4.setBackground(new java.awt.Color(255, 255, 255));
        E4.setForeground(new java.awt.Color(255, 255, 255));
        E4.setBorder(null);
        E4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        E4.setEnabled(false);
        E4.setMaximumSize(new java.awt.Dimension(75, 75));
        E4.setMinimumSize(new java.awt.Dimension(75, 75));
        E4.setName("E4"); // NOI18N
        E4.setPreferredSize(new java.awt.Dimension(75, 75));
        E4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E4ActionPerformed(evt);
            }
        });

        D4.setBackground(new java.awt.Color(102, 102, 102));
        D4.setForeground(new java.awt.Color(102, 102, 102));
        D4.setBorder(null);
        D4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        D4.setEnabled(false);
        D4.setMaximumSize(new java.awt.Dimension(75, 75));
        D4.setMinimumSize(new java.awt.Dimension(75, 75));
        D4.setName("D4"); // NOI18N
        D4.setPreferredSize(new java.awt.Dimension(75, 75));
        D4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D4ActionPerformed(evt);
            }
        });

        C4.setBackground(new java.awt.Color(255, 255, 255));
        C4.setForeground(new java.awt.Color(255, 255, 255));
        C4.setBorder(null);
        C4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        C4.setEnabled(false);
        C4.setMaximumSize(new java.awt.Dimension(75, 75));
        C4.setMinimumSize(new java.awt.Dimension(75, 75));
        C4.setName("C4"); // NOI18N
        C4.setPreferredSize(new java.awt.Dimension(75, 75));
        C4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C4ActionPerformed(evt);
            }
        });

        B4.setBackground(new java.awt.Color(102, 102, 102));
        B4.setForeground(new java.awt.Color(102, 102, 102));
        B4.setBorder(null);
        B4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        B4.setEnabled(false);
        B4.setMaximumSize(new java.awt.Dimension(75, 75));
        B4.setMinimumSize(new java.awt.Dimension(75, 75));
        B4.setName("B4"); // NOI18N
        B4.setPreferredSize(new java.awt.Dimension(75, 75));
        B4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B4ActionPerformed(evt);
            }
        });

        A4.setBackground(new java.awt.Color(255, 255, 255));
        A4.setForeground(new java.awt.Color(255, 255, 255));
        A4.setBorder(null);
        A4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        A4.setEnabled(false);
        A4.setMaximumSize(new java.awt.Dimension(75, 75));
        A4.setMinimumSize(new java.awt.Dimension(75, 75));
        A4.setName("A4"); // NOI18N
        A4.setPreferredSize(new java.awt.Dimension(75, 75));
        A4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A4ActionPerformed(evt);
            }
        });

        A3.setBackground(new java.awt.Color(102, 102, 102));
        A3.setForeground(new java.awt.Color(102, 102, 102));
        A3.setBorder(null);
        A3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        A3.setEnabled(false);
        A3.setMaximumSize(new java.awt.Dimension(75, 75));
        A3.setMinimumSize(new java.awt.Dimension(75, 75));
        A3.setName("A3"); // NOI18N
        A3.setPreferredSize(new java.awt.Dimension(75, 75));
        A3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A3ActionPerformed(evt);
            }
        });

        B3.setBackground(new java.awt.Color(255, 255, 255));
        B3.setForeground(new java.awt.Color(255, 255, 255));
        B3.setBorder(null);
        B3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        B3.setEnabled(false);
        B3.setMaximumSize(new java.awt.Dimension(75, 75));
        B3.setMinimumSize(new java.awt.Dimension(75, 75));
        B3.setName("B3"); // NOI18N
        B3.setPreferredSize(new java.awt.Dimension(75, 75));
        B3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B3ActionPerformed(evt);
            }
        });

        C3.setBackground(new java.awt.Color(102, 102, 102));
        C3.setForeground(new java.awt.Color(102, 102, 102));
        C3.setBorder(null);
        C3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        C3.setEnabled(false);
        C3.setMaximumSize(new java.awt.Dimension(75, 75));
        C3.setMinimumSize(new java.awt.Dimension(75, 75));
        C3.setName("C3"); // NOI18N
        C3.setPreferredSize(new java.awt.Dimension(75, 75));
        C3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C3ActionPerformed(evt);
            }
        });

        D3.setBackground(new java.awt.Color(255, 255, 255));
        D3.setForeground(new java.awt.Color(255, 255, 255));
        D3.setBorder(null);
        D3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        D3.setEnabled(false);
        D3.setMaximumSize(new java.awt.Dimension(75, 75));
        D3.setMinimumSize(new java.awt.Dimension(75, 75));
        D3.setName("D3"); // NOI18N
        D3.setPreferredSize(new java.awt.Dimension(75, 75));
        D3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D3ActionPerformed(evt);
            }
        });

        E3.setBackground(new java.awt.Color(102, 102, 102));
        E3.setForeground(new java.awt.Color(102, 102, 102));
        E3.setBorder(null);
        E3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        E3.setEnabled(false);
        E3.setMaximumSize(new java.awt.Dimension(75, 75));
        E3.setMinimumSize(new java.awt.Dimension(75, 75));
        E3.setName("E3"); // NOI18N
        E3.setPreferredSize(new java.awt.Dimension(75, 75));
        E3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E3ActionPerformed(evt);
            }
        });

        F3.setBackground(new java.awt.Color(255, 255, 255));
        F3.setForeground(new java.awt.Color(255, 255, 255));
        F3.setBorder(null);
        F3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        F3.setEnabled(false);
        F3.setMaximumSize(new java.awt.Dimension(75, 75));
        F3.setMinimumSize(new java.awt.Dimension(75, 75));
        F3.setName("F3"); // NOI18N
        F3.setPreferredSize(new java.awt.Dimension(75, 75));
        F3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F3ActionPerformed(evt);
            }
        });

        G3.setBackground(new java.awt.Color(102, 102, 102));
        G3.setForeground(new java.awt.Color(102, 102, 102));
        G3.setBorder(null);
        G3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        G3.setEnabled(false);
        G3.setMaximumSize(new java.awt.Dimension(75, 75));
        G3.setMinimumSize(new java.awt.Dimension(75, 75));
        G3.setName("G3"); // NOI18N
        G3.setPreferredSize(new java.awt.Dimension(75, 75));
        G3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G3ActionPerformed(evt);
            }
        });

        H3.setBackground(new java.awt.Color(255, 255, 255));
        H3.setForeground(new java.awt.Color(255, 255, 255));
        H3.setBorder(null);
        H3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        H3.setEnabled(false);
        H3.setMaximumSize(new java.awt.Dimension(75, 75));
        H3.setMinimumSize(new java.awt.Dimension(75, 75));
        H3.setName("H3"); // NOI18N
        H3.setPreferredSize(new java.awt.Dimension(75, 75));
        H3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                H3ActionPerformed(evt);
            }
        });

        H2.setBackground(new java.awt.Color(102, 102, 102));
        H2.setForeground(new java.awt.Color(102, 102, 102));
        H2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wpawn001.png"))); // NOI18N
        H2.setBorder(null);
        H2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        H2.setEnabled(false);
        H2.setMaximumSize(new java.awt.Dimension(75, 75));
        H2.setMinimumSize(new java.awt.Dimension(75, 75));
        H2.setName("H2"); // NOI18N
        H2.setPreferredSize(new java.awt.Dimension(75, 75));
        H2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                H2ActionPerformed(evt);
            }
        });

        G2.setBackground(new java.awt.Color(255, 255, 255));
        G2.setForeground(new java.awt.Color(255, 255, 255));
        G2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wpawn001.png"))); // NOI18N
        G2.setBorder(null);
        G2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        G2.setEnabled(false);
        G2.setMaximumSize(new java.awt.Dimension(75, 75));
        G2.setMinimumSize(new java.awt.Dimension(75, 75));
        G2.setName("G2"); // NOI18N
        G2.setPreferredSize(new java.awt.Dimension(75, 75));
        G2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G2ActionPerformed(evt);
            }
        });

        F2.setBackground(new java.awt.Color(102, 102, 102));
        F2.setForeground(new java.awt.Color(102, 102, 102));
        F2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wpawn001.png"))); // NOI18N
        F2.setBorder(null);
        F2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        F2.setEnabled(false);
        F2.setMaximumSize(new java.awt.Dimension(75, 75));
        F2.setMinimumSize(new java.awt.Dimension(75, 75));
        F2.setName("F2"); // NOI18N
        F2.setPreferredSize(new java.awt.Dimension(75, 75));
        F2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F2ActionPerformed(evt);
            }
        });

        E2.setBackground(new java.awt.Color(255, 255, 255));
        E2.setForeground(new java.awt.Color(255, 255, 255));
        E2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wpawn001.png"))); // NOI18N
        E2.setBorder(null);
        E2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        E2.setEnabled(false);
        E2.setMaximumSize(new java.awt.Dimension(75, 75));
        E2.setMinimumSize(new java.awt.Dimension(75, 75));
        E2.setName("E2"); // NOI18N
        E2.setPreferredSize(new java.awt.Dimension(75, 75));
        E2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E2ActionPerformed(evt);
            }
        });

        D2.setBackground(new java.awt.Color(102, 102, 102));
        D2.setForeground(new java.awt.Color(102, 102, 102));
        D2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wpawn001.png"))); // NOI18N
        D2.setBorder(null);
        D2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        D2.setEnabled(false);
        D2.setMaximumSize(new java.awt.Dimension(75, 75));
        D2.setMinimumSize(new java.awt.Dimension(75, 75));
        D2.setName("D2"); // NOI18N
        D2.setPreferredSize(new java.awt.Dimension(75, 75));
        D2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D2ActionPerformed(evt);
            }
        });

        C2.setBackground(new java.awt.Color(255, 255, 255));
        C2.setForeground(new java.awt.Color(255, 255, 255));
        C2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wpawn001.png"))); // NOI18N
        C2.setBorder(null);
        C2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        C2.setEnabled(false);
        C2.setMaximumSize(new java.awt.Dimension(75, 75));
        C2.setMinimumSize(new java.awt.Dimension(75, 75));
        C2.setName("C2"); // NOI18N
        C2.setPreferredSize(new java.awt.Dimension(75, 75));
        C2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C2ActionPerformed(evt);
            }
        });

        B2.setBackground(new java.awt.Color(102, 102, 102));
        B2.setForeground(new java.awt.Color(102, 102, 102));
        B2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wpawn001.png"))); // NOI18N
        B2.setBorder(null);
        B2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        B2.setEnabled(false);
        B2.setMaximumSize(new java.awt.Dimension(75, 75));
        B2.setMinimumSize(new java.awt.Dimension(75, 75));
        B2.setName("B2"); // NOI18N
        B2.setPreferredSize(new java.awt.Dimension(75, 75));
        B2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B2ActionPerformed(evt);
            }
        });

        A2.setBackground(new java.awt.Color(255, 255, 255));
        A2.setForeground(new java.awt.Color(255, 255, 255));
        A2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wpawn001.png"))); // NOI18N
        A2.setBorder(null);
        A2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        A2.setEnabled(false);
        A2.setMaximumSize(new java.awt.Dimension(75, 75));
        A2.setMinimumSize(new java.awt.Dimension(75, 75));
        A2.setName("A2"); // NOI18N
        A2.setPreferredSize(new java.awt.Dimension(75, 75));
        A2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A2ActionPerformed(evt);
            }
        });

        A1.setBackground(new java.awt.Color(102, 102, 102));
        A1.setForeground(new java.awt.Color(102, 102, 102));
        A1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wrook001.png"))); // NOI18N
        A1.setBorder(null);
        A1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        A1.setEnabled(false);
        A1.setMaximumSize(new java.awt.Dimension(75, 75));
        A1.setMinimumSize(new java.awt.Dimension(75, 75));
        A1.setName("A1"); // NOI18N
        A1.setPreferredSize(new java.awt.Dimension(75, 75));
        A1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A1ActionPerformed(evt);
            }
        });

        B1.setBackground(new java.awt.Color(255, 255, 255));
        B1.setForeground(new java.awt.Color(255, 255, 255));
        B1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wknight1.png"))); // NOI18N
        B1.setBorder(null);
        B1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        B1.setEnabled(false);
        B1.setMaximumSize(new java.awt.Dimension(75, 75));
        B1.setMinimumSize(new java.awt.Dimension(75, 75));
        B1.setName("B1"); // NOI18N
        B1.setPreferredSize(new java.awt.Dimension(75, 75));
        B1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B1ActionPerformed(evt);
            }
        });

        C1.setBackground(new java.awt.Color(102, 102, 102));
        C1.setForeground(new java.awt.Color(102, 102, 102));
        C1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wbishop1.png"))); // NOI18N
        C1.setBorder(null);
        C1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        C1.setEnabled(false);
        C1.setMaximumSize(new java.awt.Dimension(75, 75));
        C1.setMinimumSize(new java.awt.Dimension(75, 75));
        C1.setName("C1"); // NOI18N
        C1.setPreferredSize(new java.awt.Dimension(75, 75));
        C1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C1ActionPerformed(evt);
            }
        });

        D1.setBackground(new java.awt.Color(255, 255, 255));
        D1.setForeground(new java.awt.Color(255, 255, 255));
        D1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wqueen01.png"))); // NOI18N
        D1.setBorder(null);
        D1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        D1.setEnabled(false);
        D1.setMaximumSize(new java.awt.Dimension(75, 75));
        D1.setMinimumSize(new java.awt.Dimension(75, 75));
        D1.setName("D1"); // NOI18N
        D1.setPreferredSize(new java.awt.Dimension(75, 75));
        D1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D1ActionPerformed(evt);
            }
        });

        E1.setBackground(new java.awt.Color(102, 102, 102));
        E1.setForeground(new java.awt.Color(102, 102, 102));
        E1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wking001.png"))); // NOI18N
        E1.setBorder(null);
        E1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        E1.setEnabled(false);
        E1.setMaximumSize(new java.awt.Dimension(75, 75));
        E1.setMinimumSize(new java.awt.Dimension(75, 75));
        E1.setName("E1"); // NOI18N
        E1.setPreferredSize(new java.awt.Dimension(75, 75));
        E1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E1ActionPerformed(evt);
            }
        });

        F1.setBackground(new java.awt.Color(255, 255, 255));
        F1.setForeground(new java.awt.Color(255, 255, 255));
        F1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wbishop1.png"))); // NOI18N
        F1.setBorder(null);
        F1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        F1.setEnabled(false);
        F1.setMaximumSize(new java.awt.Dimension(75, 75));
        F1.setMinimumSize(new java.awt.Dimension(75, 75));
        F1.setName("F1"); // NOI18N
        F1.setPreferredSize(new java.awt.Dimension(75, 75));
        F1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F1ActionPerformed(evt);
            }
        });

        G1.setBackground(new java.awt.Color(102, 102, 102));
        G1.setForeground(new java.awt.Color(102, 102, 102));
        G1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wknight1.png"))); // NOI18N
        G1.setBorder(null);
        G1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        G1.setEnabled(false);
        G1.setMaximumSize(new java.awt.Dimension(75, 75));
        G1.setMinimumSize(new java.awt.Dimension(75, 75));
        G1.setName("G1"); // NOI18N
        G1.setPreferredSize(new java.awt.Dimension(75, 75));
        G1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G1ActionPerformed(evt);
            }
        });

        H1.setBackground(new java.awt.Color(255, 255, 255));
        H1.setForeground(new java.awt.Color(255, 255, 255));
        H1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wrook001.png"))); // NOI18N
        H1.setBorder(null);
        H1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        H1.setEnabled(false);
        H1.setMaximumSize(new java.awt.Dimension(75, 75));
        H1.setMinimumSize(new java.awt.Dimension(75, 75));
        H1.setName("H1"); // NOI18N
        H1.setPreferredSize(new java.awt.Dimension(75, 75));
        H1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                H1ActionPerformed(evt);
            }
        });

        poddanie.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        poddanie.setText("poddaj się");
        poddanie.setEnabled(false);
        poddanie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poddanieActionPerformed(evt);
            }
        });

        remis_prop.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        remis_prop.setText("proponuj \nremis");
        remis_prop.setEnabled(false);
        remis_prop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remis_propActionPerformed(evt);
            }
        });

        remis_zgoda.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        remis_zgoda.setText("przyjmij  remis");
        remis_zgoda.setEnabled(false);
        remis_zgoda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remis_zgodaActionPerformed(evt);
            }
        });

        remis_odrzut.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        remis_odrzut.setText("odrzuc remis");
        remis_odrzut.setEnabled(false);
        remis_odrzut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remis_odrzutActionPerformed(evt);
            }
        });

        czarneRuch.setText("Ruch dla czarnych");
        buttonGroup3.add(czarneRuch);
        czarneRuch.setName(""); // NOI18N
        czarneRuch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                czarneRuchActionPerformed(evt);
            }
        });

        bialeRuch.setText("Ruch dla białych");
        buttonGroup3.add(bialeRuch);
        bialeRuch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bialeRuchActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawWP);
        ustawWP.setText("Biały pion");
        ustawWP.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wpawn001.png"))); // NOI18N
        ustawWP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawWPActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawBP);
        ustawBP.setText("czarny pion");
        ustawBP.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bpawn001.png"))); // NOI18N
        ustawBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawBPActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawWN);
        ustawWN.setText("biały skoczek");
        ustawWN.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wknight1.png"))); // NOI18N
        ustawWN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawWNActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawBN);
        ustawBN.setText("czarny skoczek");
        ustawBN.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bknight1.png"))); // NOI18N
        ustawBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawBNActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawWB);
        ustawWB.setText("biały goniec");
        ustawWB.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wbishop1.png"))); // NOI18N
        ustawWB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawWBActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawBB);
        ustawBB.setText("czarny goniec");
        ustawBB.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bbishop1.png"))); // NOI18N
        ustawBB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawBBActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawWR);
        ustawWR.setText("biała wieża");
        ustawWR.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wrook001.png"))); // NOI18N
        ustawWR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawWRActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawBR);
        ustawBR.setText("czarna wieża");
        ustawBR.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Brook001.png"))); // NOI18N
        ustawBR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawBRActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawWQ);
        ustawWQ.setText("Biały hetman");
        ustawWQ.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wqueen01.png"))); // NOI18N
        ustawWQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawWQActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawBQ);
        ustawBQ.setText("czarny hetman");
        ustawBQ.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bqueen01.png"))); // NOI18N
        ustawBQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawBQActionPerformed(evt);
            }
        });

        jButton72.setText("gotów");
        jButton72.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton72ActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawWK);
        ustawWK.setText("Biały król");
        ustawWK.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wking001.png"))); // NOI18N
        ustawWK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawWKActionPerformed(evt);
            }
        });

        buttonGroup4.add(ustawBK);
        ustawBK.setText("czarny król");
        ustawBK.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bking001.png"))); // NOI18N
        ustawBK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawBKActionPerformed(evt);
            }
        });

        buttonGroup4.add(jRadioButton11);
        jRadioButton11.setText("kasuj figurę");
        jRadioButton11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButton11.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/fragi.png"))); // NOI18N
        jRadioButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton11ActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setAutoscrolls(false);
        jScrollPane2.setViewportView(jTextArea2);

        jButton81.setText("wyslij wiadomosc");
        jButton81.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton81ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("A");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("B");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("C");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("D");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("E");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("F");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("G");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("H");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel14.setText("8");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("7");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("6");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setText("5");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel18.setText("4");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel19.setText("3");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("1");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("2");

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        zegarbiale.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        zegarbiale.setText("czas białych");

        zegarczarne.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        zegarczarne.setText("czas czarnych");

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel9.setText("pokaz moje ip");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jProgressBar1.setToolTipText("");
        jProgressBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jProgressBar1.setName(""); // NOI18N
        jProgressBar1.setString("");
        jProgressBar1.setStringPainted(true);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setText("Przebieg partii");

        obrotowy.setText("Obrót WŁ");
        obrotowy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obrotowyActionPerformed(evt);
            }
        });

        SIOnOff.setText("SI_włącz");
        SIOnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SIOnOffActionPerformed(evt);
            }
        });

        resetgame.setText("Resteuj grę");
        resetgame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetgameActionPerformed(evt);
            }
        });

        Przycisk_help.setText("Pokaż zasady poruszania figur");
        Przycisk_help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Przycisk_helpActionPerformed(evt);
            }
        });

        partia_odlozona.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        partia_odlozona.setText("Odłóż partię");
        partia_odlozona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partia_odlozonaActionPerformed(evt);
            }
        });

        jCheckBox1.setText("symbole w notacji");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        Whitekingside.setBackground(new java.awt.Color(255, 255, 255));
        Whitekingside.setForeground(new java.awt.Color(0, 0, 0));
        Whitekingside.setText("WO-O");
        Whitekingside.setToolTipText("Biała roszada krótka");
        Whitekingside.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WhitekingsideActionPerformed(evt);
            }
        });

        Blackkingside.setBackground(new java.awt.Color(0, 0, 0));
        Blackkingside.setForeground(new java.awt.Color(255, 255, 255));
        Blackkingside.setText("BO-O");
        Blackkingside.setToolTipText("Czarna roszada krótka");
        Blackkingside.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlackkingsideActionPerformed(evt);
            }
        });

        Blackqueenside.setBackground(new java.awt.Color(0, 0, 0));
        Blackqueenside.setForeground(new java.awt.Color(255, 255, 255));
        Blackqueenside.setText("BO-O-O");
        Blackqueenside.setToolTipText("Czarna roszada długa");
        Blackqueenside.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlackqueensideActionPerformed(evt);
            }
        });

        Whitequeenside.setBackground(new java.awt.Color(255, 255, 255));
        Whitequeenside.setForeground(new java.awt.Color(0, 0, 0));
        Whitequeenside.setText("WO-O-O");
        Whitequeenside.setToolTipText("Biała roszada długa");
        Whitequeenside.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WhitequeensideActionPerformed(evt);
            }
        });

        jLabel20.setText("Bicie w przelocie");

        przelotowe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Niedostępne" }));
        przelotowe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                przelotoweActionPerformed(evt);
            }
        });

        pionRB.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        pionRB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bpawn005.png"))); // NOI18N
        pionRB.setText("0");
        pionRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pionRBActionPerformed(evt);
            }
        });

        skoczekRB.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        skoczekRB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bknight5.png"))); // NOI18N
        skoczekRB.setText("0");
        skoczekRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skoczekRBActionPerformed(evt);
            }
        });

        goniecRB.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        goniecRB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bbishop5.png"))); // NOI18N
        goniecRB.setText("0");
        goniecRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goniecRBActionPerformed(evt);
            }
        });

        wiezaRB.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        wiezaRB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Brook005.png"))); // NOI18N
        wiezaRB.setText("0");
        wiezaRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wiezaRBActionPerformed(evt);
            }
        });

        hetmanRB.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        hetmanRB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Bqueen05.png"))); // NOI18N
        hetmanRB.setText("0");
        hetmanRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hetmanRBActionPerformed(evt);
            }
        });

        pionRW.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        pionRW.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wpawn005.png"))); // NOI18N
        pionRW.setText("0");
        pionRW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pionRWActionPerformed(evt);
            }
        });

        skoczekRW.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        skoczekRW.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wknight5.png"))); // NOI18N
        skoczekRW.setText("0");
        skoczekRW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skoczekRWActionPerformed(evt);
            }
        });

        goniecRW.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        goniecRW.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wbishop5.png"))); // NOI18N
        goniecRW.setText("0");
        goniecRW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goniecRWActionPerformed(evt);
            }
        });

        hetmanRW.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        hetmanRW.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wqueen05.png"))); // NOI18N
        hetmanRW.setText("0");
        hetmanRW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hetmanRWActionPerformed(evt);
            }
        });

        wiezaRW.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        wiezaRW.setIcon(new javax.swing.ImageIcon(getClass().getResource("/szachy/Wrook005.png"))); // NOI18N
        wiezaRW.setText("0");
        wiezaRW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wiezaRWActionPerformed(evt);
            }
        });

        Menu_gry_glowne.setText("Gra");

        menu_gry.setText("Nowa gra Stacjonarna");

        menu_newgame_notime.setText("Graj z innym graczem bez czasu");
        menu_newgame_notime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_newgame_notimeActionPerformed(evt);
            }
        });
        menu_gry.add(menu_newgame_notime);

        menu_gameSIW.setText("Graj z SI jako biały");
        menu_gameSIW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_gameSIWActionPerformed(evt);
            }
        });
        menu_gry.add(menu_gameSIW);

        menu_SIB.setText("Graj z SI jako czarny");
        menu_SIB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_SIBActionPerformed(evt);
            }
        });
        menu_gry.add(menu_SIB);

        Menu_new_game_time.setText("Graj z innym graczem na czas");

        jMenuItem3.setText("Klasyczne systemy");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        Menu_new_game_time.add(jMenuItem3);

        TSzachMaty.setText("Czas na myślenie+czas na ruch");
        TSzachMaty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TSzachMatyActionPerformed(evt);
            }
        });
        Menu_new_game_time.add(TSzachMaty);

        menu_gry.add(Menu_new_game_time);

        Menu_gry_glowne.add(menu_gry);

        menu_odmian.setText("Nowa gra w odmianę");

        OPakoSako.setText("Pako-Sako");
        OPakoSako.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPakoSakoActionPerformed(evt);
            }
        });
        menu_odmian.add(OPakoSako);

        OAmazonka.setText("Amazonka");
        OAmazonka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OAmazonkaActionPerformed(evt);
            }
        });
        menu_odmian.add(OAmazonka);

        OGrabiez.setText("Grabież");
        OGrabiez.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OGrabiezActionPerformed(evt);
            }
        });
        menu_odmian.add(OGrabiez);

        OAntyszachy.setText("Antyszachy");
        OAntyszachy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OAntyszachyActionPerformed(evt);
            }
        });
        menu_odmian.add(OAntyszachy);

        OMgla.setText("Mgliste szachy");
        OMgla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OMglaActionPerformed(evt);
            }
        });
        menu_odmian.add(OMgla);

        ODom_Szalenstwa.setText("Dom szaleństwa");
        ODom_Szalenstwa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ODom_SzalenstwaActionPerformed(evt);
            }
        });
        menu_odmian.add(ODom_Szalenstwa);

        Menu_gry_glowne.add(menu_odmian);

        menu_online.setText("Nowa gra online");

        Menu_onlineC.setText("Stwórz grę");
        Menu_onlineC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_onlineCActionPerformed(evt);
            }
        });
        menu_online.add(Menu_onlineC);

        menu_onlineJ.setText("Dołącz do gry");
        menu_onlineJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_onlineJActionPerformed(evt);
            }
        });
        menu_online.add(menu_onlineJ);

        Menu_gry_glowne.add(menu_online);

        menu_set.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_set.setText("Ustaw pozycję");
        menu_set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_setActionPerformed(evt);
            }
        });
        Menu_gry_glowne.add(menu_set);

        menu_load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_load.setText("Wczytaj odłożoną grę");
        menu_load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_loadActionPerformed(evt);
            }
        });
        Menu_gry_glowne.add(menu_load);

        jMenuBar1.add(Menu_gry_glowne);

        Design.setText("zmień styl");

        plansza1.setText("zmie styl szachownicy");

        buttonGroup5.add(whiteandblackboard1);
        whiteandblackboard1.setText("biało czarny");
        whiteandblackboard1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteandblackboard1ActionPerformed(evt);
            }
        });
        plansza1.add(whiteandblackboard1);

        buttonGroup5.add(blueandredboard1);
        blueandredboard1.setText("niebiesko czerwony");
        blueandredboard1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueandredboard1ActionPerformed(evt);
            }
        });
        plansza1.add(blueandredboard1);

        buttonGroup5.add(brownboard);
        brownboard.setText("jasny/ciemny brąz");
        brownboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brownboardActionPerformed(evt);
            }
        });
        plansza1.add(brownboard);

        Wlasne_kolor_jasne1.setText("Własny kolor jasnych pól");
        Wlasne_kolor_jasne1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Wlasne_kolor_jasne1ActionPerformed(evt);
            }
        });
        plansza1.add(Wlasne_kolor_jasne1);

        Wlasne_kolor_ciemne1.setText("Własny kolor ciemnych pól");
        Wlasne_kolor_ciemne1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Wlasne_kolor_ciemne1ActionPerformed(evt);
            }
        });
        plansza1.add(Wlasne_kolor_ciemne1);

        Design.add(plansza1);

        kolor1.setText("zmień kolor figur");

        buttonGroup4.add(whiteandblackfigury1);
        whiteandblackfigury1.setText("Biało czarni");
        whiteandblackfigury1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteandblackfigury1ActionPerformed(evt);
            }
        });
        kolor1.add(whiteandblackfigury1);

        buttonGroup4.add(blueandredfigury1);
        blueandredfigury1.setText("niebiescy czerwoni");
        blueandredfigury1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueandredfigury1ActionPerformed(evt);
            }
        });
        kolor1.add(blueandredfigury1);

        Design.add(kolor1);

        kroj1.setText("zmien styl figur");

        buttonGroup1.add(alfastyl1);
        alfastyl1.setText("Alfa");
        alfastyl1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alfastyl1ActionPerformed(evt);
            }
        });
        kroj1.add(alfastyl1);

        buttonGroup1.add(klasykstyl1);
        klasykstyl1.setText("Klasyk");
        klasykstyl1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                klasykstyl1ActionPerformed(evt);
            }
        });
        kroj1.add(klasykstyl1);

        buttonGroup1.add(oldschool1);
        oldschool1.setText("Stara szkoła");
        oldschool1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oldschool1ActionPerformed(evt);
            }
        });
        kroj1.add(oldschool1);

        Design.add(kroj1);

        Ramowka1.setText("Zmiana obramowania pól");
        Ramowka1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ramowka1ActionPerformed(evt);
            }
        });
        Design.add(Ramowka1);

        jMenuBar1.add(Design);

        Wydruk.setText("Drukuj");
        Wydruk.setEnabled(false);

        druk_odpis.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        druk_odpis.setText("Drukuj pozycje z odpisem");
        druk_odpis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                druk_odpisActionPerformed(evt);
            }
        });
        Wydruk.add(druk_odpis);

        druk_pozycja.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        druk_pozycja.setText("Drukuj pozycję");
        druk_pozycja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                druk_pozycjaActionPerformed(evt);
            }
        });
        Wydruk.add(druk_pozycja);

        druk_obrocony.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        druk_obrocony.setText("Drukuj zależnie od strony na ruchu");
        druk_obrocony.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                druk_obroconyActionPerformed(evt);
            }
        });
        Wydruk.add(druk_obrocony);

        jMenuBar1.add(Wydruk);

        mazyna_losujaca.setText("Losuj Pozycje");
        mazyna_losujaca.setEnabled(false);

        losowanko.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        losowanko.setText("Losuj pozycję od teraz");
        losowanko.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                losowankoActionPerformed(evt);
            }
        });
        mazyna_losujaca.add(losowanko);

        jMenuBar1.add(mazyna_losujaca);

        kombinacja.setText("Szukaj brakujacej kombinacji");

        kombwe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        kombwe.setText("Zapisz pozycje wejścia");
        kombwe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kombweActionPerformed(evt);
            }
        });
        kombinacja.add(kombwe);

        kombwy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        kombwy.setText("Zapisz pozycję wyjścia");
        kombwy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kombwyActionPerformed(evt);
            }
        });
        kombinacja.add(kombwy);

        kombstart.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        kombstart.setText("Szukaj Kombinacji");
        kombstart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kombstartActionPerformed(evt);
            }
        });
        kombinacja.add(kombstart);

        jMenuBar1.add(kombinacja);

        Nauka.setText("Tryb nauki");
        Nauka.setToolTipText("");

        jMenuItem4.setText("Ćwicz debiuty");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        Nauka.add(jMenuItem4);

        jMenuBar1.add(Nauka);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(A8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(B8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(C8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(D8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(E8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(F8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(G8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(H8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(A7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(B7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(C7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(D7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(E7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(F7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(G7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(H7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(A5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(B5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(C5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(D5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(E5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(A6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(B6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(C6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(D6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(E6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(F5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(G5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(H5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(F6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(G6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(H6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(A3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(B3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(C3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(D3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(E3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(A4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(B4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(C4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(D4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(E4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(F4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(G4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(H4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(F3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(G3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(H3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pionRB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(skoczekRB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(goniecRB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wiezaRB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hetmanRB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(D1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(E1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(A2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(B2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(C2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(D2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(E2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(F1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(G1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(H1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(F2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(G2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(H2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(ustawWK, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ustawWQ, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ustawWR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ustawWN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ustawWP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ustawWB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(ustawBQ, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(ustawBR, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(ustawBB, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(ustawBN, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                                .addComponent(ustawBP, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(ustawBK, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(zegarczarne)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Whitekingside)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Whitequeenside))
                                            .addComponent(bialeRuch))
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Blackqueenside)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Blackkingside))
                                            .addComponent(czarneRuch)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel20)
                                        .addGap(43, 43, 43)
                                        .addComponent(przelotowe, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton72, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(zegarbiale, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pionRW, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(skoczekRW, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(goniecRW, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wiezaRW, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(hetmanRW, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel1)
                                .addGap(69, 69, 69)
                                .addComponent(jLabel2)
                                .addGap(71, 71, 71)
                                .addComponent(jLabel3)
                                .addGap(72, 72, 72)
                                .addComponent(jLabel4)
                                .addGap(67, 67, 67)
                                .addComponent(jLabel5)
                                .addGap(71, 71, 71)
                                .addComponent(jLabel6)
                                .addGap(72, 72, 72)
                                .addComponent(jLabel7)
                                .addGap(67, 67, 67)
                                .addComponent(jLabel8)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(89, 89, 89))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel13)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(obrotowy, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jCheckBox1))
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(resetgame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGap(38, 38, 38))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(poddanie, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(remis_odrzut, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(remis_prop, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                                .addComponent(remis_zgoda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButton81))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(Przycisk_help, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(SIOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2)))
                                .addContainerGap(12, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(partia_odlozona, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(116, 116, 116))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton81, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SIOnOff)
                    .addComponent(Przycisk_help))
                .addGap(1, 1, 1)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(obrotowy)
                    .addComponent(jCheckBox1))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetgame)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(remis_odrzut, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(poddanie, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(remis_zgoda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remis_prop)))
                .addGap(41, 41, 41)
                .addComponent(partia_odlozona)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(zegarczarne)
                        .addComponent(pionRB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(skoczekRB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(goniecRB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(wiezaRB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hetmanRB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ustawWP, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ustawBP, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ustawWN, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ustawBN, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ustawWB, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ustawBB, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ustawWR, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ustawBR, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ustawWQ, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ustawBQ, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ustawWK, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ustawBK, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jRadioButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(czarneRuch)
                            .addComponent(bialeRuch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Whitekingside)
                                .addComponent(Whitequeenside))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Blackqueenside)
                                .addComponent(Blackkingside)))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(przelotowe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton72)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(H8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(G8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(F8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(E8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(D8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(C8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(B8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(A8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(H7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(G7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(F7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(E7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(D7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(C7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(B7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(A7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(jLabel15)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(H6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(G6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(F6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(H5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(G5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(F5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(E6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(D6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(C6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(B6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(A6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addComponent(jLabel16)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(E5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(D5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(C5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(B5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(A5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(32, 32, 32)
                                                .addComponent(jLabel17)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(E4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(D4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(C4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(B4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(A4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addComponent(jLabel18)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(E3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(D3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(C3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(B3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(A3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(33, 33, 33)
                                                .addComponent(jLabel19))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(H4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(G4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(F4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(H3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(G3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(F3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(jLabel11)
                                        .addGap(58, 58, 58)
                                        .addComponent(jLabel10))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(E2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(D2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(C2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(B2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(A2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(H2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(G2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(F2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(E1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(D1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(H1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(G1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(F1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(50, 50, 50)
                                                .addComponent(zegarbiale)))
                                        .addGap(3, 3, 3)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel1)
                                                .addComponent(jLabel2))
                                            .addComponent(jLabel3)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel5))
                                            .addComponent(jLabel6)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel7)
                                                .addComponent(jLabel8)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(pionRW, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(skoczekRW, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(goniecRW, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(wiezaRW, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(hetmanRW, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel14)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        czarneRuch.getAccessibleContext().setAccessibleName("RadioButton9");
        bialeRuch.getAccessibleContext().setAccessibleName("RadioButton10");
        ustawWP.getAccessibleContext().setAccessibleName("jRadioButton16");
        ustawBP.getAccessibleContext().setAccessibleName("jRadioButton17");
        ustawWN.getAccessibleContext().setAccessibleName("jRadioButton18");
        ustawBN.getAccessibleContext().setAccessibleName("jRadioButton19");
        ustawWB.getAccessibleContext().setAccessibleName("jRadioButton20");
        ustawBB.getAccessibleContext().setAccessibleName("jRadioButton21");
        ustawWR.getAccessibleContext().setAccessibleName("jRadioButton22");
        ustawBR.getAccessibleContext().setAccessibleName("jRadioButton23");
        ustawWQ.getAccessibleContext().setAccessibleName("jRadioButton24");
        ustawBQ.getAccessibleContext().setAccessibleName("jRadioButton25");
        ustawWK.getAccessibleContext().setAccessibleName("jRadioButton26");
        ustawBK.getAccessibleContext().setAccessibleName("jRadioButton27");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void D7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D7ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_D7ActionPerformed

    private void A8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A8ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_A8ActionPerformed

    private void B8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B8ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_B8ActionPerformed

    private void C8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C8ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_C8ActionPerformed

    private void D8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D8ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_D8ActionPerformed

    private void E8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_E8ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_E8ActionPerformed

    private void F8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_F8ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_F8ActionPerformed

    private void G8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_G8ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_G8ActionPerformed

    private void H8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_H8ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_H8ActionPerformed

    private void A7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A7ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_A7ActionPerformed

    private void B7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B7ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_B7ActionPerformed

    private void C7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C7ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_C7ActionPerformed

    private void E7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_E7ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_E7ActionPerformed

    private void F7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_F7ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_F7ActionPerformed

    private void G7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_G7ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_G7ActionPerformed

    private void H7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_H7ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_H7ActionPerformed

    private void A6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A6ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_A6ActionPerformed

    private void B6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B6ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_B6ActionPerformed

    private void C6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C6ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_C6ActionPerformed

    private void D6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D6ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_D6ActionPerformed

    private void E6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_E6ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_E6ActionPerformed

    private void F6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_F6ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_F6ActionPerformed

    private void G6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_G6ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_G6ActionPerformed

    private void H6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_H6ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_H6ActionPerformed

    private void H5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_H5ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_H5ActionPerformed

    private void G5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_G5ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_G5ActionPerformed

    private void F5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_F5ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_F5ActionPerformed

    private void E5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_E5ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_E5ActionPerformed

    private void D5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D5ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_D5ActionPerformed

    private void C5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C5ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_C5ActionPerformed

    private void B5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B5ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_B5ActionPerformed

    private void A5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A5ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_A5ActionPerformed

    private void A4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A4ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_A4ActionPerformed

    private void B4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B4ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_B4ActionPerformed

    private void C4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C4ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_C4ActionPerformed

    private void D4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D4ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_D4ActionPerformed

    private void E4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_E4ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_E4ActionPerformed

    private void F4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_F4ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_F4ActionPerformed

    private void G4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_G4ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_G4ActionPerformed

    private void H4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_H4ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_H4ActionPerformed

    private void H3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_H3ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_H3ActionPerformed

    private void G3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_G3ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_G3ActionPerformed

    private void F3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_F3ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_F3ActionPerformed

    private void E3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_E3ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_E3ActionPerformed

    private void D3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D3ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_D3ActionPerformed

    private void C3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C3ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_C3ActionPerformed

    private void B3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B3ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_B3ActionPerformed

    private void A3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A3ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_A3ActionPerformed

    private void A2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A2ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_A2ActionPerformed

    private void B2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B2ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_B2ActionPerformed

    private void C2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C2ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_C2ActionPerformed

    private void D2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D2ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_D2ActionPerformed

    private void E2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_E2ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_E2ActionPerformed

    private void F2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_F2ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_F2ActionPerformed

    private void G2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_G2ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_G2ActionPerformed

    private void H2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_H2ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_H2ActionPerformed

    private void H1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_H1ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_H1ActionPerformed

    private void G1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_G1ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_G1ActionPerformed

    private void F1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_F1ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_F1ActionPerformed

    private void E1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_E1ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_E1ActionPerformed

    private void D1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D1ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_D1ActionPerformed

    private void C1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C1ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_C1ActionPerformed

    private void B1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B1ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_B1ActionPerformed

    private void A1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A1ActionPerformed
        if (!nauka_gry) {
            switch (tryb) {
                case 3:
                    Rusz_przytul(evt.getSource());
                    break;
                case 5:
                    ruch_grabiezy(evt.getSource());
                    break;
                case 6:
                    antyszach(evt.getSource());
                    break;
                case 7:
                    mgla(evt.getSource());
                    break;
                case 8:
                    dostawianka(evt.getSource());
                    break;
                default:
                    Button_Clicked(evt.getSource());
                    break;
            }
        } else {
            ruch_nauki(evt.getSource());
        }
    }//GEN-LAST:event_A1ActionPerformed

    private void poddanieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poddanieActionPerformed
        if (!nauka_gry) {
            if (siec) {
                try {
                    msgwy = "poddaje sie. wygraleś";
                    out.writeUTF(msgwy);
                    jTextArea2.setText(jTextArea2.getText().trim() + "\n ja: " + msgwy + "\n");
                    jTextField1.setText("");
                } catch (IOException ignored) {
                }
            }
            losowanko.setEnabled(false);
            kapitulacja();
        } else {
            if (!nauka_praktyczna) {
                for (int i = 1; i <= 8; i++) {
                    for (char j = 'A'; j <= 'H'; j++) {
                        dobierzprzycisk(String.valueOf(j + "" + i), false).setEnabled(false);
                    }
                }
                whitemove = 0;
                blackmove = 0;
                movenr = 1;
                jTextArea2.setText("");
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        switch (i) {
                            case 0:
                                switch (j) {
                                    case 0:
                                    case 7:
                                        ust[i][j] = 'R';
                                        odwrotna[i][j] = 'r';
                                        break;
                                    case 1:
                                    case 6:
                                        ust[i][j] = 'N';
                                        odwrotna[i][j] = 'n';
                                        break;
                                    case 5:
                                    case 2:
                                        ust[i][j] = 'B';
                                        odwrotna[i][j] = 'b';
                                        break;
                                    case 3:
                                        ust[i][j] = 'Q';
                                        odwrotna[i][j] = 'k';
                                        break;
                                    case 4:
                                        ust[i][j] = 'K';
                                        odwrotna[i][j] = 'q';
                                        break;
                                }
                                break;
                            case 1:
                                ust[i][j] = 'P';
                                odwrotna[i][j] = 'p';
                                break;
                            case 7:
                                switch (j) {
                                    case 0:
                                    case 7:
                                        ust[i][j] = 'r';
                                        odwrotna[i][j] = 'R';
                                        break;
                                    case 1:
                                    case 6:
                                        ust[i][j] = 'n';
                                        odwrotna[i][j] = 'N';
                                        break;
                                    case 5:
                                    case 2:
                                        ust[i][j] = 'b';
                                        odwrotna[i][j] = 'B';
                                        break;
                                    case 3:
                                        ust[i][j] = 'q';
                                        odwrotna[i][j] = 'K';
                                        break;
                                    case 4:
                                        ust[i][j] = 'k';
                                        odwrotna[i][j] = 'Q';
                                        break;
                                }
                                break;
                            case 6:
                                ust[i][j] = 'p';
                                odwrotna[i][j] = 'P';
                                break;
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                ust[i][j] = ' ';
                        }
                    }
                }
                styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                wzor = false;
                debiut_nauka.setVisible(true);
                debiut_nauka.trening.removeAll(debiut_nauka.trening);
            } else {
                debiut_nauka.bledy.set(ruchB ? (movenr - 1) * 2 : (movenr - 1) * 2 + 1, false);
                dobierzprzycisk(debiut_nauka.trening.get(ruchB ? (movenr - 1) * 2 : (movenr - 1) * 2 + 1).substring(1, 3), false)
                        .setBorder(new LineBorder(pomoc_ruch, 4));
                dobierzprzycisk(debiut_nauka.trening.get(ruchB ? (movenr - 1) * 2 : (movenr - 1) * 2 + 1).substring(4, 6), false)
                        .setBorder(new LineBorder(pomoc_ruch, 4));
            }
        }
    }//GEN-LAST:event_poddanieActionPerformed

    private void remis_propActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remis_propActionPerformed
        if (!nauka_gry) {
            remis_prop.setEnabled(false);
            remis_zgoda.setEnabled(true);
            remis_odrzut.setEnabled(true);
            if (siec) {
                remis_zgoda.setEnabled(false);
                remis_odrzut.setEnabled(false);
                try {
                    msgwy = "remis?";
                    out.writeUTF(msgwy);
                    jTextArea2.setText(jTextArea2.getText().trim() + "\n ja: " + msgwy + "\n");
                    jTextField1.setText("");
                } catch (IOException ignored) {
                }
            }
        } else {
            if (!nauka_praktyczna) {
                Object[] opcje = {"Trenuj białymi", "Trenuj czarnymi", "Trenuj dwoma kolorami", "Anuluj"};
                wybor_treningu = JOptionPane.showOptionDialog(rootPane, "Wybierz opcje treningu", "Trening debiutu",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcje, null);
                if (wybor_treningu < 3) {
                    ruchB = true;
                    if (wybor_treningu == 1) {
                        wzor = true;
                        aktywuj(odwrot, debiut_nauka.trening.get(0).substring(1, 3));
                        aktywuj(odwrot, debiut_nauka.trening.get(0).substring(4, 6));
                    }
                    movenr = 1;
                    jTextArea2.setText("");
                    for (int i = 0; i < 8; i++) {
                        for (int j = 0; j < 8; j++) {
                            switch (i) {
                                case 0:
                                    switch (j) {
                                        case 0:
                                        case 7:
                                            ust[i][j] = 'R';
                                            odwrotna[i][j] = 'r';
                                            break;
                                        case 1:
                                        case 6:
                                            ust[i][j] = 'N';
                                            odwrotna[i][j] = 'n';
                                            break;
                                        case 5:
                                        case 2:
                                            ust[i][j] = 'B';
                                            odwrotna[i][j] = 'b';
                                            break;
                                        case 3:
                                            ust[i][j] = 'Q';
                                            odwrotna[i][j] = 'k';
                                            break;
                                        case 4:
                                            ust[i][j] = 'K';
                                            odwrotna[i][j] = 'q';
                                            break;
                                    }
                                    break;
                                case 1:
                                    ust[i][j] = 'P';
                                    odwrotna[i][j] = 'p';
                                    break;
                                case 7:
                                    switch (j) {
                                        case 0:
                                        case 7:
                                            ust[i][j] = 'r';
                                            odwrotna[i][j] = 'R';
                                            break;
                                        case 1:
                                        case 6:
                                            ust[i][j] = 'n';
                                            odwrotna[i][j] = 'N';
                                            break;
                                        case 5:
                                        case 2:
                                            ust[i][j] = 'b';
                                            odwrotna[i][j] = 'B';
                                            break;
                                        case 3:
                                            ust[i][j] = 'q';
                                            odwrotna[i][j] = 'K';
                                            break;
                                        case 4:
                                            ust[i][j] = 'k';
                                            odwrotna[i][j] = 'Q';
                                            break;
                                    }
                                    break;
                                case 6:
                                    ust[i][j] = 'p';
                                    odwrotna[i][j] = 'P';
                                    break;
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    ust[i][j] = ' ';
                            }
                        }
                    }
                    styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                    wzor = false;
                    remis_prop.setText("Anuluj");
                    poddanie.setText("Podpowiedż");
                    nauka_praktyczna = true;
                    remis_odrzut.setVisible(false);
                    remis_zgoda.setVisible(false);
                }
            } else {
                for (int i = 0; i < debiut_nauka.bledy.size(); i++) {
                    debiut_nauka.bledy.set(i, true);
                }
                remis_odrzut.setVisible(false);
                remis_zgoda.setVisible(false);
            }
        }
    }//GEN-LAST:event_remis_propActionPerformed

    private void remis_odrzutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remis_odrzutActionPerformed
        if (!nauka_gry) {
            remis_prop.setEnabled(true);
            remis_zgoda.setEnabled(false);
            remis_odrzut.setEnabled(false);
            if (siec) {
                try {
                    msgwy = "Gramy dalej";
                    out.writeUTF(msgwy);
                    jTextArea2.setText(jTextArea2.getText().trim() + "\n ja: " + msgwy + "\n");
                    jTextField1.setText("");
                } catch (IOException ignored) {
                }
            }
        } else {
            wzor = true;
            if (!(whitemove == 0 && blackmove == 0)) {
                int index = blackmove * 2 + (whitemove == blackmove ? 0 : 1);
                jTextArea2.setText("");
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        switch (i) {
                            case 0:
                                switch (j) {
                                    case 0:
                                    case 7:
                                        ust[i][j] = 'R';
                                        odwrotna[i][j] = 'r';
                                        break;
                                    case 1:
                                    case 6:
                                        ust[i][j] = 'N';
                                        odwrotna[i][j] = 'n';
                                        break;
                                    case 5:
                                    case 2:
                                        ust[i][j] = 'B';
                                        odwrotna[i][j] = 'b';
                                        break;
                                    case 3:
                                        ust[i][j] = 'Q';
                                        odwrotna[i][j] = 'k';
                                        break;
                                    case 4:
                                        ust[i][j] = 'K';
                                        odwrotna[i][j] = 'q';
                                        break;
                                }
                                break;
                            case 1:
                                ust[i][j] = 'P';
                                odwrotna[i][j] = 'p';
                                break;
                            case 7:
                                switch (j) {
                                    case 0:
                                    case 7:
                                        ust[i][j] = 'r';
                                        odwrotna[i][j] = 'R';
                                        break;
                                    case 1:
                                    case 6:
                                        ust[i][j] = 'n';
                                        odwrotna[i][j] = 'N';
                                        break;
                                    case 5:
                                    case 2:
                                        ust[i][j] = 'b';
                                        odwrotna[i][j] = 'B';
                                        break;
                                    case 3:
                                        ust[i][j] = 'q';
                                        odwrotna[i][j] = 'K';
                                        break;
                                    case 4:
                                        ust[i][j] = 'k';
                                        odwrotna[i][j] = 'Q';
                                        break;
                                }
                                break;
                            case 6:
                                ust[i][j] = 'p';
                                odwrotna[i][j] = 'P';
                                break;
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                ust[i][j] = ' ';
                        }
                    }
                }
                for (int i = 0; i < index - 1; i++) {
                    ruch_nauki(dobierzprzycisk(debiut_nauka.trening.get(i).substring(1, 3), false));
                    ruch_nauki(dobierzprzycisk(debiut_nauka.trening.get(i).substring(4, 6), false));
                    if (i % 2 == 0) {
                        jTextArea2.append(debiut_nauka.trening.get(i) + "  ");
                    } else {
                        jTextArea2.append(debiut_nauka.trening.get(i) + "\n");
                    }

                }

                if (blackmove == whitemove) {
                    blackmove--;
                } else {
                    whitemove--;
                }
                if ((whitemove == 0 && blackmove == 0)) {
                    remis_odrzut.setEnabled(false);
                    for (int i = 0; i < 8; i++) {
                        for (int j = 0; j < 8; j++) {
                            switch (i) {
                                case 0:
                                    switch (j) {
                                        case 0:
                                        case 7:
                                            ust[i][j] = 'R';
                                            odwrotna[i][j] = 'r';
                                            break;
                                        case 1:
                                        case 6:
                                            ust[i][j] = 'N';
                                            odwrotna[i][j] = 'n';
                                            break;
                                        case 5:
                                        case 2:
                                            ust[i][j] = 'B';
                                            odwrotna[i][j] = 'b';
                                            break;
                                        case 3:
                                            ust[i][j] = 'Q';
                                            odwrotna[i][j] = 'k';
                                            break;
                                        case 4:
                                            ust[i][j] = 'K';
                                            odwrotna[i][j] = 'q';
                                            break;
                                    }
                                    break;
                                case 1:
                                    ust[i][j] = 'P';
                                    odwrotna[i][j] = 'p';
                                    break;
                                case 7:
                                    switch (j) {
                                        case 0:
                                        case 7:
                                            ust[i][j] = 'r';
                                            odwrotna[i][j] = 'R';
                                            break;
                                        case 1:
                                        case 6:
                                            ust[i][j] = 'n';
                                            odwrotna[i][j] = 'N';
                                            break;
                                        case 5:
                                        case 2:
                                            ust[i][j] = 'b';
                                            odwrotna[i][j] = 'B';
                                            break;
                                        case 3:
                                            ust[i][j] = 'q';
                                            odwrotna[i][j] = 'K';
                                            break;
                                        case 4:
                                            ust[i][j] = 'k';
                                            odwrotna[i][j] = 'Q';
                                            break;
                                    }
                                    break;
                                case 6:
                                    ust[i][j] = 'p';
                                    odwrotna[i][j] = 'P';
                                    break;
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    ust[i][j] = ' ';
                            }
                        }
                    }
                    styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                }
                remis_zgoda.setEnabled(true);
            }

        }
    }//GEN-LAST:event_remis_odrzutActionPerformed

    private void remis_zgodaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remis_zgodaActionPerformed
        if (!nauka_gry) {
            losowanko.setEnabled(false);
            remis();
        } else {
            if (whitemove == 0 && blackmove == 0) {
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        switch (i) {
                            case 0:
                                switch (j) {
                                    case 0:
                                    case 7:
                                        ust[i][j] = 'R';
                                        odwrotna[i][j] = 'r';
                                        break;
                                    case 1:
                                    case 6:
                                        ust[i][j] = 'N';
                                        odwrotna[i][j] = 'n';
                                        break;
                                    case 5:
                                    case 2:
                                        ust[i][j] = 'B';
                                        odwrotna[i][j] = 'b';
                                        break;
                                    case 3:
                                        ust[i][j] = 'Q';
                                        odwrotna[i][j] = 'k';
                                        break;
                                    case 4:
                                        ust[i][j] = 'K';
                                        odwrotna[i][j] = 'q';
                                        break;
                                }
                                break;
                            case 1:
                                ust[i][j] = 'P';
                                odwrotna[i][j] = 'p';
                                break;
                            case 7:
                                switch (j) {
                                    case 0:
                                    case 7:
                                        ust[i][j] = 'r';
                                        odwrotna[i][j] = 'R';
                                        break;
                                    case 1:
                                    case 6:
                                        ust[i][j] = 'n';
                                        odwrotna[i][j] = 'N';
                                        break;
                                    case 5:
                                    case 2:
                                        ust[i][j] = 'b';
                                        odwrotna[i][j] = 'B';
                                        break;
                                    case 3:
                                        ust[i][j] = 'q';
                                        odwrotna[i][j] = 'K';
                                        break;
                                    case 4:
                                        ust[i][j] = 'k';
                                        odwrotna[i][j] = 'Q';
                                        break;
                                }
                                break;
                            case 6:
                                ust[i][j] = 'p';
                                odwrotna[i][j] = 'P';
                                break;
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                ust[i][j] = ' ';
                        }
                    }
                }
            }
            wzor = true;
            int index = blackmove * 2 + (whitemove == blackmove ? 0 : 1);
            if (whitemove == blackmove) {
                jTextArea2.append(debiut_nauka.trening.get(index) + "   ");
            } else {
                jTextArea2.append(debiut_nauka.trening.get(index) + "\n");
            }
            if (blackmove != whitemove) {
                blackmove++;
            } else {
                whitemove++;
            }
            dobierzprzycisk(debiut_nauka.trening.get(index).substring(1, 3), false).doClick();
            dobierzprzycisk(debiut_nauka.trening.get(index).substring(4, 6), false).doClick();
            if (index + 1 == debiut_nauka.trening.size()) {
                remis_zgoda.setEnabled(false);
            }
            remis_odrzut.setEnabled(true);
        }
    }//GEN-LAST:event_remis_zgodaActionPerformed

    private void jButton72ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton72ActionPerformed
        for (int i = 0; i < 8; i++) {
            System.arraycopy(ust[i], 0, pozycja_ustawki[i], 0, 8);
        }
        if ((pionB > 0 || pionC > 0 || lekkieB > 1 || lekkieC > 1 || ciezkieB > 0 || ciezkieC > 0)) {
            if (krole_biale == 1 && krole_czarne == 1 && (czarneRuch.isSelected() || bialeRuch.isSelected())) {
                szachB = RuchZagrozenie_kontrola.szach(ust.clone(), true);
                szachC = RuchZagrozenie_kontrola.szach(ust.clone(), false);
                if (szachB && szachC) {
                    JOptionPane.showMessageDialog(rootPane, "NIE MOŻE BYĆ SZACH PO OBU STRONACH", "ZŁA POZYCJA",
                            JOptionPane.WARNING_MESSAGE);
                } else {
                    if ((czarneRuch.isSelected() && szachB) || (bialeRuch.isSelected() && szachC)) {
                        JOptionPane.showMessageDialog(rootPane, "NIE MOŻNA WYKONYWAĆ RUCHU GDY DRUGI KRÓL JEST W SZACHU", "ZŁA POZYCJA",
                                JOptionPane.WARNING_MESSAGE);
                    } else {
                        przelotcan = przelotowe.getSelectedIndex() > 0;
                        char[][] USTAWIENIE1;
                        USTAWIENIE1 = ust.clone();
                        kontrolamat = ust.clone();
                        if (przelotowe.getSelectedIndex() > 0) {
                            kol = ((przelotowe.getSelectedItem().toString().charAt(przelotowe.getSelectedItem().toString().length() - 1)) - 'A') + 1;
                            System.out.println(kol);
                        }
                        for (byte i = 0; i < 8; i++) {
                            for (byte j = 0; j < 8; j++) {
                                if ((ruchB && kontrolamat[i][j] == 'K') || (!ruchB && kontrolamat[i][j] == 'k')) {
                                    poza_krolewska[0] = i;
                                    poza_krolewska[1] = j;
                                }
                            }
                        }
                        if (RuchZagrozenie_kontrola.szach(ust.clone(), bialeRuch.isSelected())) {
                            klopoty = Wspomagacz.znajdzklopot(kontrolamat.clone(), bialeRuch.isSelected());
                            hodu = SzachMatPatKontrola.uciekaj(USTAWIENIE1.clone(), bialeRuch.isSelected(), poza_krolewska);
                            if (!hodu) {
                                char[][] backupzapas = USTAWIENIE1.clone();
                                hitme = SzachMatPatKontrola.znajdzodsiecz(backupzapas.clone(), bialeRuch.isSelected(), klopoty, kol, przelotcan);
                                if (!hitme) {
                                    protectme = SzachMatPatKontrola.zastaw(USTAWIENIE1.clone(), bialeRuch.isSelected(), klopoty, poza_krolewska, przelotcan);
                                }
                            }
                        }
                        krolS = false;
                        move = false;
                        char[][] temp = new char[8][8];
                        // System.out.println("wy");
                        for (int i = 0; i < 8; i++) {
                            System.arraycopy(ust[i], 0, temp[i], 0, 8);
                        }
                        for (int i = 0; i < 8; i++) {
                            for (int j = 0; j < 8; j++) {
                                if (ust[i][j] != ' ') {
                                    pole_baza[0] = j;
                                    pole_baza[1] = i;
                                    if (ust[i][j] == 'K' || ust[i][j] == 'k') {
                                        if ((ruchB && ust[i][j] == 'K') || (ruchB == false && ust[i][j] == 'k')) {
                                            pole_baza[0] = i;
                                            pole_baza[1] = j;
                                            hodu = SzachMatPatKontrola.uciekaj(temp, ruchB, pole_baza);
                                        }
                                    } else {
                                        move = SzachMatPatKontrola.znajdz_ruch(temp, ruchB, temp[i][j], pole_baza, przelotcan);
                                        if (move) {
                                            break;
                                        }
                                    }
                                }
                            }
                            if (move) {
                                break;
                            }
                        }
                        System.out.println("król " + (hodu == false));
                        System.out.println("ruch " + (move == false));
                        System.out.println("Pat " + (hodu == false && move == false));
                        if ((!hodu && !hitme && !protectme) || (!move && !hodu)) {
                            JOptionPane.showMessageDialog(rootPane, "NIE MOŻNA USTAWIĆ POZYCJI KOŃCOWEJ", "ZŁA POZYCJA",
                                    JOptionPane.WARNING_MESSAGE);
                        } else {
                            gra = true;
                            kingrochB = Whitekingside.isSelected() || Whitequeenside.isSelected();
                            kingrochC = Blackkingside.isSelected() || Blackqueenside.isSelected();
                            wleft = Whitequeenside.isSelected();
                            wright = Whitekingside.isSelected();
                            bleft = Blackqueenside.isSelected();
                            bright = Blackkingside.isSelected();
                            Wydruk.setEnabled(true);
                            jRadioButton11.setVisible(false);
                            jButton72.setVisible(false);
                            czarneRuch.setVisible(false);
                            bialeRuch.setVisible(false);
                            ustawWP.setVisible(false);
                            ustawBP.setVisible(false);
                            ustawWN.setVisible(false);
                            ustawBN.setVisible(false);
                            ustawWB.setVisible(false);
                            ustawBB.setVisible(false);
                            ustawWR.setVisible(false);
                            ustawBR.setVisible(false);
                            ustawWQ.setVisible(false);
                            ustawBQ.setVisible(false);
                            ustawWK.setVisible(false);
                            ustawBK.setVisible(false);
                            Menu_gry_glowne.setEnabled(false);
                            Blackkingside.setVisible(false);
                            Whitekingside.setVisible(false);
                            Blackqueenside.setVisible(false);
                            Whitequeenside.setVisible(false);
                            for (int i = 1; i <= 8; i++) {
                                for (char j = 'A'; j <= 'H'; j++) {
                                    dobierzprzycisk(String.valueOf(j + "" + i), false).setEnabled(true);
                                }
                            }
                            poddanie.setEnabled(true);
                            przelotowe.setVisible(false);
                            jLabel20.setVisible(false);
                            remis_prop.setEnabled(true);
                            pierwsza_kolej = ruchB;
                            zegarbiale.setText("--:--");
                            zegarczarne.setText("--:--");
                            Object[] opcje_rywala = {"Graj z innym graczem", "Graj z SI jako białe", "Graj z SI jako czarne"};
                            sztuczny_rywal = (byte) JOptionPane.showOptionDialog(rootPane, "Gra z SI?", "opcje SI", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcje_rywala, null);
                            JSlider suwak_trudnosci = new JSlider(1, 14, 1);
                            Hashtable<Integer, JLabel> Opisy = new Hashtable<>();
                            suwak_trudnosci.setOrientation(JSlider.VERTICAL);
                            suwak_trudnosci.setMinorTickSpacing(1);
                            Opisy.put(1, new JLabel("Nowicjusz"));
                            Opisy.put(2, new JLabel("Przeciętny"));
                            Opisy.put(4, new JLabel("Doświadczony"));
                            Opisy.put(6, new JLabel("Weteran"));
                            Opisy.put(8, new JLabel("Mistrz"));
                            Opisy.put(10, new JLabel("Kandydat na Arcymistrza"));
                            Opisy.put(12, new JLabel("Arcymistrz"));
                            Opisy.put(14, new JLabel("Wielki Arcymistrz"));
                            suwak_trudnosci.setLabelTable(Opisy);
                            suwak_trudnosci.setPaintTicks(true);
                            suwak_trudnosci.setPaintLabels(true);
                            switch (sztuczny_rywal) {
                                case 1:
                                    tura_rywala = false;
                                    obrotowy.setText("Obrót WYŁ");
                                    tryb = 0;
                                    SI_ON = true;
                                    odwrot = false;
                                    JOptionPane.showMessageDialog(null, suwak_trudnosci, "wybierz stopień trudności", JOptionPane.INFORMATION_MESSAGE);
                                    glebiaSI = (byte) (byte) suwak_trudnosci.getValue();
                                    break;
                                case 2:
                                    tura_rywala = true;
                                    obrotowy.setText("Obrót WYŁ");
                                    tryb = 0;
                                    SI_ON = true;
                                    odwrot = true;
                                    JOptionPane.showMessageDialog(null, suwak_trudnosci, "wybierz stopień trudności", JOptionPane.INFORMATION_MESSAGE);
                                    glebiaSI = (byte) (byte) suwak_trudnosci.getValue();
                                    break;
                                case 0:
                                default:
                                    obrotowy.setEnabled(true);
                                    obrotowy.setText("Obrót WŁ");
                                    odwrot = czarneRuch.isSelected();
                                    SI_ON = false;
                                    break;
                            }
                            if (!pierwsza_kolej) {

                                historia.add("...");
                            }
                            mazyna_losujaca.setEnabled(!SI_ON);
                            SIOnOff.setEnabled(true);
                            obrotowy.setVisible(!(SI_ON || siec));
                            kombinacja.setVisible(false);
                            kombinacja.setEnabled(false);
                            jTextArea3.append(ruchB ? "" : "1.     ...     ");
                            if (SI_ON && ((tura_rywala && bialeRuch.isSelected()) || (!tura_rywala && czarneRuch.isSelected()))) {
                                char[][] backup1 = ust.clone();
                                for (int i = 0; i < 8; i++) {
                                    for (int j = 0; j < 8; j++) {
                                        if (odwrot) {
                                            odwrotna[i][j] = ust[7 - i][7 - j];
                                        }
                                        // backup1[i][j] = ust[i][j];
                                        System.out.print("(" + backup1[i][j] + ")");
                                    }
                                    System.out.println();
                                }
                                styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                                SI_ma_ruch();
                            }
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "MUSI BYĆ PO OBU STRONACH 1 KRÓL. TRZEBA TEŻ USTALIĆ KTO ZACZYNA", "ZŁA POZYCJA",
                        JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "MATERIAŁ PO OBU STRONACH JEST NIE WYSTARCZAJĄCY DO MATA. REMIS", "ZŁA POZYCJA",
                    JOptionPane.WARNING_MESSAGE);
        }
        for (int i = 0; i < 8; i++) {
            System.arraycopy(pozycja_ustawki[i], 0, ust[i], 0, 8);
        }
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                System.out.print("[" + ust[i][j] + "]");
            }
            System.out.println();
        }
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_jButton72ActionPerformed

    private void ustawWPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawWPActionPerformed
        symbol = 'P';
        cursor = ustawWP.getSelectedIcon();
    }//GEN-LAST:event_ustawWPActionPerformed

    private void ustawWNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawWNActionPerformed
        symbol = 'N';
        cursor = ustawWN.getSelectedIcon();
    }//GEN-LAST:event_ustawWNActionPerformed

    private void ustawWBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawWBActionPerformed
        symbol = 'B';
        cursor = ustawWB.getSelectedIcon();
    }//GEN-LAST:event_ustawWBActionPerformed

    private void ustawWRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawWRActionPerformed
        symbol = 'R';
        cursor = ustawWR.getSelectedIcon();
    }//GEN-LAST:event_ustawWRActionPerformed

    private void ustawWQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawWQActionPerformed
        symbol = 'Q';
        cursor = ustawWQ.getSelectedIcon();
    }//GEN-LAST:event_ustawWQActionPerformed

    private void ustawWKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawWKActionPerformed
        symbol = 'K';
        cursor = ustawWK.getSelectedIcon();
    }//GEN-LAST:event_ustawWKActionPerformed

    private void ustawBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawBPActionPerformed
        symbol = 'p';
        cursor = ustawBP.getSelectedIcon();
    }//GEN-LAST:event_ustawBPActionPerformed

    private void ustawBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawBNActionPerformed
        symbol = 'n';
        cursor = ustawBN.getSelectedIcon();
    }//GEN-LAST:event_ustawBNActionPerformed

    private void ustawBBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawBBActionPerformed
        symbol = 'b';
        cursor = ustawBB.getSelectedIcon();
    }//GEN-LAST:event_ustawBBActionPerformed

    private void ustawBRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawBRActionPerformed
        symbol = 'r';
        cursor = ustawBR.getSelectedIcon();
    }//GEN-LAST:event_ustawBRActionPerformed

    private void ustawBQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawBQActionPerformed
        symbol = 'q';
        cursor = ustawBQ.getSelectedIcon();
    }//GEN-LAST:event_ustawBQActionPerformed

    private void ustawBKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawBKActionPerformed
        symbol = 'k';
        cursor = ustawBK.getSelectedIcon();
    }//GEN-LAST:event_ustawBKActionPerformed

    private void bialeRuchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bialeRuchActionPerformed
        ruchB = true;
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Niedostępne");
        int index = 1;
        for (int i = 0; i < 8; i++) {
            System.out.println('A' + i);
            if (i - 1 >= 0 && i + 1 < 8) {
                if (ust[4][i] == 'P' && (ust[4][i - 1] == 'p')) {
                    if (model.getIndexOf(("Na kolumnie " + ((char) ('A' + i - 1)))) == -1) {
                        model.addElement(("Na kolumnie " + ((char) ('A' + i - 1))));
                        index++;
                    }
                }
                if (ust[4][i] == 'P' && (ust[4][i + 1] == 'p')) {
                    if (model.getIndexOf(("Na kolumnie " + ((char) ('A' + i + 1)))) == -1) {
                        model.addElement(("Na kolumnie " + ((char) ('A' + i + 1))));
                        index++;
                    }
                }
            }
            if (i - 1 == -1) {
                if (ust[4][i] == 'P' && (ust[4][i + 1] == 'p')) {
                    if (model.getIndexOf(("Na kolumnie " + ((char) ('A' + i + 1)))) == -1) {
                        model.addElement(("Na kolumnie " + ((char) ('A' + i + 1))));
                        index++;
                    }
                }
            }
            if (i + 1 == 8) {
                if (ust[4][i] == 'P' && (ust[4][i - 1] == 'p')) {
                    if (model.getIndexOf(("Na kolumnie " + ((char) ('A' + i - 1)))) == -1) {
                        model.addElement(("Na kolumnie " + ((char) ('A' + i - 1))));
                        index++;
                    }
                }
            }

        }
        przelotowe.setModel(model);
    }//GEN-LAST:event_bialeRuchActionPerformed

    private void czarneRuchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_czarneRuchActionPerformed
        ruchB = false;
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Niedostępne");
        int index = 1;
        for (int i = 0; i < 8; i++) {
            System.out.println('A' + i);
            if (i - 1 >= 0 && i + 1 < 8) {
                if (ust[3][i] == 'P' && (ust[3][i - 1] == 'p')) {
                    if (model.getIndexOf(("Na kolumnie " + ((char) ('A' + i - 1)))) == -1) {
                        model.addElement(("Na kolumnie " + ((char) ('A' + i - 1))));
                        index++;
                    }
                }
                if (ust[3][i] == 'P' && (ust[3][i + 1] == 'p')) {
                    if (model.getIndexOf(("Na kolumnie " + ((char) ('A' + i + 1)))) == -1) {
                        model.addElement(("Na kolumnie " + ((char) ('A' + i + 1))));
                        index++;
                    }
                }
            }
            if (i - 1 == -1) {
                if (ust[3][i] == 'P' && (ust[3][i + 1] == 'p')) {
                    if (model.getIndexOf(("Na kolumnie " + ((char) ('A' + i + 1)))) == -1) {
                        model.addElement(("Na kolumnie " + ((char) ('A' + i + 1))));
                        index++;
                    }
                }
            }
            if (i + 1 == 8) {
                if (ust[3][i] == 'P' && (ust[3][i - 1] == 'p')) {
                    if (model.getIndexOf(("Na kolumnie " + ((char) ('A' + i - 1)))) == -1) {
                        model.addElement(("Na kolumnie " + ((char) ('A' + i - 1))));
                        index++;
                    }
                }
            }

        }
        przelotowe.setModel(model);
    }//GEN-LAST:event_czarneRuchActionPerformed

    private void jRadioButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton11ActionPerformed
        cursor = null;
        symbol = ' ';
    }//GEN-LAST:event_jRadioButton11ActionPerformed

    private void jButton81ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton81ActionPerformed
        try {
            msgwy = jTextField1.getText().trim();
            out.writeUTF(msgwy);
            jTextArea2.setText(jTextArea2.getText().trim() + "\n ja: " + msgwy + "\n");
            jTextField1.setText("");
        } catch (IOException ignored) {
        }
    }//GEN-LAST:event_jButton81ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_formMouseReleased

    private void alfastylActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alfastylActionPerformed
        kroj_zestaw = 1;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_alfastylActionPerformed

    private void klasykstylActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_klasykstylActionPerformed
        kroj_zestaw = 2;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_klasykstylActionPerformed

    private void whiteandblackfiguryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteandblackfiguryActionPerformed
        kolor_zestaw = 2;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_whiteandblackfiguryActionPerformed

    private void blueandredfiguryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueandredfiguryActionPerformed
        kolor_zestaw = 1;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_blueandredfiguryActionPerformed

    private void whiteandblackboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteandblackboardActionPerformed
        kolor_plansza = 1;
        wlasnykolor = false;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_whiteandblackboardActionPerformed

    private void blueandredboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueandredboardActionPerformed
        kolor_plansza = 2;
        wlasnykolor = false;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_blueandredboardActionPerformed

    private void whiteandblackboard1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteandblackboard1ActionPerformed
        kolor_plansza = 1;
        wlasnykolor = false;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_whiteandblackboard1ActionPerformed

    private void blueandredboard1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueandredboard1ActionPerformed
        kolor_plansza = 2;
        wlasnykolor = false;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_blueandredboard1ActionPerformed

    private void whiteandblackfigury1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteandblackfigury1ActionPerformed
        kolor_zestaw = 2;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_whiteandblackfigury1ActionPerformed

    private void blueandredfigury1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueandredfigury1ActionPerformed
        kolor_zestaw = 1;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_blueandredfigury1ActionPerformed

    private void alfastyl1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alfastyl1ActionPerformed
        kroj_zestaw = 1;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_alfastyl1ActionPerformed

    private void klasykstyl1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_klasykstyl1ActionPerformed
        kroj_zestaw = 2;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_klasykstyl1ActionPerformed

    private void brownboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brownboardActionPerformed
        kolor_plansza = 3;
        wlasnykolor = false;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_brownboardActionPerformed

    private void brownboard1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brownboard1ActionPerformed
        kolor_plansza = 3;
        wlasnykolor = false;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_brownboard1ActionPerformed

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked

    }//GEN-LAST:event_jLabel9MouseClicked

    private void obrotowyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obrotowyActionPerformed
        if (obrotowy.getText().equals("Obrót WŁ")) {
            obrotowy.setText("Obrót WYŁ");
            odwrot = false;
            styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
            try {
                ustawrame();
            } catch (NullPointerException ignored) {

            }
        } else {
            obrotowy.setText("Obrót WŁ");
            if (!ruchB) {
                odwrot = true;
                styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
                try {
                    ustawrame();
                } catch (NullPointerException ignored) {

                }
            }
        }
    }//GEN-LAST:event_obrotowyActionPerformed

    private void SIOnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SIOnOffActionPerformed
        if (SIOnOff.getText().equals("SI_włącz")) {
            Object[] opcje_rywala = {"Anuluj", "Graj z SI jako białe", "Graj z SI jako czarne", "symulacja"};
            sztuczny_rywal = (byte) JOptionPane.showOptionDialog(rootPane, "Gra z SI?", "opcje SI", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcje_rywala, null);
            JSlider suwak_trudnosci = new JSlider(1, 14, 1);
            Hashtable<Integer, JLabel> Opisy = new Hashtable<Integer, JLabel>();
            suwak_trudnosci.setOrientation(JSlider.VERTICAL);
            suwak_trudnosci.setMinorTickSpacing(1);
            Opisy.put(1, new JLabel("Nowicjusz"));
            Opisy.put(2, new JLabel("Przeciętny"));
            Opisy.put(4, new JLabel("Doświadczony"));
            Opisy.put(6, new JLabel("Weteran"));
            Opisy.put(8, new JLabel("Mistrz"));
            Opisy.put(10, new JLabel("Kandydat na Arcymistrza"));
            Opisy.put(12, new JLabel("Arcymistrz"));
            Opisy.put(14, new JLabel("Wielki Arcymistrz"));
            suwak_trudnosci.setLabelTable(Opisy);
            suwak_trudnosci.setPaintTicks(true);
            suwak_trudnosci.setPaintLabels(true);
            czasgry = -1;
            mazyna_losujaca.setEnabled(sztuczny_rywal == 0);
            switch (sztuczny_rywal) {
                case 3:
                    SIOnOff.setEnabled(false);
                    tura_rywala = true;
                    tryb = 0;
                    symulacja = true;
                    SI_ON = true;
                    odwrot = false;
                    obrotowy.setText("Obrót WYŁ");
                    JOptionPane.showMessageDialog(null, suwak_trudnosci, "wybierz stopień trudności", JOptionPane.INFORMATION_MESSAGE);
                    glebiaSI = (byte) (byte) suwak_trudnosci.getValue();
                    break;
                case 1:
                    SIOnOff.setEnabled(false);
                    tura_rywala = false;
                    tryb = 0;
                    SI_ON = true;
                    odwrot = false;
                    obrotowy.setText("Obrót WYŁ");
                    JOptionPane.showMessageDialog(null, suwak_trudnosci, "wybierz stopień trudności", JOptionPane.INFORMATION_MESSAGE);
                    glebiaSI = (byte) (byte) suwak_trudnosci.getValue();
                    break;
                case 2:
                    SIOnOff.setEnabled(false);
                    tura_rywala = true;
                    tryb = 0;
                    SI_ON = true;
                    odwrot = true;
                    obrotowy.setText("Obrót WYŁ");
                    JOptionPane.showMessageDialog(null, suwak_trudnosci, "wybierz stopień trudności", JOptionPane.INFORMATION_MESSAGE);
                    glebiaSI = (byte) (byte) suwak_trudnosci.getValue();
                    break;
                case 0:
                    obrotowy.setText("Obrót WŁ");
                    SI_ON = false;
                    break;
                default:
                    SI_ON = false;
                    obrotowy.setText("Obrót WŁ");
                    break;
            }
            SIOnOff.setEnabled(!SI_ON && !symulacja);
            if ((SI_ON && tura_rywala == ruchB) || symulacja) {
                char[][] backup1 = new char[8][8];
                for (int i = 0; i < 8; i++) {
                    System.arraycopy(ust[i], 0, backup1[i], 0, 8);
                }
                for (byte i = 0; i < 8; i++) {
                    for (byte j = 0; j < 8; j++) {
                        System.out.print("{" + backup1[i][j] + "}");
                    }
                    System.out.println();
                }
                SI_ma_ruch();
            }
            obrotowy.setVisible(!(SI_ON || siec));
        } else {
            SI_ON = false;
            obrotowy.setVisible(true);
        }
    }//GEN-LAST:event_SIOnOffActionPerformed

    private void resetgameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetgameActionPerformed
        kombinacja.setVisible(true);
        menu_load.setVisible(true);
        partia_odlozona.setVisible(false);
        odwrot = false;
        Wydruk.setEnabled(true);
        tryb = 0;
        ruch = "";
        Menu_gry_glowne.setEnabled(true);
        poddanie.setEnabled(false);
        remis_prop.setEnabled(false);
        for (int i = 0; i < 8; i++) {
            for (char j = 'A'; j < 'I'; j++) {
                dobierzprzycisk(String.valueOf(j + "" + (i + 1)), false).setEnabled(true);
                ust[i][j - 'A'] = ' ';
                odwrotna[i][j - 'A'] = ' ';
            }
        }
        remis_odrzut.setText("odrzuć remis");
        remis_prop.setText("proponuj remis");
        remis_zgoda.setText("przyjmij remis");
        poddanie.setText("poddaj się");
        ustawka = false;
        pomoc_ruch = Color.BLUE;
        przelotowe.setVisible(false);
        jLabel20.setVisible(false);
        mazyna_losujaca.setEnabled(true);
        krole_biale = 0;
        krole_czarne = 0;
        pionRB.setVisible(false);
        pionRW.setVisible(false);
        skoczekRB.setVisible(false);
        skoczekRW.setVisible(false);
        goniecRB.setVisible(false);
        goniecRW.setVisible(false);
        wiezaRB.setVisible(false);
        wiezaRW.setVisible(false);
        hetmanRB.setVisible(false);
        hetmanRW.setVisible(false);
        pionRB.setVisible(false);
        pionRW.setVisible(false);
        ustawka = false;
        Blackkingside.setVisible(false);
        Whitekingside.setVisible(false);
        Blackqueenside.setVisible(false);
        Whitequeenside.setVisible(false);
        obrotowy.setVisible(!(SI_ON || siec));
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
        jButton72.setVisible(false);
        czarneRuch.setVisible(false);
        bialeRuch.setVisible(false);
        jRadioButton11.setVisible(false);
        ustawWP.setVisible(false);
        ustawBP.setVisible(false);
        ustawWN.setVisible(false);
        ustawBN.setVisible(false);
        ustawWB.setVisible(false);
        ustawBB.setVisible(false);
        ustawWR.setVisible(false);
        ustawBR.setVisible(false);
        ustawWQ.setVisible(false);
        ustawBQ.setVisible(false);
        ustawWK.setVisible(false);
        ustawBK.setVisible(false);
        wleft = true;
        wright = true;
        bleft = true;
        bright = true;
        Menu_gry_glowne.setEnabled(true);
        for (int i = 1; i <= 8; i++) {
            for (char j = 'A'; j <= 'H'; j++) {
                dobierzprzycisk(String.valueOf(j + "" + i), false).setEnabled(false);
            }
        }
        SIOnOff.setEnabled(false);
        obrotowy.setEnabled(false);
        bleft = true;
        bright = true;
        wleft = true;
        wright = true;
        movenr = 1;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                switch (i) {
                    case 0:
                        switch (j) {
                            case 0:
                            case 7:
                                ust[i][j] = 'R';
                                odwrotna[i][j] = 'r';
                                break;
                            case 1:
                            case 6:
                                ust[i][j] = 'N';
                                odwrotna[i][j] = 'n';
                                break;
                            case 5:
                            case 2:
                                ust[i][j] = 'B';
                                odwrotna[i][j] = 'b';
                                break;
                            case 3:
                                ust[i][j] = 'Q';
                                odwrotna[i][j] = 'k';
                                break;
                            case 4:
                                ust[i][j] = 'K';
                                odwrotna[i][j] = 'q';
                                break;
                        }
                        break;
                    case 1:
                        ust[i][j] = 'P';
                        odwrotna[i][j] = 'p';
                        break;
                    case 7:
                        switch (j) {
                            case 0:
                            case 7:
                                ust[i][j] = 'r';
                                odwrotna[i][j] = 'R';
                                break;
                            case 1:
                            case 6:
                                ust[i][j] = 'n';
                                odwrotna[i][j] = 'N';
                                break;
                            case 5:
                            case 2:
                                ust[i][j] = 'b';
                                odwrotna[i][j] = 'B';
                                break;
                            case 3:
                                ust[i][j] = 'q';
                                odwrotna[i][j] = 'K';
                                break;
                            case 4:
                                ust[i][j] = 'k';
                                odwrotna[i][j] = 'Q';
                                break;
                        }
                        break;
                    case 6:
                        ust[i][j] = 'p';
                        odwrotna[i][j] = 'P';
                        break;
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        ust[i][j] = ' ';
                        odwrotna[i][j] = ' ';
                }
            }
        }
        rezerwyBG = 0;
        rezerwyBH = 0;
        rezerwyBP = 0;
        rezerwyBS = 0;
        rezerwyBW = 0;
        rezerwyCG = 0;
        rezerwyCH = 0;
        rezerwyCP = 0;
        rezerwyCS = 0;
        rezerwyCW = 0;
        pionRB.setVisible(false);
        pionRW.setVisible(false);
        skoczekRB.setVisible(false);
        skoczekRW.setVisible(false);
        goniecRB.setVisible(false);
        goniecRW.setVisible(false);
        wiezaRB.setVisible(false);
        wiezaRW.setVisible(false);
        hetmanRB.setVisible(false);
        hetmanRW.setVisible(false);
        pionRB.setVisible(false);
        pionRW.setVisible(false);
        hetmanRW.setText("0");
        hetmanRB.setText("0");
        wiezaRW.setText("0");
        wiezaRB.setText("0");
        goniecRW.setText("0");
        goniecRB.setText("0");
        skoczekRW.setText("0");
        skoczekRB.setText("0");
        pionRW.setText("0");
        pionRB.setText("0");
        kingrochB = true;
        kingrochC = true;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
        jTextArea2.setText("");
        jTextArea3.setText("");
        jTextArea3.setVisible(true);
        czysc_rame();
        mordobicia.clear();
        zwyczajneR.clear();
        hug_list.clear();
        SI_wyk = false;
        odwrot = false;
        plustime = 0;
        dokonano_RB = false;
        dokonano_RC = false;
        organizator = false;
        siec = false;
        oczekiwanie = false;
        historia.clear();
        listaip.clear();
        ruchy_literowe.clear();
        ruchy_syboliczne.clear();
        ruchB = true;
        msgwe = "";
        msgwy = "";
        ruch = "";
        polestart = false;
        prze = false;
        gra = false;
        dokonanoEP = false; // baza
        roch = false;
        wyk = false;
        przelot = false;
        przelotcan = false;  // baza
        znak_promocji = ' ';//baza
        krolS = false;
        bleft = true;
        bright = true;
        wleft = true;
        wright = true;//baza
        movenr = 1;
        kolumna = 0;
        pole = 0;//baza
        wzor = false;
        ustawka = false;//baza
        hodu = true;
        hitme = true;
        protectme = true;
        move = true;//baza
        laczny_czas = 0;//baza
        ruszaj = "";
        zatrzymaj = "";//gra online
        liczba_usciskow = 0;
        ostatni_start = "";
        ostatni_stop = "";
        symulacja = false;
        Wydruk.setEnabled(false);
        jRadioButton11.setVisible(false);
        jButton72.setVisible(false);
        czarneRuch.setVisible(false);
        bialeRuch.setVisible(false);
        ustawWP.setVisible(false);
        ustawBP.setVisible(false);
        ustawWN.setVisible(false);
        ustawBN.setVisible(false);
        ustawWB.setVisible(false);
        ustawBB.setVisible(false);
        ustawWR.setVisible(false);
        ustawBR.setVisible(false);
        ustawWQ.setVisible(false);
        ustawBQ.setVisible(false);
        ustawWK.setVisible(false);
        ustawBK.setVisible(false);
        Menu_gry_glowne.setEnabled(true);
        Blackkingside.setVisible(false);
        Whitekingside.setVisible(false);
        Blackqueenside.setVisible(false);
        Whitequeenside.setVisible(false);
        przelotowe.setVisible(false);
        jLabel20.setVisible(false);
        mazyna_losujaca.setEnabled(false);
        obrotowy.setVisible(true);
        SIOnOff.setVisible(true);
        kombinacja.setVisible(false);
        kombinacja.setEnabled(false);
        tryb = 0;
        nauka_gry = false;
        if (debiut_nauka != null) {
            debiut_nauka.dispose();
            debiut_nauka = null;
            Nauka.setEnabled(true);
        }
    }//GEN-LAST:event_resetgameActionPerformed

    private void Wlasne_kolor_jasneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Wlasne_kolor_jasneActionPerformed
        Color kolor3 = JColorChooser.showDialog(rootPane, "kolor jasnych pól", Color.WHITE);
        if (kolor3 != null) {
            wlasnykolor = true;
            koloruj_pola(true, kolor3);
        }
    }//GEN-LAST:event_Wlasne_kolor_jasneActionPerformed

    private void Wlasne_kolor_ciemneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Wlasne_kolor_ciemneActionPerformed
        Color kolor3 = JColorChooser.showDialog(rootPane, "kolor ciemych pól", Color.black);
        if (kolor3 != null) {
            wlasnykolor = true;
            koloruj_pola(false, kolor3);
        }
    }//GEN-LAST:event_Wlasne_kolor_ciemneActionPerformed

    private void Wlasne_kolor_jasne1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Wlasne_kolor_jasne1ActionPerformed
        Color kolor3 = JColorChooser.showDialog(rootPane, "kolor jasnych pól", Color.white);
        if (kolor3 != null) {
            wlasnykolor = true;
            koloruj_pola(true, kolor3);
        }
    }//GEN-LAST:event_Wlasne_kolor_jasne1ActionPerformed

    private void Wlasne_kolor_ciemne1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Wlasne_kolor_ciemne1ActionPerformed
        Color kolor3 = JColorChooser.showDialog(rootPane, "kolor ciemnych pól", Color.black);
        if (kolor3 != null) {
            wlasnykolor = true;
            koloruj_pola(false, kolor3);
        }
    }//GEN-LAST:event_Wlasne_kolor_ciemne1ActionPerformed

    private void Ramowka1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ramowka1ActionPerformed
        rama = JColorChooser.showDialog(rootPane, "kolor obramowania", Color.GREEN);
        if (rama == null) {
            rama = Color.GREEN;
        }
        poprawrame();
    }//GEN-LAST:event_Ramowka1ActionPerformed

    private void RamowkaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RamowkaActionPerformed
        rama = JColorChooser.showDialog(rootPane, "kolor obramowania", Color.GREEN);
        if (rama == null) {
            rama = Color.GREEN;
        }
        poprawrame();
    }//GEN-LAST:event_RamowkaActionPerformed

    private void Przycisk_helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Przycisk_helpActionPerformed
        switch (opcje_pomoc) {
            case 0:
                opcje_pomoc++;
                Przycisk_help.setText("Pokaż podpowiedzi");
                break;
            case 1:
                opcje_pomoc++;
                Przycisk_help.setText("Pokaż zasady i podpowiedzi");
                break;
            case 2:
                opcje_pomoc++;
                Przycisk_help.setText("Nie pokazuj nic");
                break;
            case 3:
                opcje_pomoc = 0;
                Przycisk_help.setText("Pokaż zasady poruszania figur");
                break;
        }
    }//GEN-LAST:event_Przycisk_helpActionPerformed

    private void partia_odlozonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partia_odlozonaActionPerformed
        JFileChooser wyborP = new JFileChooser();
        wyborP.setDialogType(JFileChooser.SAVE_DIALOG);
        wyborP.setFileFilter(new FileNameExtensionFilter("txt file", "txt"));
        wyborP.setAcceptAllFileFilterUsed(false);
        if (wyborP.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file;

            file = wyborP.getSelectedFile();
            if (!file.getName().endsWith(".txt")) {
                file = new File(file + ".txt");
            }

            try (BufferedWriter fileWriter = Files.newBufferedWriter(file.toPath(), StandardCharsets.UTF_8)) {
                fileWriter.flush();
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        fileWriter.write(ust[i][j]);
                    }
                    fileWriter.write("\n");
                }
                fileWriter.append(ruchB + "|" + przelotcan + "|" + kingrochB + "|" + kingrochC + "|" + dokonano_RB + "|" + dokonano_RC
                        + "|" + dolicz + "|" + wright + "|" + wleft + "|" + bright + "|" + bleft + "|");
                fileWriter.newLine();
                fileWriter.append(zasada50 + "+" + kol + "+" + movenr);
                fileWriter.newLine();
                for (String s : historia) {
                    fileWriter.append(((s + "\n")));
                }
                fileWriter.append("----\n");
                for (String s : ruchy_literowe) {
                    fileWriter.append(((s + "\n")));
                }
                fileWriter.append("----\n");
                for (String s : ruchy_syboliczne) {
                    fileWriter.append(((s + "\n")));
                }

            } catch (IOException e) {

            }
        }

    }//GEN-LAST:event_partia_odlozonaActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (tryb != 3 && tryb != 4) {
            boolean zmiana = (ustawka) ? pierwsza_kolej : true;
            jTextArea3.setText("");
            int ilosc_ruchow = 1;

            if (!pierwsza_kolej && ustawka) {
                jTextArea3.append("1.    ...   ");
            }

            if (!jCheckBox1.isSelected()) {
                for (String s : ruchy_literowe) {
                    jTextArea3.append((zmiana ? (ilosc_ruchow + ".   " + s) : ("    " + s + "\n")));
                    zmiana = !zmiana;
                    if (zmiana) {
                        ilosc_ruchow++;
                    }
                }
            } else {
                for (String s : ruchy_syboliczne) {
                    jTextArea3.append((zmiana ? (ilosc_ruchow + ".   " + s) : ("    " + s + "\n")));
                    zmiana = !zmiana;
                    if (zmiana) {
                        ilosc_ruchow++;
                    }
                }
            }
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void WhitekingsideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WhitekingsideActionPerformed
        if (ust[0][4] != 'K' || ust[0][7] != 'R') {
            Whitekingside.setSelected(false);
        }
    }//GEN-LAST:event_WhitekingsideActionPerformed

    private void WhitequeensideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WhitequeensideActionPerformed
        if (ust[0][4] != 'K' || ust[0][0] != 'R') {
            Whitequeenside.setSelected(false);
        }
    }//GEN-LAST:event_WhitequeensideActionPerformed

    private void BlackkingsideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlackkingsideActionPerformed
        if (ust[7][4] != 'k' || ust[7][7] != 'r') {
            Blackkingside.setSelected(false);
        }
    }//GEN-LAST:event_BlackkingsideActionPerformed

    private void BlackqueensideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlackqueensideActionPerformed
        if (ust[7][4] != 'k' || ust[7][0] != 'r') {
            Blackqueenside.setSelected(false);
        }
    }//GEN-LAST:event_BlackqueensideActionPerformed

    private void druk_odpisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_druk_odpisActionPerformed
        try {
            if (ruchy_literowe.size() <= 240) {
                PrinterJob job = PrinterJob.getPrinterJob();
                PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
                PageFormat pf = job.getPageFormat(aset);
                Paper papier = pf.getPaper();
                papier.setImageableArea(10, 10, papier.getWidth() - 10, papier.getHeight() - 10);
                pf.setOrientation(PageFormat.PORTRAIT);
                job.setPrintable(new Drukarka_P(ust, ruchB, ruchy_literowe, druk_wzgledny), pf);
                boolean ok = job.printDialog(aset);
                if (ok) {
                    try {
                        job.print(aset);
                    } catch (PrinterException ex) {
                    }
                }
            } else {
                System.out.println("init");
                PrinterJob printJob = PrinterJob.getPrinterJob();
                Book book = new Book();
                PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
                aset.add(new MediaPrintableArea(10, 10, 195, 260, MediaPrintableArea.MM));
                PageFormat pf = printJob.defaultPage();
                Paper papier = pf.getPaper();
                papier.setImageableArea(25, 25, papier.getWidth() - 10, papier.getHeight() - 10);
                System.out.println(papier.getWidth() + " " + papier.getHeight());
                pf.setPaper(papier);
                pf.setOrientation(PageFormat.PORTRAIT);
                book.append(new Drukarka_P(ruchB ? ust : odwrotna, ruchB, druk_wzgledny), pf);
                if (ruchy_literowe.size() <= 600) {
                    book.append(new Drukarka_H(ruchy_literowe), pf);
                } else {
                    int str = 1;
                    do {
                        ArrayList<String> lista = new ArrayList<>();
                        for (int i = 600 * (str - 1); i < str * 600; i++) {
                            lista.add(ruchy_literowe.get(i));
                        }
                        book.append(new Drukarka_H(lista, str), pf);
                        str++;
                    } while (str * 600 < ruchy_literowe.size());
                    ArrayList<String> lista = new ArrayList<>();
                    for (int i = 600 * (str - 1); i < ruchy_literowe.size(); i++) {
                        lista.add(ruchy_literowe.get(i));
                    }
                    book.append(new Drukarka_H(lista, str), pf);
                }
                printJob.setPageable(book);

                boolean ok = printJob.printDialog();
                if (ok) {
                    try {
                        printJob.print(aset);
                    } catch (PrinterException ex) {
                    }
                }

            }
        } catch (IOException ex) {
            Logger.getLogger(SzachowaArena.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_druk_odpisActionPerformed

    private void druk_pozycjaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_druk_pozycjaActionPerformed
        try {
            PrinterJob job = PrinterJob.getPrinterJob();
            PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
            aset.add(new MediaPrintableArea(10, 10, 195, 260, MediaPrintableArea.MM));
            PageFormat pf = job.getPageFormat(aset);
            pf.setOrientation(PageFormat.PORTRAIT);

            job.setPrintable(new Drukarka_P(druk_wzgledny ? (ruchB ? ust : odwrotna) : ust, ruchB, druk_wzgledny), pf);
            boolean ok = job.printDialog(aset);
            if (ok) {
                try {
                    job.print(aset);
                } catch (PrinterException ex) {
                    ex.printStackTrace();
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_druk_pozycjaActionPerformed

    private void oldschool1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oldschool1ActionPerformed
        kroj_zestaw = 3;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_oldschool1ActionPerformed

    private void oldschoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oldschoolActionPerformed
        kroj_zestaw = 3;
        styl(kolor_zestaw, kroj_zestaw, kolor_plansza);
    }//GEN-LAST:event_oldschoolActionPerformed

    private void losowankoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_losowankoActionPerformed
        Los_postep progresik = new Los_postep();
        progresik.addPropertyChangeListener((PropertyChangeEvent evt2) -> {
            String name1 = evt2.getPropertyName();
            if (name1.equals("progress")) {
                repaint();
            } else if (name1.equals("state")) {
                SwingWorker.StateValue state1 = (SwingWorker.StateValue) evt2.getNewValue();
            }
        });
        progresik.execute();
    }//GEN-LAST:event_losowankoActionPerformed

    private void kombstartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kombstartActionPerformed
        try {
            ArrayList<String> param = new ArrayList<>();
            int limit = Integer.parseInt(JOptionPane.showInputDialog("Ile ruchów maksymalnie jest w dziurze?"));
            if (limit > 0) {
                for (int i = 0; i < limit; i++) {
                    String s;
                    do {
                        s = JOptionPane.showInputDialog("Podaj ruch nr " + (i + 1) + ", którego jesteś pewny w tym miejscu.\n"
                                + "jeśli nie jesteś pewny ruchu, wpisz 9 znaków '?'\n"
                                + "jeśli jesteś pewny części ruchu, wpisz według legendy: \n"
                                + "? za każdy niepewny znak w nazwie ruchu."
                                + "W nazwie ruchu są po kolei symbol figury, pole start, symbol ruchu/bicia,\n"
                                + "pole docelowe. Symbole EP, =symbol figury promocji,+ lub # opcjonalne jak występują\n"
                                + "jesli nie, wpisz ?? w przypadku EP lub =Promocja, ? w przypadku symbolu +, spację w przypadku braku");
                    } while (s.isEmpty() || s.length() < 9);
                    param.add(s);
                }
                ArrayList<String> dziurawa_kombinacja = zalatane(pozstart, pozstop, limit, new ArrayList<>(), param, limit);
                if (dziurawa_kombinacja == null) {
                    JOptionPane.showMessageDialog(rootPane, "Nie znaleziono kombinacji w zadanym dystansie");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Znaleziono kombinację w zadanym dystansie");
                    jTextArea2.setEnabled(true);

                    for (String s : dziurawa_kombinacja) {
                        System.out.println("rozw:" + s);
                        jTextArea2.append(s + "\n");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Błąd. Podana liczba nie jest naturalną większą od 0");
            }
        } catch (NumberFormatException l) {
            JOptionPane.showMessageDialog(rootPane, "Błąd. Podana liczba nie jest naturalną większą od 0");

        } catch (NullPointerException l1) {
            JOptionPane.showMessageDialog(rootPane, "Błąd. w liście pewności ruchów");

        }
    }//GEN-LAST:event_kombstartActionPerformed

    private void kombwyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kombwyActionPerformed
        kingrochB = Whitekingside.isSelected() || Whitequeenside.isSelected();
        kingrochC = Blackkingside.isSelected() || Blackqueenside.isSelected();
        wleft = Whitequeenside.isSelected();
        wright = Whitekingside.isSelected();
        bleft = Blackqueenside.isSelected();
        bright = Blackkingside.isSelected();
        pozstop = new Pozycja(bleft, bright, wleft, wright, kingrochB, kingrochC, ruchB, przelotcan, kol, ust);
        JOptionPane.showMessageDialog(rootPane, "Zapisano pozycję wyjsciową");
    }//GEN-LAST:event_kombwyActionPerformed

    private void kombweActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kombweActionPerformed
        kingrochB = Whitekingside.isSelected() || Whitequeenside.isSelected();
        kingrochC = Blackkingside.isSelected() || Blackqueenside.isSelected();
        wleft = Whitequeenside.isSelected();
        wright = Whitekingside.isSelected();
        bleft = Blackqueenside.isSelected();
        bright = Blackkingside.isSelected();
        pozstart = new Pozycja(bleft, bright, wleft, wright, kingrochB, kingrochC, ruchB, przelotcan, kol, ust);
        JOptionPane.showMessageDialog(rootPane, "Zapisano pozycję wejsciową");
    }//GEN-LAST:event_kombweActionPerformed

    private void pionRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pionRBActionPerformed
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        if (symbol == ' ' && !ruchB) {
            if (!dostawka) {
                dostawka = true;
                symbol = 'p';
                pionRB.setBorder(new LineBorder(pomoc_ruch, 4));
                dobierz_kursor(symbol);
            } else {
                dostawka = false;
                symbol = ' ';
                pionRB.setBorder(null);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_pionRBActionPerformed

    private void skoczekRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skoczekRBActionPerformed
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        if (symbol == ' ' && !ruchB) {
            if (!dostawka) {
                dostawka = true;
                symbol = 'n';
                skoczekRB.setBorder(new LineBorder(pomoc_ruch, 4));
                dobierz_kursor(symbol);
            } else {
                dostawka = false;
                symbol = ' ';
                skoczekRB.setBorder(null);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_skoczekRBActionPerformed

    private void goniecRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goniecRBActionPerformed
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        if (symbol == ' ' && !ruchB) {
            if (!dostawka) {
                dostawka = true;
                symbol = 'b';
                goniecRB.setBorder(new LineBorder(pomoc_ruch, 4));
                dobierz_kursor(symbol);
            } else {
                dostawka = false;
                symbol = ' ';
                goniecRB.setBorder(null);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_goniecRBActionPerformed

    private void wiezaRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wiezaRBActionPerformed
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        if (symbol == ' ' && !ruchB) {
            if (!dostawka) {
                dostawka = true;
                symbol = 'r';
                wiezaRB.setBorder(new LineBorder(pomoc_ruch, 4));
                dobierz_kursor(symbol);
            } else {
                dostawka = false;
                symbol = ' ';
                wiezaRB.setBorder(null);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_wiezaRBActionPerformed

    private void hetmanRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hetmanRBActionPerformed
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        if (symbol == ' ' && !ruchB) {
            if (!dostawka) {
                dostawka = true;
                symbol = 'q';
                hetmanRB.setBorder(new LineBorder(pomoc_ruch, 4));
                dobierz_kursor(symbol);
            } else {
                dostawka = false;
                symbol = ' ';
                hetmanRB.setBorder(null);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_hetmanRBActionPerformed

    private void hetmanRWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hetmanRWActionPerformed
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        if (symbol == ' ' && ruchB) {
            if (!dostawka) {
                dostawka = true;
                symbol = 'Q';
                hetmanRW.setBorder(new LineBorder(pomoc_ruch, 4));
                dobierz_kursor(symbol);
            } else {
                dostawka = false;
                symbol = ' ';
                hetmanRW.setBorder(null);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_hetmanRWActionPerformed

    private void wiezaRWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wiezaRWActionPerformed
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        if (symbol == ' ' && ruchB) {
            if (!dostawka) {
                dostawka = true;
                symbol = 'R';
                wiezaRW.setBorder(new LineBorder(pomoc_ruch, 4));
                dobierz_kursor(symbol);
            } else {
                dostawka = false;
                symbol = ' ';
                wiezaRW.setBorder(null);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_wiezaRWActionPerformed

    private void goniecRWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goniecRWActionPerformed
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        if (symbol == ' ' && ruchB) {
            if (!dostawka) {
                dostawka = true;
                symbol = 'B';
                goniecRW.setBorder(new LineBorder(pomoc_ruch, 4));
                dobierz_kursor(symbol);
            } else {
                dostawka = false;
                symbol = ' ';
                goniecRW.setBorder(null);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_goniecRWActionPerformed

    private void skoczekRWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skoczekRWActionPerformed
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        if (symbol == ' ' && ruchB) {
            if (!dostawka) {
                dostawka = true;
                symbol = 'N';
                skoczekRW.setBorder(new LineBorder(pomoc_ruch, 4));
                dobierz_kursor(symbol);
            } else {
                dostawka = false;
                symbol = ' ';
                skoczekRW.setBorder(null);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_skoczekRWActionPerformed

    private void pionRWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pionRWActionPerformed
        hetmanRW.setBorder(null);
        hetmanRB.setBorder(null);
        wiezaRW.setBorder(null);
        wiezaRB.setBorder(null);
        goniecRW.setBorder(null);
        goniecRB.setBorder(null);
        skoczekRW.setBorder(null);
        skoczekRB.setBorder(null);
        pionRW.setBorder(null);
        pionRB.setBorder(null);
        if (symbol == ' ' && ruchB) {
            if (!dostawka) {
                dostawka = true;
                symbol = 'P';
                pionRW.setBorder(new LineBorder(pomoc_ruch, 4));
                dobierz_kursor(symbol);

            } else {
                dostawka = false;
                symbol = ' ';
                pionRW.setBorder(null);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_pionRWActionPerformed

    private void przelotoweActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_przelotoweActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_przelotoweActionPerformed

    private void druk_obroconyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_druk_obroconyActionPerformed
        druk_wzgledny = druk_obrocony.isSelected();
    }//GEN-LAST:event_druk_obroconyActionPerformed

    private void menu_newgame_notimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_newgame_notimeActionPerformed
        new_game(0, false, false);
    }//GEN-LAST:event_menu_newgame_notimeActionPerformed

    private void menu_onlineJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_onlineJActionPerformed
        online_join_game();
    }//GEN-LAST:event_menu_onlineJActionPerformed

    private void menu_loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_loadActionPerformed
        laduj_wstrzymane(evt);
    }//GEN-LAST:event_menu_loadActionPerformed

    private void menu_setActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_setActionPerformed
        create_set_game();
    }//GEN-LAST:event_menu_setActionPerformed

    private void Menu_onlineCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_onlineCActionPerformed
        online_create_game();
    }//GEN-LAST:event_Menu_onlineCActionPerformed

    private void menu_gameSIWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_gameSIWActionPerformed
        new_game(0, true, true);
    }//GEN-LAST:event_menu_gameSIWActionPerformed

    private void menu_SIBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_SIBActionPerformed
        new_game(0, true, false);
    }//GEN-LAST:event_menu_SIBActionPerformed

    private void OPakoSakoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPakoSakoActionPerformed
        new_game(3, false, false);
    }//GEN-LAST:event_OPakoSakoActionPerformed

    private void OGrabiezActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OGrabiezActionPerformed
        new_game(5, false, false);
    }//GEN-LAST:event_OGrabiezActionPerformed

    private void ODom_SzalenstwaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ODom_SzalenstwaActionPerformed
        new_game(8, false, false);
    }//GEN-LAST:event_ODom_SzalenstwaActionPerformed

    private void OMglaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OMglaActionPerformed
        new_game(7, false, false);
    }//GEN-LAST:event_OMglaActionPerformed

    private void OAntyszachyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OAntyszachyActionPerformed
        new_game(6, false, false);
    }//GEN-LAST:event_OAntyszachyActionPerformed

    private void OAmazonkaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OAmazonkaActionPerformed
        new_game(4, false, false);
    }//GEN-LAST:event_OAmazonkaActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        new_game(1, false, false);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void TSzachMatyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TSzachMatyActionPerformed
        new_game(2, false, false);
    }//GEN-LAST:event_TSzachMatyActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        nauka_gry = true;
        if (nauka_gry) {
            Nauka.setEnabled(false);
            remis_odrzut.setText("Poprzedni");
            remis_prop.setText("ćwicz debiut");
            remis_zgoda.setText("Nastepny");
            poddanie.setText("trenuj inny");
            debiut_nauka = new Debiut_nauka();
            debiut_nauka.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SzachowaArena.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SzachowaArena().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton A1;
    public static javax.swing.JButton A2;
    public static javax.swing.JButton A3;
    public static javax.swing.JButton A4;
    public static javax.swing.JButton A5;
    public static javax.swing.JButton A6;
    public static javax.swing.JButton A7;
    public static javax.swing.JButton A8;
    public static javax.swing.JButton B1;
    public static javax.swing.JButton B2;
    public static javax.swing.JButton B3;
    public static javax.swing.JButton B4;
    public static javax.swing.JButton B5;
    public static javax.swing.JButton B6;
    public static javax.swing.JButton B7;
    public static javax.swing.JButton B8;
    private javax.swing.JCheckBox Blackkingside;
    private javax.swing.JCheckBox Blackqueenside;
    public static javax.swing.JButton C1;
    public static javax.swing.JButton C2;
    public static javax.swing.JButton C3;
    public static javax.swing.JButton C4;
    public static javax.swing.JButton C5;
    public static javax.swing.JButton C6;
    public static javax.swing.JButton C7;
    public static javax.swing.JButton C8;
    public static javax.swing.JButton D1;
    public static javax.swing.JButton D2;
    public static javax.swing.JButton D3;
    public static javax.swing.JButton D4;
    public static javax.swing.JButton D5;
    public static javax.swing.JButton D6;
    public static javax.swing.JButton D7;
    public static javax.swing.JButton D8;
    private javax.swing.JMenu Design;
    public static javax.swing.JButton E1;
    public static javax.swing.JButton E2;
    public static javax.swing.JButton E3;
    public static javax.swing.JButton E4;
    public static javax.swing.JButton E5;
    public static javax.swing.JButton E6;
    public static javax.swing.JButton E7;
    public static javax.swing.JButton E8;
    public static javax.swing.JButton F1;
    public static javax.swing.JButton F2;
    public static javax.swing.JButton F3;
    public static javax.swing.JButton F4;
    public static javax.swing.JButton F5;
    public static javax.swing.JButton F6;
    public static javax.swing.JButton F7;
    public static javax.swing.JButton F8;
    public static javax.swing.JButton G1;
    public static javax.swing.JButton G2;
    public static javax.swing.JButton G3;
    public static javax.swing.JButton G4;
    public static javax.swing.JButton G5;
    public static javax.swing.JButton G6;
    public static javax.swing.JButton G7;
    public static javax.swing.JButton G8;
    public static javax.swing.JButton H1;
    public static javax.swing.JButton H2;
    public static javax.swing.JButton H3;
    public static javax.swing.JButton H4;
    public static javax.swing.JButton H5;
    public static javax.swing.JButton H6;
    public static javax.swing.JButton H7;
    public static javax.swing.JButton H8;
    private javax.swing.JMenu Menu_gry_glowne;
    private javax.swing.JMenu Menu_new_game_time;
    private javax.swing.JMenuItem Menu_onlineC;
    private javax.swing.JMenu Nauka;
    private javax.swing.JMenuItem OAmazonka;
    private javax.swing.JMenuItem OAntyszachy;
    private javax.swing.JMenuItem ODom_Szalenstwa;
    private javax.swing.JMenuItem OGrabiez;
    private javax.swing.JMenuItem OMgla;
    private javax.swing.JMenuItem OPakoSako;
    private javax.swing.JButton Przycisk_help;
    private javax.swing.JMenuItem Ramowka;
    private javax.swing.JMenuItem Ramowka1;
    private javax.swing.JButton SIOnOff;
    private javax.swing.JMenuItem TSzachMaty;
    private javax.swing.JCheckBox Whitekingside;
    private javax.swing.JCheckBox Whitequeenside;
    private javax.swing.JMenuItem Wlasne_kolor_ciemne;
    private javax.swing.JMenuItem Wlasne_kolor_ciemne1;
    private javax.swing.JMenuItem Wlasne_kolor_jasne;
    private javax.swing.JMenuItem Wlasne_kolor_jasne1;
    private javax.swing.JMenu Wydruk;
    private javax.swing.JRadioButtonMenuItem alfastyl;
    private javax.swing.JRadioButtonMenuItem alfastyl1;
    private javax.swing.JRadioButton bialeRuch;
    private javax.swing.JRadioButtonMenuItem blueandredboard;
    private javax.swing.JRadioButtonMenuItem blueandredboard1;
    private javax.swing.JRadioButtonMenuItem blueandredfigury;
    private javax.swing.JRadioButtonMenuItem blueandredfigury1;
    private javax.swing.JRadioButtonMenuItem brownboard;
    private javax.swing.JRadioButtonMenuItem brownboard1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JRadioButton czarneRuch;
    private javax.swing.JCheckBoxMenuItem druk_obrocony;
    private javax.swing.JMenuItem druk_odpis;
    private javax.swing.JMenuItem druk_pozycja;
    private javax.swing.JButton goniecRB;
    private javax.swing.JButton goniecRW;
    private javax.swing.JButton hetmanRB;
    private javax.swing.JButton hetmanRW;
    private javax.swing.JButton jButton72;
    private javax.swing.JButton jButton81;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    public static javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPopupMenu jPopupMenu1;
    public static volatile javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JRadioButtonMenuItem klasykstyl;
    private javax.swing.JRadioButtonMenuItem klasykstyl1;
    private javax.swing.JMenu kolor;
    private javax.swing.JMenu kolor1;
    private javax.swing.JMenu kombinacja;
    private javax.swing.JMenuItem kombstart;
    private javax.swing.JMenuItem kombwe;
    private javax.swing.JMenuItem kombwy;
    private javax.swing.JMenu kroj;
    private javax.swing.JMenu kroj1;
    private javax.swing.JMenuItem losowanko;
    private javax.swing.JMenu mazyna_losujaca;
    private javax.swing.JMenuItem menu_SIB;
    private javax.swing.JMenuItem menu_gameSIW;
    private javax.swing.JMenu menu_gry;
    private javax.swing.JMenuItem menu_load;
    private javax.swing.JMenuItem menu_newgame_notime;
    private javax.swing.JMenu menu_odmian;
    private javax.swing.JMenu menu_online;
    private javax.swing.JMenuItem menu_onlineJ;
    private javax.swing.JMenuItem menu_set;
    private javax.swing.JButton obrotowy;
    private javax.swing.JRadioButtonMenuItem oldschool;
    private javax.swing.JRadioButtonMenuItem oldschool1;
    public static javax.swing.JButton partia_odlozona;
    private javax.swing.JButton pionRB;
    private javax.swing.JButton pionRW;
    private javax.swing.JMenu plansza;
    private javax.swing.JMenu plansza1;
    public static javax.swing.JButton poddanie;
    private javax.swing.JComboBox<String> przelotowe;
    public static javax.swing.JButton remis_odrzut;
    public static javax.swing.JButton remis_prop;
    public static javax.swing.JButton remis_zgoda;
    private javax.swing.JButton resetgame;
    private javax.swing.JButton skoczekRB;
    private javax.swing.JButton skoczekRW;
    private javax.swing.JRadioButton ustawBB;
    private javax.swing.JRadioButton ustawBK;
    private javax.swing.JRadioButton ustawBN;
    private javax.swing.JRadioButton ustawBP;
    private javax.swing.JRadioButton ustawBQ;
    private javax.swing.JRadioButton ustawBR;
    private javax.swing.JRadioButton ustawWB;
    private javax.swing.JRadioButton ustawWK;
    private javax.swing.JRadioButton ustawWN;
    private javax.swing.JRadioButton ustawWP;
    private javax.swing.JRadioButton ustawWQ;
    private javax.swing.JRadioButton ustawWR;
    private javax.swing.JRadioButtonMenuItem whiteandblackboard;
    private javax.swing.JRadioButtonMenuItem whiteandblackboard1;
    private javax.swing.JRadioButtonMenuItem whiteandblackfigury;
    private javax.swing.JRadioButtonMenuItem whiteandblackfigury1;
    private javax.swing.JButton wiezaRB;
    private javax.swing.JButton wiezaRW;
    private javax.swing.JLabel zegarbiale;
    private javax.swing.JLabel zegarczarne;
    // End of variables declaration//GEN-END:variables
}
